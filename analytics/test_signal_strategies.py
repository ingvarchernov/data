#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—ó —Å–∏–≥–Ω–∞–ª—ñ–≤ –º–æ–¥–µ–ª—ñ
"""
import pandas as pd
import numpy as np
import sys

def test_strategy(df: pd.DataFrame, invert: bool = False, name: str = "Original"):
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó"""
    
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä—É—Ö—É —Ü—ñ–Ω–∏
    df = df.copy()
    df['price_change'] = df['price'].shift(-1) - df['price']
    df['price_direction'] = np.where(df['price_change'] > 0, 'UP', 
                            np.where(df['price_change'] < 0, 'DOWN', 'FLAT'))
    
    # –í–∏–¥–∞–ª–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫
    df = df[:-1]
    
    # –Ü–Ω–≤–µ—Ä—Å—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if invert:
        df['prediction'] = df['prediction'].replace({'UP': 'DOWN', 'DOWN': 'UP'})
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    correct_up = ((df['prediction'] == 'UP') & (df['price_direction'] == 'UP')).sum()
    wrong_up = ((df['prediction'] == 'UP') & (df['price_direction'] == 'DOWN')).sum()
    
    correct_down = ((df['prediction'] == 'DOWN') & (df['price_direction'] == 'DOWN')).sum()
    wrong_down = ((df['prediction'] == 'DOWN') & (df['price_direction'] == 'UP')).sum()
    
    correct_neutral = ((df['prediction'] == 'NEUTRAL') & (df['price_direction'] == 'FLAT')).sum()
    
    total_up = (df['prediction'] == 'UP').sum()
    total_down = (df['prediction'] == 'DOWN').sum()
    total_neutral = (df['prediction'] == 'NEUTRAL').sum()
    
    total_correct = correct_up + correct_down + correct_neutral
    total_signals = len(df)
    
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–∏–±—É—Ç–∫–æ–≤–æ—Å—Ç—ñ
    df['signal_profit'] = 0.0
    df.loc[df['prediction'] == 'UP', 'signal_profit'] = df['price_change']
    df.loc[df['prediction'] == 'DOWN', 'signal_profit'] = -df['price_change']
    
    total_profit = df['signal_profit'].sum()
    avg_profit_per_trade = df[df['prediction'] != 'NEUTRAL']['signal_profit'].mean()
    
    print(f"\n{'='*80}")
    print(f"üìä –°–¢–†–ê–¢–ï–ì–Ü–Ø: {name}")
    print(f"{'='*80}")
    
    if total_up > 0:
        up_accuracy = correct_up / total_up * 100
        print(f"üìà UP —Å–∏–≥–Ω–∞–ª—ñ–≤: {total_up}")
        print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_up} ({up_accuracy:.1f}%)")
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–æ–≤–æ: {wrong_up} ({100-up_accuracy:.1f}%)")
    else:
        print(f"üìà UP —Å–∏–≥–Ω–∞–ª—ñ–≤: 0")
    
    if total_down > 0:
        down_accuracy = correct_down / total_down * 100
        print(f"üìâ DOWN —Å–∏–≥–Ω–∞–ª—ñ–≤: {total_down}")
        print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_down} ({down_accuracy:.1f}%)")
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–æ–≤–æ: {wrong_down} ({100-down_accuracy:.1f}%)")
    else:
        print(f"üìâ DOWN —Å–∏–≥–Ω–∞–ª—ñ–≤: 0")
    
    print(f"‚ö™ NEUTRAL —Å–∏–≥–Ω–∞–ª—ñ–≤: {total_neutral}")
    
    overall_accuracy = total_correct / total_signals * 100 if total_signals > 0 else 0
    print(f"\nüéØ –ó–∞–≥–∞–ª—å–Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å: {overall_accuracy:.1f}%")
    print(f"üí∞ –°—É–º–∞—Ä–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: ${total_profit:,.2f}")
    print(f"üìä –°–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä–∏–±—É—Ç–æ–∫ –Ω–∞ —Å–∏–≥–Ω–∞–ª: ${avg_profit_per_trade:,.2f}")
    
    return {
        'name': name,
        'accuracy': overall_accuracy,
        'up_accuracy': correct_up / total_up * 100 if total_up > 0 else 0,
        'down_accuracy': correct_down / total_down * 100 if total_down > 0 else 0,
        'total_profit': total_profit,
        'avg_profit': avg_profit_per_trade
    }


def main():
    csv_file = 'graphics/csv/classification_analysis_BTCUSDT_20251023_224625.csv'
    
    print("üîç –¢–ï–°–¢–£–í–ê–ù–ù–Ø –°–¢–†–ê–¢–ï–ì–Ü–ô –Ü–ù–¢–ï–†–ü–†–ï–¢–ê–¶–Ü–á –°–ò–ì–ù–ê–õ–Ü–í")
    print("="*80)
    
    df = pd.read_csv(csv_file)
    
    results = []
    
    # 1. –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è
    results.append(test_strategy(df, invert=False, name="–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ (—è–∫ —î)"))
    
    # 2. –Ü–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è
    results.append(test_strategy(df, invert=True, name="–Ü–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∞ (UP‚ÜîDOWN)"))
    
    # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    print(f"\n{'='*80}")
    print("üìä –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í")
    print(f"{'='*80}")
    
    best = max(results, key=lambda x: x['accuracy'])
    
    for r in results:
        marker = "üèÜ" if r == best else "  "
        print(f"{marker} {r['name']:25s} | –¢–æ—á–Ω—ñ—Å—Ç—å: {r['accuracy']:5.1f}% | –ü—Ä–∏–±—É—Ç–æ–∫: ${r['total_profit']:+8.2f}")
    
    print(f"\n‚úÖ –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–Ø: {'–Ü–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏!' if best['name'].startswith('–Ü–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∞') else '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —è–∫ —î'}")
    print(f"{'='*80}")


if __name__ == '__main__':
    main()
