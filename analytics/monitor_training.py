#!/usr/bin/env python3
"""
–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
"""
import time
import re
import os
from datetime import datetime

def monitor_training(log_file='train_output.log', interval=10):
    """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"""
    
    print("="*80)
    print("üìä –ú–û–ù–Ü–¢–û–†–ò–ù–ì –¢–†–ï–ù–£–í–ê–ù–ù–Ø –ö–õ–ê–°–ò–§–Ü–ö–ê–¶–Ü–ô–ù–û–á –ú–û–î–ï–õ–Ü")
    print("="*80)
    print(f"üìÑ –õ–æ–≥ —Ñ–∞–π–ª: {log_file}")
    print(f"‚è±Ô∏è  –Ü–Ω—Ç–µ—Ä–≤–∞–ª –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {interval} —Å–µ–∫")
    print("="*80)
    
    last_size = 0
    epoch_data = {}
    
    try:
        while True:
            if not os.path.exists(log_file):
                print("‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è log —Ñ–∞–π–ª—É...")
                time.sleep(interval)
                continue
            
            # –ß–∏—Ç–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ä—è–¥–∫—ñ–≤
            with open(log_file, 'r') as f:
                f.seek(last_size)
                new_lines = f.readlines()
                last_size = f.tell()
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–∏—Ö —Ä—è–¥–∫—ñ–≤
            for line in new_lines:
                # Epoch –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
                match = re.search(r'Epoch (\d+)/(\d+).*‚îÅ+\s+\d+s.*val_accuracy:\s+([\d.]+).*val_loss:\s+([\d.]+)', line)
                if match:
                    epoch = int(match.group(1))
                    total_epochs = int(match.group(2))
                    val_acc = float(match.group(3))
                    val_loss = float(match.group(4))
                    
                    epoch_data[epoch] = {
                        'val_acc': val_acc,
                        'val_loss': val_loss,
                        'time': datetime.now()
                    }
                    
                    # –í–∏–≤–µ–¥–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
                    progress = epoch / total_epochs * 100
                    bar_length = 40
                    filled = int(bar_length * epoch / total_epochs)
                    bar = '‚ñà' * filled + '‚ñë' * (bar_length - filled)
                    
                    print(f"\n{'='*80}")
                    print(f"üìà Epoch {epoch}/{total_epochs} ({progress:.1f}%)")
                    print(f"[{bar}]")
                    print(f"   Val Accuracy: {val_acc:.4f} ({val_acc*100:.2f}%)")
                    print(f"   Val Loss: {val_loss:.4f}")
                    
                    # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º
                    if epoch > 1 and (epoch-1) in epoch_data:
                        prev = epoch_data[epoch-1]
                        acc_delta = val_acc - prev['val_acc']
                        loss_delta = val_loss - prev['val_loss']
                        
                        acc_arrow = "üìà" if acc_delta > 0 else "üìâ" if acc_delta < 0 else "‚û°Ô∏è"
                        loss_arrow = "üìâ" if loss_delta < 0 else "üìà" if loss_delta > 0 else "‚û°Ô∏è"
                        
                        print(f"   Œî Accuracy: {acc_arrow} {acc_delta:+.4f}")
                        print(f"   Œî Loss: {loss_arrow} {loss_delta:+.4f}")
                    
                    # –ù–∞–π–∫—Ä–∞—â–∞ –µ–ø–æ—Ö–∞
                    best_epoch = max(epoch_data.items(), key=lambda x: x[1]['val_acc'])
                    if best_epoch[0] == epoch:
                        print(f"   üèÜ NEW BEST!")
                    else:
                        print(f"   ü•á Best: Epoch {best_epoch[0]} (acc={best_epoch[1]['val_acc']:.4f})")
                
                # Checkpoint –∑–±–µ—Ä–µ–∂–µ–Ω–æ
                if "val_accuracy improved" in line:
                    print(f"   üíæ Checkpoint –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
                elif "val_accuracy did not improve" in line:
                    print(f"   ‚è≠Ô∏è  No improvement")
                
                # Early stopping
                if "Restoring model weights from the end of the best epoch" in line:
                    print(f"\n{'='*80}")
                    print("‚èπÔ∏è  EARLY STOPPING - –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ")
                    print(f"{'='*80}")
                
                # –ü–æ–º–∏–ª–∫–∏
                if "ERROR" in line or "Exception" in line:
                    print(f"\n‚ùå –ü–û–ú–ò–õ–ö–ê: {line.strip()}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—Ä–æ—Ü–µ—Å —â–µ –ø—Ä–∞—Ü—é—î
            try:
                with open(log_file, 'r') as f:
                    content = f.read()
                    if "‚úÖ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ" in content or "‚ùå –ü–æ–º–∏–ª–∫–∞" in content:
                        print(f"\n{'='*80}")
                        print("üèÅ –¢–†–ï–ù–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û")
                        print(f"{'='*80}")
                        
                        # –ü—ñ–¥—Å—É–º–æ–∫
                        if epoch_data:
                            best = max(epoch_data.items(), key=lambda x: x[1]['val_acc'])
                            print(f"\nüìä –ü–Ü–î–°–£–ú–û–ö:")
                            print(f"   –í—Å—å–æ–≥–æ epochs: {len(epoch_data)}")
                            print(f"   –ù–∞–π–∫—Ä–∞—â–∞: Epoch {best[0]}")
                            print(f"   Accuracy: {best[1]['val_acc']:.4f} ({best[1]['val_acc']*100:.2f}%)")
                            print(f"   Loss: {best[1]['val_loss']:.4f}")
                        
                        break
            except:
                pass
            
            time.sleep(interval)
    
    except KeyboardInterrupt:
        print(f"\n\n{'='*80}")
        print("‚èπÔ∏è  –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        print(f"{'='*80}")
        
        if epoch_data:
            best = max(epoch_data.items(), key=lambda x: x[1]['val_acc'])
            print(f"\nüìä –ü–û–¢–û–ß–ù–ò–ô –°–¢–ê–ù:")
            print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ epochs: {len(epoch_data)}")
            print(f"   –ù–∞–π–∫—Ä–∞—â–∞: Epoch {best[0]}")
            print(f"   Accuracy: {best[1]['val_acc']:.4f} ({best[1]['val_acc']*100:.2f}%)")


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--log', default='train_output.log', help='–õ–æ–≥ —Ñ–∞–π–ª')
    parser.add_argument('--interval', type=int, default=10, help='–Ü–Ω—Ç–µ—Ä–≤–∞–ª –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (—Å–µ–∫)')
    args = parser.parse_args()
    
    monitor_training(args.log, args.interval)
