#!/usr/bin/env python3
"""
–ê–Ω–∞–ª—ñ–∑ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–æ—ó –º–æ–¥–µ–ª—ñ —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ—Ä–≥–æ–≤–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤
"""
import sys
import os
import asyncio
import logging
import numpy as np
import pandas as pd
from datetime import datetime
import tensorflow as tf

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from training.rust_features import RustFeatureEngineer
from unified_binance_loader import UnifiedBinanceLoader
from dotenv import load_dotenv

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –í–∏–º–∫–Ω—É—Ç–∏ GPU –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
os.environ['CUDA_VISIBLE_DEVICES'] = ''
load_dotenv()


class ClassificationAnalyzer:
    """–ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–æ—ó –º–æ–¥–µ–ª—ñ"""
    
    CLASSES = ['DOWN', 'NEUTRAL', 'UP']
    
    def __init__(self, symbol: str = 'BTCUSDT', model_path: str = None):
        self.symbol = symbol
        self.model_path = model_path or 'models/classification_BTC/model_resumed_20251021_125248.keras'
        self.model = None
        self.feature_engineer = RustFeatureEngineer(use_rust=True)
        
        # Binance loader
        api_key = os.getenv('FUTURES_API_KEY')
        api_secret = os.getenv('FUTURES_API_SECRET')
        use_testnet = os.getenv('USE_TESTNET', 'false').lower() in ('true', '1', 'yes')
        
        self.data_loader = UnifiedBinanceLoader(
            api_key=api_key,
            api_secret=api_secret,
            testnet=use_testnet,
            use_public_data=True
        )
        
    async def load_model(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ"""
        logger.info(f"üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–æ—ó –º–æ–¥–µ–ª—ñ...")
        logger.info(f"   {self.model_path}")
        
        self.model = tf.keras.models.load_model(self.model_path)
        
        logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:")
        logger.info(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤: {self.model.count_params():,}")
        logger.info(f"   Input shape: {self.model.input_shape}")
        logger.info(f"   Output: {self.model.output_shape[-1]} –∫–ª–∞—Å—ñ–≤ (DOWN, NEUTRAL, UP)")
    
    async def load_data(self, days: int = 14):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö"""
        logger.info(f"üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞ {days} –¥–Ω—ñ–≤...")
        
        df = await self.data_loader.get_historical_data(
            symbol=self.symbol,
            interval='1h',
            days_back=days
        )
        
        if df is None or df.empty:
            raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ")
        
        logger.info(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å—ñ–≤")
        return df
    
    def calculate_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ features"""
        logger.info("üîß –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ features...")
        
        # –ë–∞–∑–æ–≤—ñ features
        df['returns'] = df['close'].pct_change()
        df['log_returns'] = np.log(df['close'] / df['close'].shift(1))
        
        # Rust —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
        df = self.feature_engineer.calculate_all(
            df,
            sma_periods=[10, 20, 50],
            ema_periods=[12, 20, 26, 50],
            rsi_periods=[7, 14, 28],
            atr_periods=[7, 14, 21]
        )
        
        # Volatility
        df['close_std_5'] = df['close'].rolling(5).std()
        df['close_std_10'] = df['close'].rolling(10).std()
        df['close_std_20'] = df['close'].rolling(20).std()
        
        # Volume features
        df['volume_mean_5'] = df['volume'].rolling(5).mean()
        df['volume_mean_10'] = df['volume'].rolling(10).mean()
        df['volume_ratio'] = df['volume'] / df['volume'].rolling(20).mean()
        
        # Price distance from SMA
        df['dist_from_sma_10'] = (df['close'] - df['sma_10']) / df['sma_10']
        df['dist_from_sma_20'] = (df['close'] - df['sma_20']) / df['sma_20']
        
        df = df.dropna()
        
        # –í–∏–±—Ä–∞—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ 41 features
        feature_cols = [
            'open', 'high', 'low', 'volume',
            'returns', 'log_returns',
            'sma_10', 'sma_20', 'sma_50',
            'ema_12', 'ema_20', 'ema_26', 'ema_50',
            'rsi_7', 'rsi_14', 'rsi_28',
            'roc_5', 'roc_10', 'roc_20',
            'price_momentum', 'acceleration',
            'atr_7', 'atr_14', 'atr_21',
            'close_std_5', 'close_std_10', 'close_std_20',
            'hvol_10', 'hvol_20', 'hvol_30',
            'bb_width_20', 'bb_percent_20',
            'obv', 'vwap',
            'volume_mean_5', 'volume_mean_10', 'volume_ratio',
            'dist_from_sma_10', 'dist_from_sma_20',
            'body', 'body_ratio'
        ]
        
        available = [f for f in feature_cols if f in df.columns]
        logger.info(f"‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è {len(available)}/41 features")
        
        return df[['close'] + available]
    
    def create_sequences(self, df: pd.DataFrame, sequence_length: int = 120):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç–µ–π"""
        feature_cols = [c for c in df.columns if c != 'close']
        X = df[feature_cols].values
        prices = df['close'].values
        
        # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è
        from sklearn.preprocessing import RobustScaler
        scaler = RobustScaler()
        X_scaled = scaler.fit_transform(X)
        
        # –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ
        sequences = []
        sequence_prices = []
        
        for i in range(len(X_scaled) - sequence_length + 1):
            sequences.append(X_scaled[i:i + sequence_length])
            sequence_prices.append(prices[i + sequence_length - 1])
        
        return np.array(sequences), np.array(sequence_prices)
    
    async def predict(self, X: np.ndarray):
        """–ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è"""
        logger.info(f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –¥–ª—è {len(X)} –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç–µ–π...")
        
        predictions = self.model.predict(X, verbose=0)
        
        # üîÑ –Ü–ù–í–ï–†–°–Ü–Ø –°–ò–ì–ù–ê–õ–Ü–í: –º–æ–¥–µ–ª—å –Ω–∞–≤—á–µ–Ω–∞ —ñ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ!
        # –ú—ñ–Ω—è—î–º–æ –º—ñ—Å—Ü—è–º–∏ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ UP (—ñ–Ω–¥–µ–∫—Å 2) —Ç–∞ DOWN (—ñ–Ω–¥–µ–∫—Å 0)
        predictions_inverted = predictions.copy()
        predictions_inverted[:, 0] = predictions[:, 2]  # DOWN <- UP
        predictions_inverted[:, 2] = predictions[:, 0]  # UP <- DOWN
        # NEUTRAL (—ñ–Ω–¥–µ–∫—Å 1) –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
        
        predicted_classes = np.argmax(predictions_inverted, axis=1)
        confidences = np.max(predictions_inverted, axis=1)
        
        logger.info(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑–∏ –æ—Ç—Ä–∏–º–∞–Ω—ñ (–∑ —ñ–Ω–≤–µ—Ä—Å—ñ—î—é UP‚ÜîDOWN)")
        
        return predicted_classes, confidences, predictions_inverted
    
    def generate_signals(self, predicted_classes, confidences, probabilities, prices):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑ –ø–æ–º—ñ—Ä–Ω–æ-–∞–≥—Ä–µ—Å–∏–≤–Ω–æ—é —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—î—é"""
        logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ—Ä–≥–æ–≤–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ (–ø–æ–º—ñ—Ä–Ω–æ-–∞–≥—Ä–µ—Å–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º)...")
        
        signals = []
        
        for i, (pred_class, conf, probs, price) in enumerate(
            zip(predicted_classes, confidences, probabilities, prices)
        ):
            prob_down = probs[0]
            prob_neutral = probs[1]
            prob_up = probs[2]
            
            # –ü–û–ú–Ü–†–ù–û-–ê–ì–†–ï–°–ò–í–ù–ê –Ü–ù–¢–ï–†–ü–†–ï–¢–ê–¶–Ü–Ø:
            # –ì–æ–ª–æ–≤–Ω–∏–π –ø—Ä–∏–Ω—Ü–∏–ø: NEUTRAL –¥–æ–ø—É—Å–∫–∞—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –¥—É–∂–µ –≤–∏—Å–æ–∫—ñ–π –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ (>55%)
            # –∞–±–æ –∫–æ–ª–∏ UP —ñ DOWN –º–∞–π–∂–µ —Ä—ñ–≤–Ω—ñ (—Ä—ñ–∑–Ω–∏—Ü—è <2%)
            
            up_down_diff = prob_up - prob_down
            max_prob = max(prob_down, prob_neutral, prob_up)
            
            # –ö—Ä–æ–∫ 1: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ UP/DOWN –º–∞—é—Ç—å –¥–æ—Å—Ç–∞—Ç–Ω—é –ø–µ—Ä–µ–≤–∞–≥—É
            if abs(up_down_diff) > 0.04:  # –†—ñ–∑–Ω–∏—Ü—è >4% - –≤–∂–µ –ø—Ä–∏–π–º–∞—î–º–æ —Ä—ñ—à–µ–Ω–Ω—è
                if up_down_diff > 0:
                    signal_name = 'UP'
                    effective_conf = prob_up
                else:
                    signal_name = 'DOWN'
                    effective_conf = prob_down
            
            # –ö—Ä–æ–∫ 2: –Ø–∫—â–æ —Ä—ñ–∑–Ω–∏—Ü—è –º–∞–ª–∞, –¥–∏–≤–∏–º–æ—Å—å –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
            elif prob_neutral > 0.55:  # –î—É–∂–µ –≤–∏—Å–æ–∫–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å –≤ NEUTRAL
                signal_name = 'NEUTRAL'
                effective_conf = prob_neutral
            
            elif prob_up > 0.35 or prob_down > 0.35:  # –•—Ç–æ—Å—å –º–∞—î >35% - –ø—Ä–∏–π–º–∞—î–º–æ —Ä—ñ—à–µ–Ω–Ω—è
                if prob_up > prob_down:
                    signal_name = 'UP'
                    effective_conf = prob_up
                else:
                    signal_name = 'DOWN'
                    effective_conf = prob_down
            
            # –ö—Ä–æ–∫ 3: –û—Å—Ç–∞–Ω–Ω—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç - —è–∫—â–æ –≤—Å–µ –¥—É–∂–µ –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ
            else:
                # –ù–∞–≤—ñ—Ç—å –ø—Ä–∏ –º–∞–ª—ñ–π —Ä—ñ–∑–Ω–∏—Ü—ñ - –≤–∏–±–∏—Ä–∞—î–º–æ —Å—Ç–æ—Ä–æ–Ω—É
                if abs(up_down_diff) > 0.01:  # –•–æ—á–∞ –± 1% —Ä—ñ–∑–Ω–∏—Ü—ñ
                    if up_down_diff > 0:
                        signal_name = 'UP'
                        effective_conf = prob_up
                    else:
                        signal_name = 'DOWN'
                        effective_conf = prob_down
                else:
                    # –ü–æ–≤–Ω–∞ –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω—ñ—Å—Ç—å - —Ç—ñ–ª—å–∫–∏ —Ç–æ–¥—ñ NEUTRAL
                    signal_name = 'NEUTRAL'
                    effective_conf = prob_neutral
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ —Ç–∞ —Ä—ñ–∑–Ω–∏—Ü—ñ
            if signal_name == 'UP':
                if prob_up > 0.50 or up_down_diff > 0.10:
                    recommendation = 'STRONG BUY'
                elif prob_up > 0.40 or up_down_diff > 0.06:
                    recommendation = 'BUY'
                else:
                    recommendation = 'WEAK BUY'
            elif signal_name == 'DOWN':
                if prob_down > 0.50 or up_down_diff < -0.10:
                    recommendation = 'STRONG SELL'
                elif prob_down > 0.40 or up_down_diff < -0.06:
                    recommendation = 'SELL'
                else:
                    recommendation = 'WEAK SELL'
            else:
                recommendation = 'HOLD'
            
            signals.append({
                'index': i,
                'price': price,
                'prediction': signal_name,
                'confidence': effective_conf,
                'up_down_diff': up_down_diff,
                'recommendation': recommendation,
                'prob_down': prob_down,
                'prob_neutral': prob_neutral,
                'prob_up': prob_up
            })
        
        return pd.DataFrame(signals)
    
    def print_analysis(self, signals_df: pd.DataFrame, recent_n: int = 25):
        """–ê–Ω–∞–ª—ñ–∑ —Ç–∞ –≤–∏–≤—ñ–¥"""
        logger.info("\n" + "="*90)
        logger.info("üìà –ö–õ–ê–°–ò–§–Ü–ö–ê–¶–Ü–ô–ù–ò–ô –ê–ù–ê–õ–Ü–ó –ú–û–î–ï–õ–Ü")
        logger.info("="*90)
        
        logger.info(f"\nüéØ –û—Å—Ç–∞–Ω–Ω—ñ {recent_n} –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤:")
        logger.info("-" * 90)
        
        recent = signals_df.tail(recent_n)
        
        for _, row in recent.iterrows():
            emoji = {'DOWN': 'üî¥', 'NEUTRAL': '‚ö™', 'UP': 'üü¢'}[row['prediction']]
            
            # –°—Ç—Ä—ñ–ª–∫–∞ —Ç—Ä–µ–Ω–¥—É
            diff = row['up_down_diff']
            if diff > 0.05:
                trend = '‚¨ÜÔ∏è‚¨ÜÔ∏è'
            elif diff > 0.02:
                trend = '‚¨ÜÔ∏è'
            elif diff < -0.05:
                trend = '‚¨áÔ∏è‚¨áÔ∏è'
            elif diff < -0.02:
                trend = '‚¨áÔ∏è'
            else:
                trend = '‚û°Ô∏è'
            
            logger.info(
                f"{emoji} {row['prediction']:7s} {trend} | "
                f"${row['price']:,.2f} | "
                f"–†—ñ–∑–Ω–∏—Ü—è: {diff*100:+5.1f}% | "
                f"{row['recommendation']:13s} | "
                f"P(‚Üì):{row['prob_down']*100:4.1f}% P(‚Üí):{row['prob_neutral']*100:4.1f}% P(‚Üë):{row['prob_up']*100:4.1f}%"
            )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info("\n" + "="*90)
        logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ì–ù–û–ó–Ü–í")
        logger.info("="*90)
        
        down_count = len(signals_df[signals_df['prediction'] == 'DOWN'])
        neutral_count = len(signals_df[signals_df['prediction'] == 'NEUTRAL'])
        up_count = len(signals_df[signals_df['prediction'] == 'UP'])
        total = len(signals_df)
        
        logger.info(f"üî¥ DOWN –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤:    {down_count:4d} ({down_count/total*100:.1f}%)")
        logger.info(f"‚ö™ NEUTRAL –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤: {neutral_count:4d} ({neutral_count/total*100:.1f}%)")
        logger.info(f"üü¢ UP –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤:      {up_count:4d} ({up_count/total*100:.1f}%)")
        
        avg_conf = signals_df['confidence'].mean()
        logger.info(f"\nüìà –°–µ—Ä–µ–¥–Ω—è –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {avg_conf*100:.1f}%")
        logger.info(f"üìä –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {signals_df['confidence'].min()*100:.1f}%")
        logger.info(f"üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {signals_df['confidence'].max()*100:.1f}%")
        
        # –ü–æ—Ç–æ—á–Ω–∏–π —Å–∏–≥–Ω–∞–ª
        logger.info("\n" + "="*90)
        logger.info("üéØ –ü–û–¢–û–ß–ù–ò–ô –¢–û–†–ì–û–í–ò–ô –°–ò–ì–ù–ê–õ")
        logger.info("="*90)
        
        current = signals_df.iloc[-1]
        emoji = {'DOWN': 'üî¥', 'NEUTRAL': '‚ö™', 'UP': 'üü¢'}[current['prediction']]
        
        # –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—É
        diff = current['up_down_diff']
        if diff > 0.10:
            trend_desc = "–°–∏–ª—å–Ω–∏–π –±–∏—á–∞—á–∏–π —Ç—Ä–µ–Ω–¥ üêÇ"
        elif diff > 0.05:
            trend_desc = "–ü–æ–º—ñ—Ä–Ω–∏–π –±–∏—á–∞—á–∏–π —Ç—Ä–µ–Ω–¥ ‚ÜóÔ∏è"
        elif diff > 0.02:
            trend_desc = "–°–ª–∞–±–∫–∏–π –±–∏—á–∞—á–∏–π —Ç—Ä–µ–Ω–¥ ‚Üó"
        elif diff < -0.10:
            trend_desc = "–°–∏–ª—å–Ω–∏–π –≤–µ–¥–º–µ–∂–∏–π —Ç—Ä–µ–Ω–¥ üêª"
        elif diff < -0.05:
            trend_desc = "–ü–æ–º—ñ—Ä–Ω–∏–π –≤–µ–¥–º–µ–∂–∏–π —Ç—Ä–µ–Ω–¥ ‚ÜòÔ∏è"
        elif diff < -0.02:
            trend_desc = "–°–ª–∞–±–∫–∏–π –≤–µ–¥–º–µ–∂–∏–π —Ç—Ä–µ–Ω–¥ ‚Üò"
        else:
            trend_desc = "–§–ª–µ—Ç, –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω—ñ—Å—Ç—å ‚û°Ô∏è"
        
        logger.info(f"\n{emoji} {current['prediction']}")
        logger.info(f"üí∞ –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${current['price']:,.2f}")
        logger.info(f"üìä –†—ñ–∑–Ω–∏—Ü—è UP-DOWN: {diff*100:+.1f}%")
        logger.info(f"üìà –¢—Ä–µ–Ω–¥: {trend_desc}")
        logger.info(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: {current['recommendation']}")
        logger.info(f"\nüìâ –ô–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ:")
        logger.info(f"   üî¥ –ü–∞–¥—ñ–Ω–Ω—è (DOWN):    {current['prob_down']*100:5.1f}%")
        logger.info(f"   ‚ö™ –§–ª–µ—Ç (NEUTRAL):    {current['prob_neutral']*100:5.1f}%")
        logger.info(f"   üü¢ –ó—Ä–æ—Å—Ç–∞–Ω–Ω—è (UP):    {current['prob_up']*100:5.1f}%")
        
        # –¢–æ—Ä–≥–æ–≤—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        logger.info(f"\nüíº –¢–û–†–ì–û–í–ê –°–¢–†–ê–¢–ï–ì–Ü–Ø:")
        if current['recommendation'] in ['STRONG BUY', 'BUY']:
            logger.info(f"   ‚úÖ –í—ñ–¥–∫—Ä–∏—Ç–∏ LONG –ø–æ–∑–∏—Ü—ñ—é")
            logger.info(f"   üéØ Target: +1-2%")
            logger.info(f"   üõë Stop-loss: -0.5%")
        elif current['recommendation'] in ['STRONG SELL', 'SELL']:
            logger.info(f"   ‚úÖ –í—ñ–¥–∫—Ä–∏—Ç–∏ SHORT –ø–æ–∑–∏—Ü—ñ—é")
            logger.info(f"   üéØ Target: -1-2%")
            logger.info(f"   üõë Stop-loss: +0.5%")
        elif current['recommendation'] in ['WEAK BUY']:
            logger.info(f"   ‚ö†Ô∏è –ú–æ–∂–Ω–∞ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∏ –º–∞–ª–∏–π LONG (–æ–±–µ—Ä–µ–∂–Ω–æ)")
            logger.info(f"   üéØ Target: +0.5-1%")
            logger.info(f"   üõë Stop-loss: -0.3%")
        elif current['recommendation'] in ['WEAK SELL']:
            logger.info(f"   ‚ö†Ô∏è –ú–æ–∂–Ω–∞ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∏ –º–∞–ª–∏–π SHORT (–æ–±–µ—Ä–µ–∂–Ω–æ)")
            logger.info(f"   üéØ Target: -0.5-1%")
            logger.info(f"   üõë Stop-loss: +0.3%")
        else:
            logger.info(f"   üí§ –ß–µ–∫–∞—Ç–∏ –∫—Ä–∞—â–æ–≥–æ –º–æ–º–µ–Ω—Ç—É")
            logger.info(f"   üëÄ –ú–æ–Ω—ñ—Ç–æ—Ä–∏—Ç–∏ —Å–∏—Ç—É–∞—Ü—ñ—é")
        
        logger.info("\n" + "="*90)


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ê–Ω–∞–ª—ñ–∑ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–æ—ó –º–æ–¥–µ–ª—ñ')
    parser.add_argument('--symbol', type=str, default='BTCUSDT', help='–°–∏–º–≤–æ–ª')
    parser.add_argument('--model', type=str, help='–®–ª—è—Ö –¥–æ –º–æ–¥–µ–ª—ñ')
    parser.add_argument('--days', type=int, default=14, help='–î–Ω—ñ–≤ –¥–∞–Ω–∏—Ö')
    parser.add_argument('--recent', type=int, default=25, help='–°–∫—ñ–ª—å–∫–∏ –ø–æ–∫–∞–∑–∞—Ç–∏')
    
    args = parser.parse_args()
    
    try:
        analyzer = ClassificationAnalyzer(symbol=args.symbol, model_path=args.model)
        
        await analyzer.load_model()
        df = await analyzer.load_data(days=args.days)
        df_features = analyzer.calculate_features(df)
        X, prices = analyzer.create_sequences(df_features)
        
        predicted_classes, confidences, probabilities = await analyzer.predict(X)
        signals_df = analyzer.generate_signals(predicted_classes, confidences, probabilities, prices)
        
        analyzer.print_analysis(signals_df, recent_n=args.recent)
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ graphics/csv/
        os.makedirs('graphics/csv', exist_ok=True)
        output = f'graphics/csv/classification_analysis_{args.symbol}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv'
        signals_df.to_csv(output, index=False)
        logger.info(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {output}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", exc_info=True)
        return 1
    
    return 0


if __name__ == '__main__':
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
