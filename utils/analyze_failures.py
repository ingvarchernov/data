#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç –ê–ù–ê–õ–Ü–ó –ù–ï–í–î–ê–ß - –ì–ª–∏–±–æ–∫–∏–π –∞–Ω–∞–ª—ñ–∑ —á–æ–º—É –≤—Å—ñ —É–≥–æ–¥–∏ –∑–±–∏—Ç–∫–æ–≤—ñ
"""
import psycopg2
from datetime import datetime
import os
from dotenv import load_dotenv
import pandas as pd

load_dotenv()

conn = psycopg2.connect(
    host=os.getenv('DB_HOST', 'localhost'),
    port=os.getenv('DB_PORT', '5432'),
    database=os.getenv('DB_NAME', 'trading'),
    user=os.getenv('DB_USER', 'trader'),
    password=os.getenv('DB_PASSWORD', '')
)

today = datetime.now().date()

# –ê–Ω–∞–ª—ñ–∑: —è–∫—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏ –±—É–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ
query = '''
SELECT 
    symbol,
    side,
    ml_prediction,
    ml_confidence,
    entry_price,
    exit_price,
    realized_pnl,
    realized_pnl_pct,
    exit_reason,
    entry_time,
    exit_time
FROM positions 
WHERE status = 'closed' 
  AND DATE(exit_time AT TIME ZONE 'UTC') = %s
ORDER BY symbol, exit_time
'''

cur = conn.cursor()
cur.execute(query, (today,))
rows = cur.fetchall()

print('='*120)
print('üîç –ê–ù–ê–õ–Ü–ó –¢–û–ß–ù–û–°–¢–Ü –ü–†–û–ì–ù–û–ó–Ü–í')
print('='*120)

by_symbol = {}
for row in rows:
    symbol, side, prediction, confidence, entry, exit_price, pnl, pnl_pct, reason, entry_time, exit_time = row
    
    if symbol not in by_symbol:
        by_symbol[symbol] = []
    
    # –ß–∏ –±—É–≤ –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º?
    entry_f = float(entry)
    exit_f = float(exit_price)
    
    if side == 'LONG':
        actual_direction = 'UP' if exit_f > entry_f else 'DOWN'
    else:  # SHORT
        actual_direction = 'DOWN' if exit_f > entry_f else 'UP'
    
    correct = (prediction == actual_direction)
    
    # –ß–∞—Å —É—Ç—Ä–∏–º—É–≤–∞–Ω–Ω—è
    duration = (exit_time - entry_time).total_seconds() / 60  # —Ö–≤–∏–ª–∏–Ω–∏
    
    by_symbol[symbol].append({
        'side': side,
        'prediction': prediction,
        'confidence': float(confidence) if confidence else 0,
        'actual': actual_direction,
        'correct': correct,
        'pnl': float(pnl) if pnl else 0,
        'pnl_pct': float(pnl_pct) if pnl_pct else 0,
        'duration': duration
    })

print(f"\n{'Symbol':<12} {'Trades':>7} {'Correct':>8} {'Accuracy':>9} {'Avg Conf':>9} {'Avg PnL':>10} {'Avg Time':>10}")
print('-'*120)

total_trades = 0
total_correct = 0
total_pnl = 0

for symbol in sorted(by_symbol.keys()):
    trades = by_symbol[symbol]
    correct = sum(1 for t in trades if t['correct'])
    accuracy = correct / len(trades) * 100 if trades else 0
    avg_conf = sum(t['confidence'] for t in trades) / len(trades) if trades else 0
    avg_pnl = sum(t['pnl'] for t in trades) / len(trades) if trades else 0
    avg_time = sum(t['duration'] for t in trades) / len(trades) if trades else 0
    
    total_trades += len(trades)
    total_correct += correct
    total_pnl += sum(t['pnl'] for t in trades)
    
    status = '‚úÖ' if accuracy >= 50 else '‚ùå'
    print(f"{status} {symbol:<12} {len(trades):>7d} {correct:>8d} {accuracy:>8.1f}% {avg_conf:>8.1f}% ${avg_pnl:>9.2f} {avg_time:>8.1f}m")

print('-'*120)
overall_accuracy = total_correct / total_trades * 100 if total_trades > 0 else 0
print(f'–í–°–¨–û–ì–û: {total_trades} —É–≥–æ–¥ | ML Accuracy: {overall_accuracy:.1f}% | Total PnL: ${total_pnl:.2f}')

print('\n'+'='*120)
print('üìä –î–ï–¢–ê–õ–Ü –ü–û –°–ò–ú–í–û–õ–ê–ú')
print('='*120)
for symbol in sorted(by_symbol.keys()):
    print(f'\nüî∏ {symbol}:')
    for i, t in enumerate(by_symbol[symbol], 1):
        status = '‚úÖ' if t['correct'] else '‚ùå'
        print(f"  {status} #{i}: Predicted {t['prediction']} ({t['confidence']:.1f}%), Actual: {t['actual']}, "
              f"{t['side']}, PnL: ${t['pnl']:.2f} ({t['pnl_pct']:.1f}%), Duration: {t['duration']:.1f}m")

# –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑: —á–æ–º—É SHORT ETHUSDT –Ω–µ –ø—Ä–∞—Ü—é—î?
print('\n'+'='*120)
print('üéØ –°–ü–ï–¶–Ü–ê–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–ó: ETHUSDT SHORT')
print('='*120)

if 'ETHUSDT' in by_symbol:
    ethusdt_trades = [t for t in by_symbol['ETHUSDT'] if t['side'] == 'SHORT']
    if ethusdt_trades:
        print(f"–í—Å—å–æ–≥–æ SHORT —É–≥–æ–¥: {len(ethusdt_trades)}")
        print(f"–ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤: {sum(1 for t in ethusdt_trades if t['correct'])}")
        print(f"–°–µ—Ä–µ–¥–Ω—è –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {sum(t['confidence'] for t in ethusdt_trades)/len(ethusdt_trades):.1f}%")
        print(f"–°–µ—Ä–µ–¥–Ω—ñ–π PnL: ${sum(t['pnl'] for t in ethusdt_trades)/len(ethusdt_trades):.2f}")
        print("\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–¥–±–∞—á–∞—î DOWN –∑ –≤–∏—Å–æ–∫–æ—é –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—é, –∞–ª–µ —Ü—ñ–Ω–∞ –π–¥–µ UP")
        print("   –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:")
        print("   1. –ú–æ–¥–µ–ª—å –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω–∞ –Ω–∞ —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö (trend reversal)")
        print("   2. –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å –≤–∏—â–∞ –Ω—ñ–∂ –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—è")
        print("   3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤")

# –ê–Ω–∞–ª—ñ–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
print('\n'+'='*120)
print('üìà –ê–ù–ê–õ–Ü–ó –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–Ü')
print('='*120)

query_volatility = '''
SELECT 
    symbol,
    entry_price,
    exit_price,
    ABS((exit_price - entry_price) / entry_price * 100) as price_move_pct
FROM positions 
WHERE status = 'closed' 
  AND DATE(exit_time AT TIME ZONE 'UTC') = %s
'''

cur.execute(query_volatility, (today,))
vol_rows = cur.fetchall()

vol_by_symbol = {}
for symbol, entry, exit_price, move_pct in vol_rows:
    if symbol not in vol_by_symbol:
        vol_by_symbol[symbol] = []
    vol_by_symbol[symbol].append(float(move_pct))

print(f"\n{'Symbol':<12} {'Avg Move':>10} {'Max Move':>10} {'Min Move':>10}")
print('-'*120)

for symbol in sorted(vol_by_symbol.keys()):
    moves = vol_by_symbol[symbol]
    avg_move = sum(moves) / len(moves)
    max_move = max(moves)
    min_move = min(moves)
    
    status = '‚ö†Ô∏è' if avg_move > 5 else '‚úÖ'
    print(f"{status} {symbol:<12} {avg_move:>9.2f}% {max_move:>9.2f}% {min_move:>9.2f}%")

print('\n'+'='*120)
print('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á')
print('='*120)
print("""
1. ‚ùå ML –ú–û–î–ï–õ–Ü –ù–ï –ü–†–ê–¶–Æ–Æ–¢–¨ (0% accuracy –æ–∑–Ω–∞—á–∞—î —â–æ –ø—Ä–æ–≥–Ω–æ–∑–∏ —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ)
   ‚Üí –ü–æ—Ç—Ä—ñ–±–Ω–æ –ü–û–í–ù–Ü–°–¢–Æ –ø–µ—Ä–µ—Ç—Ä–µ–Ω—É–≤–∞—Ç–∏ –Ω–∞ –°–í–Ü–ñ–ò–• –¥–∞–Ω–∏—Ö (–æ—Å—Ç–∞–Ω–Ω—ñ 30-60 –¥–Ω—ñ–≤)
   
2. ‚ö†Ô∏è ETHUSDT SHORT - –Ω–∞–π–±—ñ–ª—å—à–∞ –ø—Ä–æ–±–ª–µ–º–∞
   ‚Üí –ú–æ–¥–µ–ª—å –∫–∞–∂–µ DOWN (75-88% confidence), –∞–ª–µ —Ü—ñ–Ω–∞ –π–¥–µ UP
   ‚Üí –ú–æ–∂–ª–∏–≤–æ, —Ä–∏–Ω–æ–∫ –≤ —Ç—Ä–µ–Ω–¥—ñ –≤–≥–æ—Ä—É, –∞ –º–æ–¥–µ–ª—å –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω–∞ –Ω–∞ —Ñ–ª–µ—Ç—ñ
   
3. üîÑ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–Ü –°–¢–†–ê–¢–ï–ì–Ü–á:
   a) Mean Reversion - —Ç–æ—Ä–≥—ñ–≤–ª—è –Ω–∞ –≤—ñ–¥—Å–∫–æ–∫–∞—Ö –≤—ñ–¥ —Å–µ—Ä–µ–¥–Ω—ñ—Ö
   b) Momentum - —Ç–æ—Ä–≥—ñ–≤–ª—è –≤ –Ω–∞–ø—Ä—è–º–∫—É —Ç—Ä–µ–Ω–¥—É (–Ω–µ –ø—Ä–æ—Ç–∏)
   c) Volatility Breakout - —Ç–æ—Ä–≥—ñ–≤–ª—è –Ω–∞ –ø—Ä–æ–±–æ—è—Ö –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
   d) Support/Resistance - —Ç–æ—Ä–≥—ñ–≤–ª—è –≤—ñ–¥ —Ä—ñ–≤–Ω—ñ–≤
   
4. üìä –¢–ï–°–¢–£–í–ê–ù–ù–Ø:
   ‚Üí –°—Ç–≤–æ—Ä–∏—Ç–∏ backtesting —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π
   ‚Üí –ü—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –Ω–∞ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤
   ‚Üí –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä—ñ–∑–Ω–∏—Ö –ø—ñ–¥—Ö–æ–¥—ñ–≤
   
5. üõ°Ô∏è –ó–ê–•–ò–°–¢:
   ‚Üí SL 1.5% –∑–∞–Ω–∞–¥—Ç–æ —à–∏—Ä–æ–∫–∏–π –¥–ª—è force close –ø—Ä–∏ -7%
   ‚Üí –†–æ–∑–≥–ª—è–Ω—É—Ç–∏ adaptive SL/TP –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
   ‚Üí –î–æ–¥–∞—Ç–∏ trailing stop –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∏–±—É—Ç–∫—É
""")

cur.close()
conn.close()

print('='*120)
print('‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
print('='*120)
