#!/usr/bin/env python3
"""
–ó–∞–∫—Ä–∏—Ç—Ç—è –≤—Å—ñ—Ö –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
"""
from binance.client import Client
from config import BINANCE_CONFIG
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def close_all_positions():
    """–ó–∞–∫—Ä–∏—Ç–∏ –≤—Å—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó"""
    client = Client(
        BINANCE_CONFIG['api_key'],
        BINANCE_CONFIG['api_secret'],
        testnet=BINANCE_CONFIG['testnet']
    )
    
    try:
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø–æ–∑–∏—Ü—ñ—ó
        positions = client.futures_position_information()
        
        closed_count = 0
        total_pnl = 0.0
        
        logger.info("="*80)
        logger.info("üîç –ü–æ—à—É–∫ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π...")
        logger.info("="*80)
        
        for pos in positions:
            position_amt = float(pos['positionAmt'])
            if position_amt == 0:
                continue
            
            symbol = pos['symbol']
            entry_price = float(pos['entryPrice'])
            unrealized_pnl = float(pos['unRealizedProfit'])
            side = 'LONG' if position_amt > 0 else 'SHORT'
            
            logger.info(f"\nüìä {symbol}: {side} {abs(position_amt)} @ ${entry_price:.2f}")
            logger.info(f"   üí∞ P&L: ${unrealized_pnl:.2f}")
            
            # –°–∫–∞—Å—É–≤–∞—Ç–∏ –≤—Å—ñ –æ—Ä–¥–µ—Ä–∏
            try:
                client.futures_cancel_all_open_orders(symbol=symbol)
                logger.info(f"   ‚úÖ –°–∫–∞—Å–æ–≤–∞–Ω–æ –≤—Å—ñ –æ—Ä–¥–µ—Ä–∏ –¥–ª—è {symbol}")
            except Exception as e:
                logger.warning(f"   ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä—ñ–≤: {e}")
            
            # –ó–∞–∫—Ä–∏—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é (—Ä–∏–Ω–∫–æ–≤–∏–π –æ—Ä–¥–µ—Ä —É –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏–π –±—ñ–∫)
            try:
                side_to_close = 'SELL' if position_amt > 0 else 'BUY'
                
                order = client.futures_create_order(
                    symbol=symbol,
                    side=side_to_close,
                    type='MARKET',
                    quantity=abs(position_amt),
                    reduceOnly=True
                )
                
                logger.info(f"   ‚úÖ –ó–∞–∫—Ä–∏—Ç–æ {symbol}: {side} ${unrealized_pnl:+.2f}")
                closed_count += 1
                total_pnl += unrealized_pnl
                
            except Exception as e:
                logger.error(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è {symbol}: {e}")
        
        logger.info("\n" + "="*80)
        logger.info(f"‚úÖ –ó–ê–ö–†–ò–¢–û: {closed_count} –ø–æ–∑–∏—Ü—ñ–π")
        logger.info(f"üí∞ –ó–ê–ì–ê–õ–¨–ù–ò–ô P&L: ${total_pnl:+.2f}")
        logger.info("="*80)
        
        if closed_count == 0:
            logger.info("‚ÑπÔ∏è –ù–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π")
        else:
            import time
            logger.info("\n‚è≥ –ü–æ—á–µ–∫–∞–π—Ç–µ 5 —Å–µ–∫—É–Ω–¥, —â–æ–± –±–æ—Ç –ø–æ–±–∞—á–∏–≤ –∑–º—ñ–Ω–∏...")
            time.sleep(5)
            logger.info("‚úÖ –ì–æ—Ç–æ–≤–æ! –ë–æ—Ç –º–æ–∂–µ –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ –Ω–æ–≤—ñ –ø–æ–∑–∏—Ü—ñ—ó –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ SL/TP")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    close_all_positions()
