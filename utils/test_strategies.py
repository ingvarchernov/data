#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –°–¢–†–ê–¢–ï–ì–Ü–ô
–®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≥–µ–Ω–µ—Ä—É—é—Ç—å—Å—è —Å–∏–≥–Ω–∞–ª–∏
"""
import sys
import pandas as pd
from datetime import datetime, timedelta
from binance.client import Client
import os
from dotenv import load_dotenv

# –î–æ–¥–∞—Ç–∏ —à–ª—è—Ö –¥–æ strategies
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from strategies.trend_following import TrendFollowingStrategy
from strategies.mean_reversion import MeanReversionStrategy

load_dotenv()

client = Client(
    os.getenv('BINANCE_API_KEY'),
    os.getenv('BINANCE_API_SECRET'),
    testnet=True
)


def get_historical_data(symbol, days=30, interval='4h'):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ"""
    end_time = datetime.now()
    start_time = end_time - timedelta(days=days)
    
    klines = client.futures_klines(
        symbol=symbol,
        interval=interval,
        startTime=int(start_time.timestamp() * 1000),
        endTime=int(end_time.timestamp() * 1000),
        limit=1000
    )
    
    df = pd.DataFrame(klines, columns=[
        'timestamp', 'open', 'high', 'low', 'close', 'volume',
        'close_time', 'quote_volume', 'trades', 'taker_buy_base',
        'taker_buy_quote', 'ignore'
    ])
    
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    for col in ['open', 'high', 'low', 'close', 'volume']:
        df[col] = df[col].astype(float)
    
    return df


def test_strategy(strategy, symbol, df):
    """–¢–µ—Å—Ç—É–≤–∞—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é"""
    print(f"\n{'='*80}")
    print(f"üìä {strategy.name} - {symbol}")
    print('='*80)
    
    signal = strategy.generate_signal(df, symbol)
    
    if signal:
        print(f"‚úÖ –°–ò–ì–ù–ê–õ –ó–ì–ï–ù–ï–†–û–í–ê–ù–û!")
        print(f"   Direction: {signal.direction}")
        print(f"   Confidence: {signal.confidence:.1f}%")
        print(f"   Entry: ${signal.entry_price:.4f}")
        print(f"   Stop Loss: ${signal.stop_loss:.4f} ({(signal.stop_loss/signal.entry_price-1)*100:.2f}%)")
        print(f"   Take Profit: ${signal.take_profit:.4f} ({(signal.take_profit/signal.entry_price-1)*100:.2f}%)")
        print(f"   Reason: {signal.reason}")
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        if strategy.validate_signal(signal):
            print(f"   ‚úÖ –°–∏–≥–Ω–∞–ª –≤–∞–ª—ñ–¥–Ω–∏–π")
        else:
            print(f"   ‚ùå –°–∏–≥–Ω–∞–ª –ù–ï –≤–∞–ª—ñ–¥–Ω–∏–π")
        
        # Position size
        account_balance = 5000
        pos_size = strategy.calculate_position_size(signal, account_balance)
        print(f"   Position Size: ${pos_size:.2f} (Balance: ${account_balance})")
        
    else:
        print(f"‚ùå –ù–µ–º–∞—î —Å–∏–≥–Ω–∞–ª—É")


def main():
    print('='*80)
    print('üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –¢–û–†–ì–û–í–ò–• –°–¢–†–ê–¢–ï–ì–Ü–ô')
    print('='*80)
    
    # –¢–µ—Å—Ç–æ–≤—ñ —Å–∏–º–≤–æ–ª–∏ (–ø—Ä–æ–±–ª–µ–º–Ω—ñ –ø–∞—Ä–∏)
    symbols = ['ETHUSDT', 'ATOMUSDT', 'AVAXUSDT', 'VETUSDT']
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π
    trend_strategy = TrendFollowingStrategy()
    mean_reversion_strategy = MeanReversionStrategy()
    
    for symbol in symbols:
        print(f"\n\n{'üî∏ ' + symbol:=^80}")
        
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ
            df = get_historical_data(symbol, days=60, interval='4h')
            print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(df)} —Å–≤—ñ—á–æ–∫")
            
            # –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –æ–±–∏–¥–≤—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
            test_strategy(trend_strategy, symbol, df)
            test_strategy(mean_reversion_strategy, symbol, df)
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            import traceback
            traceback.print_exc()
    
    print('\n' + '='*80)
    print('‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
    print('='*80)
    print('\nüí° –í–ò–°–ù–û–í–ö–ò:')
    print('1. –Ø–∫—â–æ Trend Following –≥–µ–Ω–µ—Ä—É—î SHORT —Å–∏–≥–Ω–∞–ª–∏ - –¥–æ–±—Ä–µ (—Ä–∏–Ω–æ–∫ –≤ downtrend)')
    print('2. –Ø–∫—â–æ Mean Reversion –≥–µ–Ω–µ—Ä—É—î —Å–∏–≥–Ω–∞–ª–∏ - –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä-—Ç—Ä–µ–Ω–¥—É')
    print('3. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ –≤–∞–ª—ñ–¥–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏ —Ç–∞ —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ SL/TP')
    print('4. –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫: backtesting –Ω–∞ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö\n')


if __name__ == '__main__':
    main()
