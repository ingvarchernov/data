#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤ —Ç–∞ –ø–æ–∑–∏—Ü—ñ–π –Ω–∞ Binance Futures Testnet
"""
import asyncio
import logging
import os
from binance.client import Client
from datetime import datetime
from tabulate import tabulate
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class OrderChecker:
    def __init__(self, testnet: bool = True):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ Binance"""
        if testnet:
            # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–ª—é—á—ñ –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
            api_key = (
                os.getenv('FUTURES_API_KEY') or
                os.getenv('BINANCE_TEST_API_KEY') or
                input("–í–≤–µ–¥—ñ—Ç—å Binance Testnet API Key: ").strip()
            )
            api_secret = (
                os.getenv('FUTURES_API_SECRET') or
                os.getenv('BINANCE_TEST_API_SECRET') or
                input("–í–≤–µ–¥—ñ—Ç—å Binance Testnet API Secret: ").strip()
            )

            if not api_key or not api_secret:
                raise ValueError("‚ùå API –∫–ª—é—á—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ. –°—Ç–≤–æ—Ä—ñ—Ç—å .env —Ñ–∞–π–ª –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —ó—Ö –≤—Ä—É—á–Ω—É.")

            logger.info("üîß –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance Futures TESTNET")
        else:
            raise NotImplementedError("Real trading –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")

        self.client = Client(api_key, api_secret, testnet=testnet)
        self.testnet = testnet

    async def check_account_balance(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É —Ä–∞—Ö—É–Ω–∫—É"""
        try:
            account = await asyncio.get_event_loop().run_in_executor(
                None, lambda: self.client.futures_account()
            )

            balance = float(account['totalWalletBalance'])
            available = float(account['availableBalance'])
            unrealized_pnl = float(account['totalUnrealizedProfit'])

            print("\n" + "="*50)
            print("üí∞ –ë–ê–õ–ê–ù–° –†–ê–•–£–ù–ö–£")
            print("="*50)
            print(f"üíº –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å:     ${balance:,.2f}")
            print(f"üíµ –î–æ—Å—Ç—É–ø–Ω–∏–π –±–∞–ª–∞–Ω—Å:     ${available:,.2f}")
            print(f"üìä –ù–µ—Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π PnL:   ${unrealized_pnl:,.2f}")

            return account

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É: {e}")
            return None

    async def check_open_orders(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤"""
        try:
            orders = await asyncio.get_event_loop().run_in_executor(
                None, lambda: self.client.futures_get_open_orders()
            )

            print("\n" + "="*80)
            print("üìã –í–Ü–î–ö–†–ò–¢–Ü –û–†–î–ï–†–ò")
            print("="*80)

            if not orders:
                print("‚úÖ –ù–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤")
                return []

            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ
            table_data = []
            for order in orders:
                table_data.append([
                    order['symbol'],
                    order['side'],
                    order['type'],
                    f"{float(order['origQty']):.4f}",
                    f"${float(order['price']):,.2f}" if order['price'] != '0' else "MARKET",
                    order['status'],
                    datetime.fromtimestamp(order['time']/1000).strftime('%H:%M:%S')
                ])

            headers = ['Symbol', 'Side', 'Type', 'Quantity', 'Price', 'Status', 'Time']
            print(tabulate(table_data, headers=headers, tablefmt='grid'))

            return orders

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä—ñ–≤: {e}")
            return []

    async def check_open_positions(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π"""
        try:
            positions = await asyncio.get_event_loop().run_in_executor(
                None, lambda: self.client.futures_position_information()
            )

            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó
            open_positions = [
                pos for pos in positions
                if abs(float(pos['positionAmt'])) > 0.0001
            ]

            print("\n" + "="*100)
            print("üìà –í–Ü–î–ö–†–ò–¢–Ü –ü–û–ó–ò–¶–Ü–á")
            print("="*100)

            if not open_positions:
                print("‚úÖ –ù–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π")
                return []

            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ
            table_data = []
            for pos in open_positions:
                amt = float(pos['positionAmt'])
                entry_price = float(pos['entryPrice'])
                mark_price = float(pos['markPrice'])
                unrealized_pnl = float(pos['unRealizedProfit'])
                
                # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ leverage –∑ notional —Ç–∞ margin
                notional = abs(float(pos['notional']))  # –í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ—ó
                initial_margin = float(pos['positionInitialMargin'])  # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π margin
                leverage = round(notional / initial_margin) if initial_margin > 0 else 1
                
                # –ü–†–ê–í–ò–õ–¨–ù–ò–ô —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ PnL% –∑ –≤—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º leverage:
                # PnL% = (unrealized_pnl / initial_margin) * 100
                pnl_percent = (unrealized_pnl / initial_margin) * 100 if initial_margin > 0 else 0

                table_data.append([
                    pos['symbol'],
                    'LONG' if amt > 0 else 'SHORT',
                    f"{abs(amt):.4f}",
                    f"${entry_price:,.4f}",
                    f"${mark_price:,.4f}",
                    f"${unrealized_pnl:,.2f}",
                    f"{pnl_percent:+.2f}%",
                    f"{leverage}x"
                ])

            headers = ['Symbol', 'Side', 'Size', 'Entry', 'Mark', 'PnL ($)', 'PnL (%)', 'Leverage']
            print(tabulate(table_data, headers=headers, tablefmt='grid'))

            return open_positions

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π: {e}")
            return []

    async def check_recent_trades(self, limit: int = 10):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —É–≥–æ–¥"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
            positions = await asyncio.get_event_loop().run_in_executor(
                None, lambda: self.client.futures_position_information()
            )

            active_symbols = [
                pos['symbol'] for pos in positions
                if abs(float(pos['positionAmt'])) > 0.0001
            ]

            if not active_symbols:
                print("\n‚úÖ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —É–≥–æ–¥")
                return

            print("\n" + "="*100)
            print("üìä –û–°–¢–ê–ù–ù–Ü –£–ì–û–î–ò")
            print("="*100)

            all_trades = []

            for symbol in active_symbols[:5]:  # –û–±–º–µ–∂—É—î–º–æ –¥–æ 5 —Å–∏–º–≤–æ–ª—ñ–≤
                try:
                    trades = await asyncio.get_event_loop().run_in_executor(
                        None, lambda s=symbol: self.client.futures_account_trades(symbol=s, limit=5)
                    )

                    for trade in trades[-3:]:  # –û—Å—Ç–∞–Ω–Ω—ñ 3 —É–≥–æ–¥–∏
                        all_trades.append([
                            trade['symbol'],
                            'BUY' if trade['buyer'] else 'SELL',
                            f"{float(trade['qty']):.4f}",
                            f"${float(trade['price']):,.4f}",
                            f"${float(trade['realizedPnl']):,.2f}",
                            datetime.fromtimestamp(trade['time']/1000).strftime('%m/%d %H:%M')
                        ])

                except Exception as trade_err:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —É–≥–æ–¥ –¥–ª—è {symbol}: {trade_err}")

            if all_trades:
                # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —á–∞—Å–æ–º
                all_trades.sort(key=lambda x: x[5], reverse=True)
                headers = ['Symbol', 'Side', 'Qty', 'Price', 'PnL', 'Time']
                print(tabulate(all_trades[:limit], headers=headers, tablefmt='grid'))
            else:
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ —É–≥–æ–¥–∏")

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É–≥–æ–¥: {e}")

    async def run_full_check(self):
        """–ü–æ–≤–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–∞—Ö—É–Ω–∫—É"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Binance Futures —Ä–∞—Ö—É–Ω–∫—É...")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É
        await self.check_account_balance()

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Ä–¥–µ—Ä—ñ–≤
        await self.check_open_orders()

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–∑–∏—Ü—ñ–π
        await self.check_open_positions()

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–≥–æ–¥
        await self.check_recent_trades()

        print("\n‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    checker = OrderChecker(testnet=True)
    await checker.run_full_check()

if __name__ == "__main__":
    asyncio.run(main())