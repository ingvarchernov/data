import os
from dotenv import load_dotenv
from sqlalchemy import create_engine, text

load_dotenv()
db_url = os.getenv('DATABASE_URL')
if not db_url:
    print('‚ùå DATABASE_URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')
    exit(1)

engine = create_engine(db_url)

try:
    with engine.connect() as conn:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —è–∫—ñ —Ç–∞–±–ª–∏—Ü—ñ —ñ—Å–Ω—É—é—Ç—å
        result = conn.execute(text("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
        """))
        existing_tables = [row[0] for row in result.fetchall()]
        
        # –†–∞—Ö—É—î–º–æ –∑–∞–ø–∏—Å–∏ –≤ —ñ—Å–Ω—É—é—á–∏—Ö —Ç–∞–±–ª–∏—Ü—è—Ö
        tables_to_check = ['positions', 'trades', 'historical_data', 'model_performance']
        for table in tables_to_check:
            if table in existing_tables:
                result = conn.execute(text(f'SELECT COUNT(*) FROM {table}'))
                count = result.scalar()
                print(f'üìä {table}: {count} –∑–∞–ø–∏—Å—ñ–≤')
            else:
                print(f'‚ö†Ô∏è {table}: —Ç–∞–±–ª–∏—Ü—è –Ω–µ —ñ—Å–Ω—É—î')
        
        # –û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó
        if 'positions' in existing_tables:
            result = conn.execute(text('''
                SELECT symbol, side, entry_price, status, entry_time 
                FROM positions 
                ORDER BY entry_time DESC 
                LIMIT 10
            '''))
            positions = result.fetchall()
            if positions:
                print('\nüìà –û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó:')
                for pos in positions:
                    print(f'  {pos.symbol} {pos.side} @ ${pos.entry_price} - {pos.status}')
                
except Exception as e:
    print(f'‚ùå –ü–æ–º–∏–ª–∫–∞: {e}')
