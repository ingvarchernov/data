#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìä –ê–ù–ê–õ–Ü–ó –†–ò–ù–ö–û–í–ò–• –£–ú–û–í
–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥—ñ–≤, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ —Ç–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–∏—Ö —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤
"""
import sys
import argparse
from datetime import datetime, timedelta
import pandas as pd
import numpy as np
from binance.client import Client
import os
from dotenv import load_dotenv

load_dotenv()

client = Client(
    os.getenv('BINANCE_API_KEY'),
    os.getenv('BINANCE_API_SECRET'),
    testnet=True
)


def get_historical_data(symbol, days=30, interval='4h'):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ"""
    end_time = datetime.now()
    start_time = end_time - timedelta(days=days)
    
    klines = client.futures_klines(
        symbol=symbol,
        interval=interval,
        startTime=int(start_time.timestamp() * 1000),
        endTime=int(end_time.timestamp() * 1000),
        limit=1000
    )
    
    df = pd.DataFrame(klines, columns=[
        'timestamp', 'open', 'high', 'low', 'close', 'volume',
        'close_time', 'quote_volume', 'trades', 'taker_buy_base',
        'taker_buy_quote', 'ignore'
    ])
    
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    for col in ['open', 'high', 'low', 'close', 'volume']:
        df[col] = df[col].astype(float)
    
    return df


def calculate_indicators(df):
    """–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏"""
    # SMA
    df['sma_20'] = df['close'].rolling(20).mean()
    df['sma_50'] = df['close'].rolling(50).mean()
    df['sma_200'] = df['close'].rolling(200).mean() if len(df) >= 200 else np.nan
    
    # EMA
    df['ema_12'] = df['close'].ewm(span=12).mean()
    df['ema_26'] = df['close'].ewm(span=26).mean()
    
    # Bollinger Bands
    df['bb_middle'] = df['close'].rolling(20).mean()
    bb_std = df['close'].rolling(20).std()
    df['bb_upper'] = df['bb_middle'] + (bb_std * 2)
    df['bb_lower'] = df['bb_middle'] - (bb_std * 2)
    
    # RSI
    delta = df['close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(14).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(14).mean()
    rs = gain / loss
    df['rsi'] = 100 - (100 / (1 + rs))
    
    # MACD
    df['macd'] = df['ema_12'] - df['ema_26']
    df['macd_signal'] = df['macd'].ewm(span=9).mean()
    df['macd_hist'] = df['macd'] - df['macd_signal']
    
    # ATR (Average True Range)
    high_low = df['high'] - df['low']
    high_close = (df['high'] - df['close'].shift()).abs()
    low_close = (df['low'] - df['close'].shift()).abs()
    ranges = pd.concat([high_low, high_close, low_close], axis=1)
    true_range = ranges.max(axis=1)
    df['atr'] = true_range.rolling(14).mean()
    
    return df


def analyze_trend(df):
    """–í–∏–∑–Ω–∞—á–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ç—Ä–µ–Ω–¥"""
    current_price = df['close'].iloc[-1]
    sma_50 = df['sma_50'].iloc[-1]
    sma_200 = df['sma_200'].iloc[-1] if not pd.isna(df['sma_200'].iloc[-1]) else None
    
    # –ù–∞—Ö–∏–ª SMA
    sma_50_slope = (df['sma_50'].iloc[-1] - df['sma_50'].iloc[-10]) / 10
    
    trend = "NEUTRAL"
    strength = 0
    
    if sma_200 is not None:
        if current_price > sma_50 > sma_200:
            trend = "STRONG UPTREND"
            strength = 2
        elif current_price > sma_50:
            trend = "UPTREND"
            strength = 1
        elif current_price < sma_50 < sma_200:
            trend = "STRONG DOWNTREND"
            strength = -2
        elif current_price < sma_50:
            trend = "DOWNTREND"
            strength = -1
    else:
        if current_price > sma_50 and sma_50_slope > 0:
            trend = "UPTREND"
            strength = 1
        elif current_price < sma_50 and sma_50_slope < 0:
            trend = "DOWNTREND"
            strength = -1
    
    return {
        'trend': trend,
        'strength': strength,
        'current_price': current_price,
        'sma_50': sma_50,
        'sma_200': sma_200,
        'distance_from_sma50': (current_price - sma_50) / sma_50 * 100
    }


def analyze_volatility(df):
    """–ê–Ω–∞–ª—ñ–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ"""
    returns = df['close'].pct_change()
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è (–≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å)
    volatility = returns.std() * 100
    
    # ATR —è–∫ % –≤—ñ–¥ —Ü—ñ–Ω–∏
    atr = df['atr'].iloc[-1]
    atr_pct = atr / df['close'].iloc[-1] * 100
    
    # Bollinger Bands width
    bb_width = (df['bb_upper'].iloc[-1] - df['bb_lower'].iloc[-1]) / df['bb_middle'].iloc[-1] * 100
    
    # –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è
    if volatility < 1.5:
        regime = "LOW"
    elif volatility < 3.0:
        regime = "MEDIUM"
    else:
        regime = "HIGH"
    
    return {
        'volatility': volatility,
        'atr_pct': atr_pct,
        'bb_width': bb_width,
        'regime': regime
    }


def test_indicators(df):
    """–¢–µ—Å—Ç—É–≤–∞—Ç–∏ —è–∫—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –ø—Ä–∞—Ü—é—é—Ç—å –∫—Ä–∞—â–µ"""
    results = {
        'rsi_oversold': 0,
        'rsi_overbought': 0,
        'bb_lower': 0,
        'bb_upper': 0,
        'macd_cross': 0,
        'sma_cross': 0
    }
    
    wins = {key: 0 for key in results.keys()}
    
    for i in range(50, len(df) - 5):  # –ó–∞–ª–∏—à–∞—î–º–æ 5 —Å–≤—ñ—á–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        current = df.iloc[i]
        future_price = df['close'].iloc[i+5]
        current_price = current['close']
        
        # RSI Oversold
        if current['rsi'] < 30:
            results['rsi_oversold'] += 1
            if future_price > current_price:
                wins['rsi_oversold'] += 1
        
        # RSI Overbought
        if current['rsi'] > 70:
            results['rsi_overbought'] += 1
            if future_price < current_price:
                wins['rsi_overbought'] += 1
        
        # BB Lower
        if current_price < current['bb_lower']:
            results['bb_lower'] += 1
            if future_price > current_price:
                wins['bb_lower'] += 1
        
        # BB Upper
        if current_price > current['bb_upper']:
            results['bb_upper'] += 1
            if future_price < current_price:
                wins['bb_upper'] += 1
        
        # MACD Cross
        if i > 0:
            prev = df.iloc[i-1]
            if prev['macd'] < prev['macd_signal'] and current['macd'] > current['macd_signal']:
                results['macd_cross'] += 1
                if future_price > current_price:
                    wins['macd_cross'] += 1
        
        # SMA Cross
        if i > 0:
            prev = df.iloc[i-1]
            if prev['close'] < prev['sma_50'] and current_price > current['sma_50']:
                results['sma_cross'] += 1
                if future_price > current_price:
                    wins['sma_cross'] += 1
    
    accuracy = {}
    for key in results.keys():
        if results[key] > 0:
            accuracy[key] = wins[key] / results[key] * 100
        else:
            accuracy[key] = 0
    
    return accuracy


def main():
    parser = argparse.ArgumentParser(description='–ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫–æ–≤–∏—Ö —É–º–æ–≤')
    parser.add_argument('--days', type=int, default=30, help='–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É')
    parser.add_argument('--symbols', type=str, default='ETHUSDT,BTCUSDT,BNBUSDT', 
                        help='–°–∏–º–≤–æ–ª–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É')
    parser.add_argument('--interval', type=str, default='4h', help='–¢–∞–π–º—Ñ—Ä–µ–π–º')
    
    args = parser.parse_args()
    symbols = args.symbols.split(',')
    
    print('='*100)
    print(f'üìä –ê–ù–ê–õ–Ü–ó –†–ò–ù–ö–û–í–ò–• –£–ú–û–í')
    print(f'–ü–µ—Ä—ñ–æ–¥: {args.days} –¥–Ω—ñ–≤ | –¢–∞–π–º—Ñ—Ä–µ–π–º: {args.interval}')
    print('='*100)
    
    for symbol in symbols:
        print(f'\nüî∏ {symbol}')
        print('-'*100)
        
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ
            df = get_historical_data(symbol, args.days, args.interval)
            
            # –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
            df = calculate_indicators(df)
            
            # –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—É
            trend_info = analyze_trend(df)
            print(f"\nüìà –¢–†–ï–ù–î: {trend_info['trend']} (strength: {trend_info['strength']})")
            print(f"   Current Price: ${trend_info['current_price']:.2f}")
            print(f"   SMA 50: ${trend_info['sma_50']:.2f} ({trend_info['distance_from_sma50']:+.2f}%)")
            if trend_info['sma_200']:
                print(f"   SMA 200: ${trend_info['sma_200']:.2f}")
            
            # –ê–Ω–∞–ª—ñ–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
            vol_info = analyze_volatility(df)
            print(f"\nüìä –í–û–õ–ê–¢–ò–õ–¨–ù–Ü–°–¢–¨: {vol_info['regime']}")
            print(f"   Returns StdDev: {vol_info['volatility']:.2f}%")
            print(f"   ATR: {vol_info['atr_pct']:.2f}%")
            print(f"   BB Width: {vol_info['bb_width']:.2f}%")
            
            # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤
            indicator_accuracy = test_indicators(df)
            print(f"\nüéØ –¢–û–ß–ù–Ü–°–¢–¨ –Ü–ù–î–ò–ö–ê–¢–û–†–Ü–í (next 5 candles):")
            for indicator, acc in sorted(indicator_accuracy.items(), key=lambda x: x[1], reverse=True):
                status = '‚úÖ' if acc >= 55 else '‚ö†Ô∏è' if acc >= 45 else '‚ùå'
                print(f"   {status} {indicator:20s}: {acc:5.1f}%")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:")
            if trend_info['strength'] > 0:
                print(f"   ‚úÖ –¢—Ä–µ–Ω–¥ –≤–≥–æ—Ä—É - —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∏ LONG –ø–æ–∑–∏—Ü—ñ—ó")
                print(f"   ‚ö†Ô∏è SHORT —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ —Å–∏–ª—å–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö reversal")
            elif trend_info['strength'] < 0:
                print(f"   ‚úÖ –¢—Ä–µ–Ω–¥ –≤–Ω–∏–∑ - —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∏ SHORT –ø–æ–∑–∏—Ü—ñ—ó")
                print(f"   ‚ö†Ô∏è LONG —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ —Å–∏–ª—å–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö reversal")
            else:
                print(f"   ‚ö†Ô∏è –§–ª–µ—Ç - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ mean reversion —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó")
            
            if vol_info['regime'] == 'HIGH':
                print(f"   ‚ö†Ô∏è –í–∏—Å–æ–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å - –∑–±—ñ–ª—å—à–∏—Ç–∏ SL/TP")
            elif vol_info['regime'] == 'LOW':
                print(f"   ‚úÖ –ù–∏–∑—å–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å - –∑–º–µ–Ω—à–∏—Ç–∏ SL/TP")
            
            best_indicator = max(indicator_accuracy.items(), key=lambda x: x[1])
            if best_indicator[1] >= 55:
                print(f"   ‚úÖ –ù–∞–π–∫—Ä–∞—â–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä: {best_indicator[0]} ({best_indicator[1]:.1f}%)")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    print('\n' + '='*100)
    print('‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
    print('='*100)


if __name__ == '__main__':
    main()
