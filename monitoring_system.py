# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ –∑–¥–æ—Ä–æ–≤'—è —Ç–æ—Ä–≥–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
–í—ñ–¥—Å—Ç–µ–∂—É—î –º–µ—Ç—Ä–∏–∫–∏, –∑–±–∏—Ä–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –∞–ª–µ—Ä—Ç–∏
"""
import asyncio
import logging
import psutil
import threading
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import numpy as np

try:
    import GPUtil
    GPU_AVAILABLE = True
except ImportError:
    GPU_AVAILABLE = False
    logging.warning("‚ö†Ô∏è GPUtil –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, GPU –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")

logger = logging.getLogger(__name__)


class MonitoringSystem:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
    """

    def __init__(self):
        self.monitoring_active = False
        self.monitor_thread = None
        self.db_manager = None
        
        # –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º–∏
        self.system_metrics = {
            'cpu_percent': [],
            'memory_percent': [],
            'disk_usage': [],
            'gpu_memory': [],
            'gpu_utilization': [],
            'network_sent': 0,
            'network_recv': 0
        }
        
        # –ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ—Ä–≥—ñ–≤–ª—ñ
        self.trading_metrics = {
            'total_trades': 0,
            'winning_trades': 0,
            'losing_trades': 0,
            'total_pnl': 0.0,
            'daily_pnl': 0.0,
            'positions_opened': 0,
            'positions_closed': 0,
            'signals_generated': 0,
            'signals_executed': 0,
            'api_calls': 0,
            'api_errors': 0
        }
        
        # –ú–µ—Ç—Ä–∏–∫–∏ ML –º–æ–¥–µ–ª–µ–π
        self.ml_metrics = {
            'predictions_made': 0,
            'predictions_accuracy': {},
            'models_trained': 0,
            'training_time': 0.0,
            'inference_time': [],
            'model_errors': 0
        }
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ë–î
        self.db_metrics = {
            'queries_executed': 0,
            'queries_cached': 0,
            'cache_hits': 0,
            'cache_misses': 0,
            'db_errors': 0,
            'avg_query_time': []
        }
        
        # –ê–ª–µ—Ä—Ç–∏ —Ç–∞ –ø–æ—Ä–æ–≥–∏
        self.alert_thresholds = {
            'cpu_percent': 80.0,
            'memory_percent': 85.0,
            'gpu_memory': 90.0,
            'api_error_rate': 0.1,
            'db_error_rate': 0.05,
            'daily_loss_limit': 0.1
        }
        
        # –Ü—Å—Ç–æ—Ä—ñ—è –∞–ª–µ—Ä—Ç—ñ–≤
        self.alerts_history = []
        self.max_alerts_history = 1000
        
        # –ß–∞—Å –∑–∞–ø—É—Å–∫—É
        self.start_time = datetime.now()
        self.last_metrics_save = datetime.now()
        
        # –Ü–Ω—Ç–µ—Ä–≤–∞–ª–∏
        self.monitoring_interval = 10  # —Å–µ–∫—É–Ω–¥
        self.metrics_save_interval = 300  # 5 —Ö–≤–∏–ª–∏–Ω
        
        logger.info("üìä MonitoringSystem —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")

    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
        if self.monitoring_active:
            logger.warning("‚ö†Ô∏è –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π")
            return

        self.monitoring_active = True
        self.monitor_thread = threading.Thread(
            target=self._monitoring_loop,
            daemon=True,
            name="MonitoringThread"
        )
        self.monitor_thread.start()
        logger.info("‚úÖ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω–æ")

    def stop_monitoring(self):
        """–ó—É–ø–∏–Ω–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        if not self.monitoring_active:
            return

        self.monitoring_active = False
        
        if self.monitor_thread and self.monitor_thread.is_alive():
            self.monitor_thread.join(timeout=5)
        
        logger.info("üõë –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ")

    def _monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        logger.info("üîÑ –¶–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑–∞–ø—É—â–µ–Ω–æ")
        
        while self.monitoring_active:
            try:
                # –ó–±—ñ—Ä —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫
                self._collect_system_metrics()
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä–æ–≥—ñ–≤ —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∞–ª–µ—Ä—Ç—ñ–≤
                self._check_thresholds()
                
                # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ –≤ –ë–î (–∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω)
                current_time = datetime.now()
                if (current_time - self.last_metrics_save).total_seconds() >= self.metrics_save_interval:
                    asyncio.run(self._save_metrics_to_db())
                    self.last_metrics_save = current_time
                
                # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö
                self._cleanup_old_metrics()
                
                # –ü–∞—É–∑–∞
                time.sleep(self.monitoring_interval)
                
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}", exc_info=True)
                time.sleep(30)

    def _collect_system_metrics(self):
        """–ó–±—ñ—Ä —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫"""
        try:
            # CPU
            cpu_percent = psutil.cpu_percent(interval=1)
            self.system_metrics['cpu_percent'].append({
                'value': cpu_percent,
                'timestamp': datetime.now()
            })
            
            # –ü–∞–º'—è—Ç—å
            memory = psutil.virtual_memory()
            self.system_metrics['memory_percent'].append({
                'value': memory.percent,
                'timestamp': datetime.now()
            })
            
            # –î–∏—Å–∫
            disk = psutil.disk_usage('/')
            self.system_metrics['disk_usage'].append({
                'value': disk.percent,
                'timestamp': datetime.now()
            })
            
            # –ú–µ—Ä–µ–∂–∞
            network = psutil.net_io_counters()
            self.system_metrics['network_sent'] = network.bytes_sent
            self.system_metrics['network_recv'] = network.bytes_recv
            
            # GPU (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π)
            if GPU_AVAILABLE:
                try:
                    gpus = GPUtil.getGPUs()
                    if gpus:
                        gpu = gpus[0]
                        self.system_metrics['gpu_memory'].append({
                            'value': (gpu.memoryUsed / gpu.memoryTotal) * 100,
                            'timestamp': datetime.now()
                        })
                        self.system_metrics['gpu_utilization'].append({
                            'value': gpu.load * 100,
                            'timestamp': datetime.now()
                        })
                except Exception as e:
                    logger.debug(f"GPU metrics error: {e}")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–æ—Ä—É —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫: {e}")

    def _check_thresholds(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä–æ–≥—ñ–≤ —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∞–ª–µ—Ä—Ç—ñ–≤"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ CPU
            if self.system_metrics['cpu_percent']:
                latest_cpu = self.system_metrics['cpu_percent'][-1]['value']
                if latest_cpu > self.alert_thresholds['cpu_percent']:
                    self._create_alert('cpu_high', f"CPU usage high: {latest_cpu:.1f}%", 'warning')
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞–º'—è—Ç—ñ
            if self.system_metrics['memory_percent']:
                latest_memory = self.system_metrics['memory_percent'][-1]['value']
                if latest_memory > self.alert_thresholds['memory_percent']:
                    self._create_alert('memory_high', f"Memory usage high: {latest_memory:.1f}%", 'warning')
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ GPU
            if self.system_metrics['gpu_memory']:
                latest_gpu_mem = self.system_metrics['gpu_memory'][-1]['value']
                if latest_gpu_mem > self.alert_thresholds['gpu_memory']:
                    self._create_alert('gpu_memory_high', f"GPU memory high: {latest_gpu_mem:.1f}%", 'warning')
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API –ø–æ–º–∏–ª–æ–∫
            if self.trading_metrics['api_calls'] > 0:
                error_rate = self.trading_metrics['api_errors'] / self.trading_metrics['api_calls']
                if error_rate > self.alert_thresholds['api_error_rate']:
                    self._create_alert('api_errors_high', f"API error rate high: {error_rate:.2%}", 'critical')
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–µ–Ω–Ω–∏—Ö –≤—Ç—Ä–∞—Ç
            if self.trading_metrics['daily_pnl'] < 0:
                loss_percent = abs(self.trading_metrics['daily_pnl']) / 1000  # Assuming $1000 balance
                if loss_percent > self.alert_thresholds['daily_loss_limit']:
                    self._create_alert('daily_loss_limit', f"Daily loss limit exceeded: {loss_percent:.2%}", 'critical')
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ—Ä–æ–≥—ñ–≤: {e}")

    def _create_alert(self, alert_type: str, message: str, severity: str = 'info'):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–ª–µ—Ä—Ç—É"""
        alert = {
            'type': alert_type,
            'message': message,
            'severity': severity,
            'timestamp': datetime.now()
        }
        
        self.alerts_history.append(alert)
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è
        if severity == 'critical':
            logger.critical(f"üö® CRITICAL ALERT: {message}")
        elif severity == 'warning':
            logger.warning(f"‚ö†Ô∏è WARNING: {message}")
        else:
            logger.info(f"‚ÑπÔ∏è INFO: {message}")

    def _cleanup_old_metrics(self):
        """–û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó –ø–∞–º'—è—Ç—ñ"""
        max_items = 100
        
        for metric_list in [
            self.system_metrics['cpu_percent'],
            self.system_metrics['memory_percent'],
            self.system_metrics['disk_usage'],
            self.system_metrics['gpu_memory'],
            self.system_metrics['gpu_utilization']
        ]:
            if len(metric_list) > max_items:
                # –ó–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 50 –∑–∞–ø–∏—Å—ñ–≤
                del metric_list[:-50]
        
        # –û—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∞–ª–µ—Ä—Ç—ñ–≤
        if len(self.alerts_history) > self.max_alerts_history:
            del self.alerts_history[:-500]

    async def _save_metrics_to_db(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö"""
        if not self.db_manager:
            return
        
        try:
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
            metrics_data = {
                'timestamp': datetime.now(),
                'system_metrics': self._get_average_metrics(),
                'trading_metrics': self.trading_metrics.copy(),
                'ml_metrics': self.ml_metrics.copy(),
                'db_metrics': self.db_metrics.copy()
            }
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
            # await self.db_manager.save_monitoring_metrics(metrics_data)
            
            logger.debug("üíæ –ú–µ—Ç—Ä–∏–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫: {e}")

    def _get_average_metrics(self) -> Dict[str, float]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å –º–µ—Ç—Ä–∏–∫"""
        avg_metrics = {}
        
        # CPU
        if self.system_metrics['cpu_percent']:
            cpu_values = [m['value'] for m in self.system_metrics['cpu_percent'][-10:]]
            avg_metrics['cpu_avg'] = np.mean(cpu_values)
        
        # Memory
        if self.system_metrics['memory_percent']:
            mem_values = [m['value'] for m in self.system_metrics['memory_percent'][-10:]]
            avg_metrics['memory_avg'] = np.mean(mem_values)
        
        # GPU
        if self.system_metrics['gpu_memory']:
            gpu_values = [m['value'] for m in self.system_metrics['gpu_memory'][-10:]]
            avg_metrics['gpu_memory_avg'] = np.mean(gpu_values)
        
        if self.system_metrics['gpu_utilization']:
            gpu_util_values = [m['value'] for m in self.system_metrics['gpu_utilization'][-10:]]
            avg_metrics['gpu_utilization_avg'] = np.mean(gpu_util_values)
        
        return avg_metrics

    # === –ü—É–±–ª—ñ—á–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ ===

    def record_trade(self, profit: float, is_winning: bool):
        """–ó–∞–ø–∏—Å —Ç–æ—Ä–≥–æ–≤–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó"""
        self.trading_metrics['total_trades'] += 1
        self.trading_metrics['total_pnl'] += profit
        self.trading_metrics['daily_pnl'] += profit
        
        if is_winning:
            self.trading_metrics['winning_trades'] += 1
        else:
            self.trading_metrics['losing_trades'] += 1

    def record_position_opened(self):
        """–ó–∞–ø–∏—Å –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó"""
        self.trading_metrics['positions_opened'] += 1

    def record_position_closed(self):
        """–ó–∞–ø–∏—Å –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó"""
        self.trading_metrics['positions_closed'] += 1

    def record_signal(self, executed: bool = False):
        """–ó–∞–ø–∏—Å —Å–∏–≥–Ω–∞–ª—É"""
        self.trading_metrics['signals_generated'] += 1
        if executed:
            self.trading_metrics['signals_executed'] += 1

    def record_api_call(self, success: bool = True):
        """–ó–∞–ø–∏—Å API –≤–∏–∫–ª–∏–∫—É"""
        self.trading_metrics['api_calls'] += 1
        if not success:
            self.trading_metrics['api_errors'] += 1

    def record_prediction(self, symbol: str, accuracy: float = None):
        """–ó–∞–ø–∏—Å ML –ø—Ä–æ–≥–Ω–æ–∑—É"""
        self.ml_metrics['predictions_made'] += 1
        
        if accuracy is not None:
            if symbol not in self.ml_metrics['predictions_accuracy']:
                self.ml_metrics['predictions_accuracy'][symbol] = []
            self.ml_metrics['predictions_accuracy'][symbol].append(accuracy)

    def record_model_training(self, training_time: float):
        """–ó–∞–ø–∏—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ"""
        self.ml_metrics['models_trained'] += 1
        self.ml_metrics['training_time'] += training_time

    def record_db_query(self, query_time: float, cached: bool = False):
        """–ó–∞–ø–∏—Å –ë–î –∑–∞–ø–∏—Ç—É"""
        self.db_metrics['queries_executed'] += 1
        self.db_metrics['avg_query_time'].append(query_time)
        
        if cached:
            self.db_metrics['queries_cached'] += 1
            self.db_metrics['cache_hits'] += 1
        else:
            self.db_metrics['cache_misses'] += 1

    def reset_daily_metrics(self):
        """–°–∫–∏–¥–∞–Ω–Ω—è –¥–µ–Ω–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫"""
        self.trading_metrics['daily_pnl'] = 0.0
        logger.info("üîÑ –î–µ–Ω–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ —Å–∫–∏–Ω—É—Ç–æ")

    # === –ú–µ—Ç–æ–¥–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===

    def get_system_status(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É —Å–∏—Å—Ç–µ–º–∏"""
        uptime = (datetime.now() - self.start_time).total_seconds()
        
        status = {
            'uptime_seconds': uptime,
            'uptime_formatted': str(timedelta(seconds=int(uptime))),
            'monitoring_active': self.monitoring_active,
            'system_metrics': self._get_average_metrics(),
            'trading_metrics': self.trading_metrics.copy(),
            'ml_metrics': {
                'predictions_made': self.ml_metrics['predictions_made'],
                'models_trained': self.ml_metrics['models_trained'],
                'avg_accuracy': self._get_average_model_accuracy()
            },
            'db_metrics': {
                'queries_executed': self.db_metrics['queries_executed'],
                'cache_hit_rate': self._get_cache_hit_rate(),
                'avg_query_time': np.mean(self.db_metrics['avg_query_time'][-100:]) if self.db_metrics['avg_query_time'] else 0
            },
            'recent_alerts': self.alerts_history[-10:] if self.alerts_history else []
        }
        
        return status

    def _get_average_model_accuracy(self) -> float:
        """–°–µ—Ä–µ–¥–Ω—è —Ç–æ—á–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª–µ–π"""
        all_accuracies = []
        for symbol_accuracies in self.ml_metrics['predictions_accuracy'].values():
            all_accuracies.extend(symbol_accuracies[-10:])
        
        return np.mean(all_accuracies) if all_accuracies else 0.0

    def _get_cache_hit_rate(self) -> float:
        """–í—ñ–¥—Å–æ—Ç–æ–∫ –ø–æ–ø–∞–¥–∞–Ω—å –≤ –∫–µ—à"""
        total_requests = self.db_metrics['cache_hits'] + self.db_metrics['cache_misses']
        if total_requests == 0:
            return 0.0
        
        return self.db_metrics['cache_hits'] / total_requests

    def get_trading_statistics(self) -> Dict[str, Any]:
        """–¢–æ—Ä–≥–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        total_trades = self.trading_metrics['total_trades']
        
        return {
            'total_trades': total_trades,
            'winning_trades': self.trading_metrics['winning_trades'],
            'losing_trades': self.trading_metrics['losing_trades'],
            'win_rate': self.trading_metrics['winning_trades'] / total_trades if total_trades > 0 else 0,
            'total_pnl': self.trading_metrics['total_pnl'],
            'daily_pnl': self.trading_metrics['daily_pnl'],
            'avg_pnl_per_trade': self.trading_metrics['total_pnl'] / total_trades if total_trades > 0 else 0,
            'signals_generated': self.trading_metrics['signals_generated'],
            'signals_executed': self.trading_metrics['signals_executed'],
            'signal_execution_rate': self.trading_metrics['signals_executed'] / self.trading_metrics['signals_generated'] if self.trading_metrics['signals_generated'] > 0 else 0
        }

    def print_status_report(self):
        """–î—Ä—É–∫ –∑–≤—ñ—Ç—É –ø—Ä–æ —Å—Ç–∞—Ç—É—Å"""
        status = self.get_system_status()
        stats = self.get_trading_statistics()
        
        print("\n" + "="*60)
        print("üìä SYSTEM STATUS REPORT")
        print("="*60)
        print(f"‚è±Ô∏è  Uptime: {status['uptime_formatted']}")
        print(f"üíª CPU: {status['system_metrics'].get('cpu_avg', 0):.1f}%")
        print(f"üß† Memory: {status['system_metrics'].get('memory_avg', 0):.1f}%")
        
        if 'gpu_memory_avg' in status['system_metrics']:
            print(f"üéÆ GPU Memory: {status['system_metrics']['gpu_memory_avg']:.1f}%")
        
        print("\n" + "-"*60)
        print("üí∞ TRADING METRICS")
        print("-"*60)
        print(f"üìà Total Trades: {stats['total_trades']}")
        print(f"‚úÖ Win Rate: {stats['win_rate']:.2%}")
        print(f"üíµ Total P&L: ${stats['total_pnl']:.2f}")
        print(f"üìä Daily P&L: ${stats['daily_pnl']:.2f}")
        print(f"üì° Signals: {stats['signals_generated']} generated, {stats['signals_executed']} executed")
        
        print("\n" + "-"*60)
        print("ü§ñ ML METRICS")
        print("-"*60)
        print(f"üîÆ Predictions: {status['ml_metrics']['predictions_made']}")
        print(f"üéØ Avg Accuracy: {status['ml_metrics']['avg_accuracy']:.2%}")
        print(f"üèãÔ∏è  Models Trained: {status['ml_metrics']['models_trained']}")
        
        print("\n" + "-"*60)
        print("üíæ DATABASE METRICS")
        print("-"*60)
        print(f"üìä Queries: {status['db_metrics']['queries_executed']}")
        print(f"‚ö° Cache Hit Rate: {status['db_metrics']['cache_hit_rate']:.2%}")
        print(f"‚è±Ô∏è  Avg Query Time: {status['db_metrics']['avg_query_time']:.3f}s")
        
        if status['recent_alerts']:
            print("\n" + "-"*60)
            print("üö® RECENT ALERTS")
            print("-"*60)
            for alert in status['recent_alerts']:
                print(f"  [{alert['severity'].upper()}] {alert['message']}")
        
        print("="*60 + "\n")


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
monitoring_system = MonitoringSystem()


# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
def get_monitoring_status() -> Dict[str, Any]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    return monitoring_system.get_system_status()


def get_trading_statistics() -> Dict[str, Any]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return monitoring_system.get_trading_statistics()


if __name__ == "__main__":
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è MonitoringSystem...")
    
    monitoring_system.start_monitoring()
    
    # –°–∏–º—É–ª—è—Ü—ñ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    import random
    
    for i in range(5):
        # –°–∏–º—É–ª—è—Ü—ñ—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ
        profit = random.uniform(-10, 20)
        monitoring_system.record_trade(profit, profit > 0)
        monitoring_system.record_signal(executed=random.choice([True, False]))
        
        # –°–∏–º—É–ª—è—Ü—ñ—è ML
        monitoring_system.record_prediction('BTCUSDT', random.uniform(0.5, 0.9))
        
        # –°–∏–º—É–ª—è—Ü—ñ—è –ë–î
        monitoring_system.record_db_query(random.uniform(0.01, 0.1), cached=random.choice([True, False]))
        
        time.sleep(2)
    
    # –î—Ä—É–∫ –∑–≤—ñ—Ç—É
    monitoring_system.print_status_report()
    
    monitoring_system.stop_monitoring()
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ")