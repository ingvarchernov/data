#!/usr/bin/env python3
"""–¢–µ—Å—Ç –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î"""
import asyncio
import logging
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def test_db_manager():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è OptimizedDatabaseManager"""
    from optimized.database import DatabaseConnection as OptimizedDatabaseManager
    
    db = OptimizedDatabaseManager()
    
    try:
        # 1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
        logger.info("=" * 60)
        logger.info("1Ô∏è‚É£ –¢–ï–°–¢ –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–á")
        logger.info("=" * 60)
        await db.initialize()
        
        # 2. –¢–µ—Å—Ç symbol/interval ID
        logger.info("\n" + "=" * 60)
        logger.info("2Ô∏è‚É£ –¢–ï–°–¢ SYMBOL/INTERVAL ID")
        logger.info("=" * 60)
        
        symbol_id = await db.get_or_create_symbol_id('BTCUSDT')
        logger.info(f"‚úÖ Symbol ID –¥–ª—è BTCUSDT: {symbol_id}")
        
        interval_id = await db.get_or_create_interval_id('1h')
        logger.info(f"‚úÖ Interval ID –¥–ª—è 1h: {interval_id}")
        
        # 3. –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
        logger.info("\n" + "=" * 60)
        logger.info("3Ô∏è‚É£ –¢–ï–°–¢ –û–¢–†–ò–ú–ê–ù–ù–Ø –î–ê–ù–ò–•")
        logger.info("=" * 60)
        
        df = await db.get_historical_data_optimized(symbol_id, interval_id, days_back=7)
        logger.info(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(df)} –∑–∞–ø–∏—Å—ñ–≤")
        if not df.empty:
            logger.info(f"   –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
            logger.info(f"   –ü–µ—Ä—ñ–æ–¥: {df['timestamp'].min()} - {df['timestamp'].max()}")
        
        # 4. –¢–µ—Å—Ç –∫–µ—à—É
        logger.info("\n" + "=" * 60)
        logger.info("4Ô∏è‚É£ –¢–ï–°–¢ –ö–ï–®–£–í–ê–ù–ù–Ø")
        logger.info("=" * 60)
        
        cache_stats = await db.get_cache_stats()
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à—É:")
        for key, value in cache_stats.items():
            logger.info(f"   {key}: {value}")
        
        # 5. –¢–µ—Å—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É
        logger.info("\n" + "=" * 60)
        logger.info("5Ô∏è‚É£ –¢–ï–°–¢ –¢–û–†–ì–û–í–ò–• –°–ò–ì–ù–ê–õ–Ü–í")
        logger.info("=" * 60)
        
        # Use db.save_signal instead of deprecated save_trading_signal
        
        signal_data = {
            'symbol': 'BTCUSDT',
            'action': 'BUY',
            'confidence': 0.85,
            'entry_price': 50000.0,
            'stop_loss': 49000.0,
            'take_profit': 52000.0,
            'quantity': 0.1,
            'strategy': 'test_strategy',
            'notes': '–¢–µ—Å—Ç–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª'
        }
        
        signal_id = await db.save_signal(signal_data)
        logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª ID: {signal_id}")
        
        # 6. –¢–µ—Å—Ç —ñ–Ω–≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∫–µ—à—É
        logger.info("\n" + "=" * 60)
        logger.info("6Ô∏è‚É£ –¢–ï–°–¢ –Ü–ù–í–ê–õ–Ü–î–ê–¶–Ü–á –ö–ï–®–£")
        logger.info("=" * 60)
        
        await db.invalidate_cache_pattern("*")
        logger.info("‚úÖ –ö–µ—à –æ—á–∏—â–µ–Ω–æ")
        
        logger.info("\n" + "=" * 60)
        logger.info("‚úÖ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–î–ï–ù–û")
        logger.info("=" * 60)
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É: {e}", exc_info=True)
    finally:
        await db.close()


if __name__ == "__main__":
    asyncio.run(test_db_manager())