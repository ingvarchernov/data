"""
Database Migration Script
–ê–¥–∞–ø—Ç–∞—Ü—ñ—è –ë–î –ø—ñ–¥ –Ω–æ–≤—É –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—É

–ó–º—ñ–Ω–∏:
1. –î–æ–¥–∞—Ç–∏ created_at, updated_at –¥–æ positions
2. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç–∞ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–∏–ø–∏ –∫–æ–ª–æ–Ω–æ–∫
3. –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
4. –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—Ä–∏–≥–µ—Ä–∏ –¥–ª—è updated_at
"""

import os
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
db_url = os.getenv('DATABASE_URL')

if not db_url:
    logger.error('‚ùå DATABASE_URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')
    exit(1)

engine = create_engine(db_url)


def run_migration():
    """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –º—ñ–≥—Ä–∞—Ü—ñ—ó –ë–î"""
    
    with engine.connect() as conn:
        # –°—Ç–∞—Ä—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        trans = conn.begin()
        
        try:
            logger.info("üöÄ –ü–æ—á–∞—Ç–æ–∫ –º—ñ–≥—Ä–∞—Ü—ñ—ó –ë–î...")
            
            # ============================================================
            # 1. –î–û–î–ê–¢–ò created_at, updated_at –¥–æ POSITIONS
            # ============================================================
            logger.info("üìù –î–æ–¥–∞–≤–∞–Ω–Ω—è created_at —Ç–∞ updated_at –¥–æ positions...")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î created_at
            result = conn.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name='positions' AND column_name='created_at'
            """))
            
            if not result.fetchone():
                # –î–æ–¥–∞—î–º–æ created_at
                conn.execute(text("""
                    ALTER TABLE positions 
                    ADD COLUMN created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                """))
                
                # –ó–∞–ø–æ–≤–Ω—é—î–º–æ created_at –∑ entry_time –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
                conn.execute(text("""
                    UPDATE positions 
                    SET created_at = COALESCE(entry_time, CURRENT_TIMESTAMP)
                    WHERE created_at IS NULL
                """))
                logger.info("‚úÖ created_at –¥–æ–¥–∞–Ω–æ")
            else:
                logger.info("‚ÑπÔ∏è  created_at –≤–∂–µ —ñ—Å–Ω—É—î")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î updated_at
            result = conn.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name='positions' AND column_name='updated_at'
            """))
            
            if not result.fetchone():
                # –î–æ–¥–∞—î–º–æ updated_at
                conn.execute(text("""
                    ALTER TABLE positions 
                    ADD COLUMN updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                """))
                
                # –ó–∞–ø–æ–≤–Ω—é—î–º–æ updated_at
                conn.execute(text("""
                    UPDATE positions 
                    SET updated_at = COALESCE(created_at, entry_time, CURRENT_TIMESTAMP)
                    WHERE updated_at IS NULL
                """))
                logger.info("‚úÖ updated_at –¥–æ–¥–∞–Ω–æ")
            else:
                logger.info("‚ÑπÔ∏è  updated_at –≤–∂–µ —ñ—Å–Ω—É—î")
            
            # ============================================================
            # 2. –°–¢–í–û–†–ò–¢–ò –¢–†–ò–ì–ï–† –¥–ª—è updated_at (—è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î)
            # ============================================================
            logger.info("üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∏–≥–µ—Ä–∞ –¥–ª—è positions.updated_at...")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ç—Ä–∏–≥–µ—Ä
            result = conn.execute(text("""
                SELECT tgname 
                FROM pg_trigger 
                WHERE tgname='update_positions_updated_at'
            """))
            
            if not result.fetchone():
                # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∏–≥–µ—Ä
                conn.execute(text("""
                    CREATE TRIGGER update_positions_updated_at
                        BEFORE UPDATE ON positions
                        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column()
                """))
                logger.info("‚úÖ –¢—Ä–∏–≥–µ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            else:
                logger.info("‚ÑπÔ∏è  –¢—Ä–∏–≥–µ—Ä –≤–∂–µ —ñ—Å–Ω—É—î")
            
            # ============================================================
            # 3. –û–ß–ò–°–¢–ò–¢–ò –¢–ï–°–¢–û–í–Ü –î–ê–ù–Ü (–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É —á–µ—Ä–µ–∑ FK)
            # ============================================================
            logger.info("üóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...")
            
            # –°–ø–æ—á–∞—Ç–∫—É trades (–∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ positions)
            result = conn.execute(text("""
                DELETE FROM trades WHERE symbol LIKE 'TEST%'
            """))
            deleted_trades = result.rowcount
            
            # –ü–æ—Ç—ñ–º positions (–∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ trading_signals)
            result = conn.execute(text("""
                DELETE FROM positions WHERE symbol LIKE 'TEST%'
            """))
            deleted_positions = result.rowcount
            
            # –í –∫—ñ–Ω—Ü—ñ trading_signals
            result = conn.execute(text("""
                DELETE FROM trading_signals WHERE symbol LIKE 'TEST%'
            """))
            deleted_signals = result.rowcount
            
            logger.info(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ: {deleted_trades} —É–≥–æ–¥, {deleted_positions} –ø–æ–∑–∏—Ü—ñ–π, {deleted_signals} —Å–∏–≥–Ω–∞–ª—ñ–≤")
            
            # ============================================================
            # 4. –û–ß–ò–°–¢–ò–¢–ò –ó–ê–ö–†–ò–¢–Ü –ü–û–ó–ò–¶–Ü–á (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
            # ============================================================
            logger.info("üóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∑–∞–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π...")
            
            result = conn.execute(text("""
                DELETE FROM positions 
                WHERE status IN ('closed', 'cancelled') 
                AND created_at < CURRENT_TIMESTAMP - INTERVAL '7 days'
            """))
            deleted_old = result.rowcount
            logger.info(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ {deleted_old} —Å—Ç–∞—Ä–∏—Ö –∑–∞–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π")
            
            # ============================================================
            # 5. –ü–ï–†–ï–í–Ü–†–ö–ê –¶–Ü–õ–Ü–°–ù–û–°–¢–Ü
            # ============================================================
            logger.info("‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö...")
            
            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ –ø—ñ—Å–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó
            result = conn.execute(text("SELECT COUNT(*) FROM positions"))
            pos_count = result.scalar()
            
            result = conn.execute(text("SELECT COUNT(*) FROM trading_signals"))
            sig_count = result.scalar()
            
            result = conn.execute(text("SELECT COUNT(*) FROM trades"))
            trades_count = result.scalar()
            
            logger.info(f"üìä –ü—ñ—Å–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó:")
            logger.info(f"   Positions: {pos_count}")
            logger.info(f"   Signals: {sig_count}")
            logger.info(f"   Trades: {trades_count}")
            
            # –ö–æ–º—ñ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
            trans.commit()
            logger.info("‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
            
        except Exception as e:
            trans.rollback()
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó: {e}")
            raise


if __name__ == '__main__':
    print("=" * 60)
    print("DATABASE MIGRATION")
    print("=" * 60)
    
    response = input("\n‚ö†Ô∏è  –¶—è –æ–ø–µ—Ä–∞—Ü—ñ—è –∑–º—ñ–Ω–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î. –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (yes/no): ")
    
    if response.lower() in ['yes', 'y']:
        run_migration()
        print("\n‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        print("‚ùå –ú—ñ–≥—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
