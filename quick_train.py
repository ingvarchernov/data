#!/usr/bin/env python3
"""–ü—Ä–æ—Å—Ç–∏–π –∑–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤"""
import asyncio
import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))

from training.simple_trend_classifier import SimpleTrendClassifier

async def quick_train():
    """–®–≤–∏–¥–∫–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –≤–∞–ª—é—Ç"""
    symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'ADAUSDT', 'XRPUSDT', 'DOGEUSDT']
    
    print("\n" + "="*80)
    print("üöÄ –®–í–ò–î–ö–ï –¢–†–ï–ù–£–í–ê–ù–ù–Ø –ú–û–î–ï–õ–ï–ô")
    print("="*80)
    print(f"\nüìä –í–∞–ª—é—Ç: {len(symbols)}")
    print(f"üìÖ –Ü—Å—Ç–æ—Ä—ñ—è: 730 –¥–Ω—ñ–≤ (2 —Ä–æ–∫–∏)")
    print(f"‚è±Ô∏è  –ß–∞—Å: ~{len(symbols) * 5} —Å–µ–∫—É–Ω–¥\n")
    print("="*80 + "\n")
    
    results = []
    
    for i, symbol in enumerate(symbols, 1):
        print(f"\n[{i}/{len(symbols)}] üéØ {symbol}")
        print("-" * 80)
        
        try:
            model_dir = Path(f"models/simple_trend_{symbol}")
            model_file = model_dir / f"model_{symbol}_4h.pkl"
            
            if model_file.exists():
                print(f"‚è≠Ô∏è  –ú–æ–¥–µ–ª—å –≤–∂–µ —ñ—Å–Ω—É—î, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                results.append({'symbol': symbol, 'status': 'skipped'})
                continue
            
            classifier = SimpleTrendClassifier(symbol=symbol, interval='4h')
            
            print(f"üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...")
            await classifier.prepare_data(days=730)
            
            print(f"ü§ñ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è Random Forest...")
            metrics = await classifier.train()
            
            print(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ...")
            classifier.save_model()
            
            acc = metrics.get('test_accuracy', 0)
            print(f"‚úÖ {symbol}: Test Accuracy = {acc:.2%}")
            
            results.append({
                'symbol': symbol,
                'status': 'success',
                'accuracy': acc
            })
            
        except Exception as e:
            print(f"‚ùå {symbol}: –ü–æ–º–∏–ª–∫–∞ - {e}")
            results.append({
                'symbol': symbol,
                'status': 'error',
                'error': str(e)
            })
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "="*80)
    print("üìä –ü–Ü–î–°–£–ú–û–ö")
    print("="*80 + "\n")
    
    success = [r for r in results if r['status'] == 'success']
    skipped = [r for r in results if r['status'] == 'skipped']
    errors = [r for r in results if r['status'] == 'error']
    
    if success:
        print(f"‚úÖ –£–°–ü–Ü–®–ù–û: {len(success)}")
        for r in sorted(success, key=lambda x: x.get('accuracy', 0), reverse=True):
            print(f"   {r['symbol']:12} - {r['accuracy']:.2%}")
    
    if skipped:
        print(f"\n‚è≠Ô∏è  –ü–†–û–ü–£–©–ï–ù–û: {len(skipped)}")
        for r in skipped:
            print(f"   {r['symbol']}")
    
    if errors:
        print(f"\n‚ùå –ü–û–ú–ò–õ–ö–ò: {len(errors)}")
        for r in errors:
            print(f"   {r['symbol']:12} - {r.get('error', 'Unknown')}")
    
    print(f"\n{'='*80}")
    print(f"–í—Å—å–æ–≥–æ: {len(results)} | –£—Å–ø—ñ—Ö: {len(success)} | –ü—Ä–æ–ø—É—â–µ–Ω–æ: {len(skipped)} | –ü–æ–º–∏–ª–∫–∏: {len(errors)}")
    print(f"{'='*80}\n")
    
    if success:
        print("üéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞:")
        print("   python simple_trading_bot.py --symbols", " ".join([r['symbol'] for r in success[:6]]), "--testnet")

if __name__ == "__main__":
    try:
        asyncio.run(quick_train())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()
