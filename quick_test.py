#!/usr/bin/env python3
"""
–®–≤–∏–¥–∫–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π —Å–∏—Å—Ç–µ–º–∏
"""
import asyncio
import os
from datetime import datetime

from binance_data_loader import BinanceDataLoader
from error_handling import TradingLogger
from strategies.scalping import ScalpingStrategy
from trading.live_trading.binance_testnet import BinanceTestnetTrader


async def quick_system_test():
    """–®–≤–∏–¥–∫–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤"""
    print("üöÄ –®–í–ò–î–ö–ï –¢–ï–°–¢–£–í–ê–ù–ù–Ø –°–ò–°–¢–ï–ú–ò")
    print("=" * 40)

    # 1. –¢–µ—Å—Ç –ª–æ–≥—É–≤–∞–Ω–Ω—è
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è...")
    try:
        logger = TradingLogger("quick_test")
        logger.log_trade({"symbol": "BTCUSDT", "side": "BUY", "quantity": 0.001})
        print("‚úÖ –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è: {e}")

    # 2. –¢–µ—Å—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...")
    try:
        loader = BinanceDataLoader()
        data = loader.get_historical_klines('BTCUSDT', '1h', limit=10)
        if not data.empty:
            print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(data)} —Å–≤—ñ—á–æ–∫ BTCUSDT")
            print(f"   –û—Å—Ç–∞–Ω–Ω—è —Ü—ñ–Ω–∞: {data['close'].iloc[-1]:.2f} USDT")
        else:
            print("‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö (–º–æ–∂–ª–∏–≤–æ –ø—Ä–æ–±–ª–µ–º–∏ –∑ API)")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")

    # 3. –¢–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ—ó —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó...")
    try:
        strategy = ScalpingStrategy(['BTCUSDT'])
        print(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥—ñ—è {strategy.__class__.__name__} —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
        print(f"   –°–∏–º–≤–æ–ª–∏: {strategy.symbols}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó: {e}")

    # 4. –¢–µ—Å—Ç Binance Testnet (—è–∫—â–æ —î –∫–ª—é—á—ñ)
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Binance Testnet...")
    try:
        if os.getenv('BINANCE_TEST_API_KEY') and os.getenv('BINANCE_TEST_API_SECRET'):
            trader = BinanceTestnetTrader()
            balance = trader.get_account_balance()
            print("‚úÖ Binance Testnet –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
            print(f"   –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤—ñ–≤: {len(balance)}")

            # –ü–æ–∫–∞–∑–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ñ –∞–∫—Ç–∏–≤–∏
            for asset, amount in list(balance.items())[:5]:
                print(f"   {asset}: {amount}")

            # –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É
            try:
                btc_price = trader.get_current_price('BTCUSDT')
                print(f"   –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ BTCUSDT: {btc_price:.2f} USDT")
            except Exception as e:
                print(f"   –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É BTC: {e}")

        else:
            print("‚ö†Ô∏è –ù–µ–º–∞—î API –∫–ª—é—á—ñ–≤ Binance Testnet (BINANCE_TEST_API_KEY, BINANCE_TEST_API_SECRET)")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Binance Testnet: {e}")

    print("\n" + "=" * 40)
    print("üéØ –®–í–ò–î–ö–ï –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û")


async def test_small_trade():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–∞–ª–µ–Ω—å–∫–æ—ó —É–≥–æ–¥–∏"""
    print("\nüí∞ –¢–ï–°–¢ –ú–ê–õ–ï–ù–¨–ö–û–á –£–ì–û–î–ò")
    print("=" * 30)

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–ª—é—á—ñ–≤
        if not (os.getenv('BINANCE_TEST_API_KEY') and os.getenv('BINANCE_TEST_API_SECRET')):
            print("‚ùå –ù–µ–º–∞—î API –∫–ª—é—á—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —É–≥–æ–¥")
            return

        trader = BinanceTestnetTrader()
        balance = trader.get_account_balance()

        print(f"–ë–∞–ª–∞–Ω—Å –¥–æ —É–≥–æ–¥–∏: {balance.get('USDT', 0):.2f} USDT")

        # –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É
        btc_price = trader.get_current_price('BTCUSDT')
        print(f"–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ BTC: {btc_price:.2f} USDT")

        # –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –º–∞–ª–µ–Ω—å–∫—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å (–µ–∫–≤—ñ–≤–∞–ª–µ–Ω—Ç 1 USDT)
        quantity = 1.0 / btc_price  # ~0.000025 BTC –¥–ª—è —Ü—ñ–Ω–∏ 40000
        quantity = round(quantity, 6)  # –û–∫—Ä—É–≥–ª–µ–Ω–Ω—è –¥–ª—è BTC

        print(f"–¢–µ—Å—Ç–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {quantity} BTC (~{quantity * btc_price:.2f} USDT)")

        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        confirm = input("–í–∏–∫–æ–Ω–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤—É —É–≥–æ–¥—É? (yes/no): ")
        if confirm.lower() not in ['yes', 'y', '—Ç–∞–∫']:
            print("‚ùå –£–≥–æ–¥—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
            return

        # BUY —É–≥–æ–¥–∞
        print("üîÑ –í–∏–∫–æ–Ω–∞–Ω–Ω—è BUY —É–≥–æ–¥–∏...")
        buy_result = trader.place_market_order('BTCUSDT', 'BUY', quantity)

        if buy_result:
            print("‚úÖ BUY —É–≥–æ–¥–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞:")
            print(f"   –¶—ñ–Ω–∞: {buy_result.get('price', 'N/A')}")
            print(f"   –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {buy_result.get('quantity', 'N/A')}")
            print(f"   –°—É–º–∞: {buy_result.get('cummulativeQuoteQty', 'N/A')}")

            # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è 30 —Å–µ–∫—É–Ω–¥
            print("‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è 30 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(30)

            # SELL —É–≥–æ–¥–∞
            print("üîÑ –í–∏–∫–æ–Ω–∞–Ω–Ω—è SELL —É–≥–æ–¥–∏...")
            sell_result = trader.place_market_order('BTCUSDT', 'SELL', quantity)

            if sell_result:
                print("‚úÖ SELL —É–≥–æ–¥–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞:")
                print(f"   –¶—ñ–Ω–∞: {sell_result.get('price', 'N/A')}")
                print(f"   –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {sell_result.get('quantity', 'N/A')}")

                # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ P&L
                buy_price = float(buy_result.get('price', 0))
                sell_price = float(sell_result.get('price', 0))
                pnl = (sell_price - buy_price) * quantity

                print(f"üí∞ P&L: {pnl:.4f} USDT ({(pnl/buy_price*100):.4f}%)")

                # –ë–∞–ª–∞–Ω—Å –ø—ñ—Å–ª—è
                final_balance = trader.get_account_balance()
                print(f"–ë–∞–ª–∞–Ω—Å –ø—ñ—Å–ª—è —É–≥–æ–¥–∏: {final_balance.get('USDT', 0):.2f} USDT")

            else:
                print("‚ùå –ü–æ–º–∏–ª–∫–∞ SELL —É–≥–æ–¥–∏")
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ BUY —É–≥–æ–¥–∏")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —É–≥–æ–¥–∏: {e}")


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
    print("1. –®–≤–∏–¥–∫–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏")
    print("2. –¢–µ—Å—Ç –º–∞–ª–µ–Ω—å–∫–æ—ó —É–≥–æ–¥–∏")
    print("3. –ü–æ–≤–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (real_trading_test.py)")

    choice = input("–í–∞—à –≤–∏–±—ñ—Ä (1-3): ").strip()

    if choice == '1':
        await quick_system_test()
    elif choice == '2':
        await test_small_trade()
    elif choice == '3':
        print("–ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è...")
        os.system("python real_trading_test.py")
    else:
        print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä")


if __name__ == "__main__":
    asyncio.run(main())