#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–∏–π trading —Å–∫—Ä–∏–ø—Ç –¥–ª—è Random Forest –º–æ–¥–µ–ª–µ–π
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ç—ñ–ª—å–∫–∏ BTCUSDT (81.15% accuracy)
"""
import asyncio
import sys
import os
from datetime import datetime
from pathlib import Path
import joblib
import pandas as pd
import numpy as np
from binance.client import Client

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from training.rust_features import RustFeatureEngineer
from training.simple_trend_classifier import SimpleTrendClassifier
from telegram_bot import telegram_notifier
from websocket_manager import BinanceFuturesWebSocket
from mtf_analyzer import MultiTimeframeAnalyzer

import logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Database
try:
    from optimized.database.connection import DatabaseConnection, save_position, save_trade
    DB_AVAILABLE = True
except ImportError:
    DB_AVAILABLE = False
    logger.warning("‚ö†Ô∏è Database –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")


class SimpleTradingBot:
    """–ü—Ä–æ—Å—Ç–∏–π —Ç–æ—Ä–≥–æ–≤–∏–π –±–æ—Ç –∑ Random Forest –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏"""

    def __init__(self, symbols: list = None, testnet: bool = True, enable_trading: bool = False):
        self.symbols = symbols or ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'SOLUSDT', 'DOTUSDT']  # –û–±–º–µ–∂–µ–Ω–æ –¥–æ 6 —Å–∏–º–≤–æ–ª—ñ–≤
        self.testnet = testnet
        self.enable_trading = enable_trading  # –ß–∏ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—ñ —É–≥–æ–¥–∏

        # API –∫–ª—é—á—ñ –∑ .env
        from dotenv import load_dotenv
        load_dotenv()

        api_key = os.getenv('FUTURES_API_KEY')
        api_secret = os.getenv('FUTURES_API_SECRET')

        if not api_key or not api_secret:
            raise ValueError("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ FUTURES_API_KEY —Ç–∞ FUTURES_API_SECRET –≤ .env")

        # Binance –∫–ª—ñ—î–Ω—Ç
        self.client = Client(api_key, api_secret, testnet=testnet)
        logger.info(f"‚úÖ Binance client ({'TESTNET' if testnet else 'PRODUCTION'})")

        # –ú–æ–¥–µ–ª—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É
        self.models = {}
        self.scalers = {}
        self.feature_names_dict = {}
        self.feature_engineer = RustFeatureEngineer()

        # Multi-timeframe –∞–Ω–∞–ª—ñ–∑
        self.mtf_analyzer = MultiTimeframeAnalyzer()
        self.use_mtf = True  # –£–≤—ñ–º–∫–Ω—É—Ç–∏ MTF –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

        # WebSocket –¥–ª—è real-time –æ–Ω–æ–≤–ª–µ–Ω—å
        self.websocket = BinanceFuturesWebSocket(self.client, testnet=testnet)
        self.websocket.on_order_update = self._on_order_update
        self.websocket.on_account_update = self._on_account_update

        # –ü–æ–∑–∏—Ü—ñ—ó —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.positions = {}  # {symbol: position_data}
        self.balance = 0.0
        self.trades = []

        # üõ°Ô∏è –ó–ê–•–ò–°–¢ –í–Ü–î OVERTRADING
        self.closed_positions = {}  # {symbol: {'time': datetime, 'reason': 'SL/TP', 'pnl': float}}
        self.symbol_blacklist = {}  # {symbol: datetime} - –∫–æ–ª–∏ –º–æ–∂–Ω–∞ –∑–Ω–æ–≤—É —Ç–æ—Ä–≥—É–≤–∞—Ç–∏
        self.cooldown_after_sl = 3600  # 1 –≥–æ–¥–∏–Ω–∞ –ø—ñ—Å–ª—è SL (—Å–µ–∫—É–Ω–¥–∏)
        self.cooldown_after_tp = 1800  # 30 —Ö–≤ –ø—ñ—Å–ª—è TP (—Å–µ–∫—É–Ω–¥–∏)
        self.max_daily_losses_per_symbol = 3  # –ú–∞–∫—Å–∏–º—É–º 3 –ø—Ä–æ–≥—Ä–∞—à–Ω—ñ —É–≥–æ–¥–∏ –Ω–∞ –¥–µ–Ω—å

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è trading
        self.min_confidence = 0.80  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è (80%)
        self.position_size_usd = 50.0  # –ó–º–µ–Ω—à–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è $50
        self.stop_loss_pct = 0.02   # 2% stop-loss
        self.take_profit_pct = 0.05 # 5% take-profit
        self.leverage = 25          # –ü–ª–µ—á–µ 25x

        if enable_trading:
            logger.warning("‚ö†Ô∏è –†–ï–ê–õ–¨–ù–Ü –£–ì–û–î–ò –£–í–Ü–ú–ö–ù–ï–ù–Ü!")
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–ª–µ—á–µ –¥–ª—è –≤—Å—ñ—Ö —Å–∏–º–≤–æ–ª—ñ–≤
            for symbol in self.symbols:
                try:
                    self.client.futures_change_leverage(symbol=symbol, leverage=self.leverage)
                    logger.info(f"‚ö° {symbol}: –ø–ª–µ—á–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {self.leverage}x")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–ª–µ—á–µ –¥–ª—è {symbol}: {e}")
        else:
            logger.info("‚ÑπÔ∏è Demo —Ä–µ–∂–∏–º (—É–≥–æ–¥–∏ –Ω–µ –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è)")

    def load_models(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—Å—ñ—Ö —Å–∏–º–≤–æ–ª—ñ–≤"""
        for symbol in self.symbols:
            try:
                model_dir = Path(f'models/simple_trend_{symbol}')
                if not model_dir.exists():
                    logger.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å –¥–ª—è {symbol} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
                    continue

                # –ó–Ω–∞–π—Ç–∏ —Ñ–∞–π–ª–∏ –º–æ–¥–µ–ª—ñ
                pkl_files = list(model_dir.glob('model_*.pkl'))
                if not pkl_files:
                    logger.warning(f"‚ö†Ô∏è –§–∞–π–ª–∏ –º–æ–¥–µ–ª—ñ –¥–ª—è {symbol} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                    continue

                model_path = str(pkl_files[0])
                timeframe = pkl_files[0].stem.split('_')[-1]
                scaler_path = str(model_dir / f'scaler_{symbol}_{timeframe}.pkl')
                features_path = str(model_dir / f'features_{symbol}_{timeframe}.pkl')

                self.models[symbol] = joblib.load(model_path)
                self.scalers[symbol] = joblib.load(scaler_path)
                self.feature_names_dict[symbol] = joblib.load(features_path)

                logger.info(f"‚úÖ {symbol}: –º–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ({len(self.feature_names_dict[symbol])} features)")

            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ {symbol}: {e}")

        if not self.models:
            raise RuntimeError("‚ùå –ñ–æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞!")

        logger.info(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(self.models)}/{len(self.symbols)}")

    def round_quantity(self, symbol: str, quantity: float) -> float:
        """–û–∫—Ä—É–≥–ª–µ–Ω–Ω—è quantity –∑–≥—ñ–¥–Ω–æ –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏ Binance"""
        # –¢–∏–ø–æ–≤—ñ precision –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
        precision_map = {
            'BTCUSDT': 3,
            'ETHUSDT': 3,
            'BNBUSDT': 2,
            'SOLUSDT': 2,  # FIX: –±—É–ª–æ 1, —Ç—Ä–µ–±–∞ 2
            'ADAUSDT': 0,
            'DOGEUSDT': 0,
            'XRPUSDT': 1,
            'LTCUSDT': 3,
            'LINKUSDT': 2,
            'MATICUSDT': 0,
            'DOTUSDT': 1,
            'UNIUSDT': 2,
            'ATOMUSDT': 2,
            'ETCUSDT': 2,
            'XLMUSDT': 0,
            'ALGOUSDT': 0,
            'VETUSDT': 0,
            'FILUSDT': 2,
            'TRXUSDT': 0,
            'AVAXUSDT': 2,
        }

        precision = precision_map.get(symbol, 2)  # Default 2
        rounded = round(quantity, precision)

        # –î–ª—è precision=0 –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ int (–ë–ï–ó decimal point)
        if precision == 0:
            return int(rounded)
        return rounded

    def format_quantity_for_binance(self, symbol: str, quantity: float) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è quantity –¥–ª—è Binance API –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é precision"""
        precision_map = {
            'BTCUSDT': 3, 'ETHUSDT': 3, 'BNBUSDT': 2, 'SOLUSDT': 2,  # FIX
            'ADAUSDT': 0, 'DOGEUSDT': 0, 'XRPUSDT': 1, 'LTCUSDT': 3,
            'LINKUSDT': 2, 'MATICUSDT': 0, 'DOTUSDT': 1, 'UNIUSDT': 2,
            'ATOMUSDT': 2, 'ETCUSDT': 2, 'XLMUSDT': 0, 'ALGOUSDT': 0,
            'VETUSDT': 0, 'FILUSDT': 2, 'TRXUSDT': 0, 'AVAXUSDT': 2
        }
        precision = precision_map.get(symbol, 2)

        if precision == 0:
            return str(int(quantity))
        else:
            return f"{quantity:.{precision}f}"

    async def get_balance(self) -> float:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É"""
        try:
            account = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: self.client.futures_account()
            )
            balance = float(account['totalWalletBalance'])
            logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å: ${balance:.2f} USDT")
            return balance
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É: {e}")
            return 0.0

    async def _on_order_update(self, order_info: dict):
        """–ö–æ–ª–±–µ–∫ –¥–ª—è WebSocket order updates"""
        try:
            symbol = order_info['symbol']
            status = order_info['status']
            side = order_info['side']
            filled_qty = order_info['filled_quantity']
            avg_price = order_info['avg_price']

            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤
            if status == 'FILLED' and avg_price:
                logger.info(
                    f"üîî WS: –û—Ä–¥–µ—Ä –≤–∏–∫–æ–Ω–∞–Ω–æ - {symbol} {side} "
                    f"{filled_qty} @ ${avg_price:.2f}"
                )

                # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ Telegram
                await telegram_notifier.send_message(
                    f"üîî ORDER FILLED (WebSocket)\n"
                    f"Symbol: {symbol}\n"
                    f"Side: {side}\n"
                    f"Quantity: {filled_qty}\n"
                    f"Price: ${avg_price:.2f}\n"
                    f"Order ID: {order_info['order_id']}"
                )

            # SL/TP –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            order_type = order_info.get('order_type', '')
            if status == 'FILLED' and order_type in ['STOP_MARKET', 'TAKE_PROFIT_MARKET']:
                # –û—Ç—Ä–∏–º—É—î–º–æ PnL –ø–æ–∑–∏—Ü—ñ—ó –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä–∏—Ç—Ç—è–º
                position = await self.check_position(symbol)
                pnl = position['unrealized_pnl'] if position else 0.0

                if order_type == 'STOP_MARKET':
                    logger.warning(f"üõë WS: Stop-Loss —Å–ø—Ä–∞—Ü—é–≤–∞–≤ - {symbol} (PnL: ${pnl:+.2f})")
                    await telegram_notifier.send_message(
                        f"üõë STOP-LOSS HIT\n"
                        f"Symbol: {symbol}\n"
                        f"Price: ${avg_price:.2f}\n"
                        f"PnL: ${pnl:+.2f}"
                    )
                    # üõ°Ô∏è –î–æ–¥–∞—î–º–æ –≤ blacklist –ø—ñ—Å–ª—è SL
                    self.add_to_blacklist(symbol, 'SL', pnl)

                else:
                    logger.info(f"üéØ WS: Take-Profit —Å–ø—Ä–∞—Ü—é–≤–∞–≤ - {symbol} (PnL: ${pnl:+.2f})")
                    await telegram_notifier.send_message(
                        f"üéØ TAKE-PROFIT HIT\n"
                        f"Symbol: {symbol}\n"
                        f"Price: ${avg_price:.2f}\n"
                        f"PnL: ${pnl:+.2f}"
                    )
                    # üõ°Ô∏è –î–æ–¥–∞—î–º–æ –≤ blacklist –ø—ñ—Å–ª—è TP (–∫–æ—Ä–æ—Ç—à–∏–π cooldown)
                    self.add_to_blacklist(symbol, 'TP', pnl)

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ order update: {e}")

    async def _on_account_update(self, account_data: dict):
        """–ö–æ–ª–±–µ–∫ –¥–ª—è WebSocket account updates"""
        try:
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∑ WebSocket
            balances = account_data.get('B', [])
            for balance in balances:
                if balance['a'] == 'USDT':
                    new_balance = float(balance['wb'])
                    if abs(new_balance - self.balance) > 0.01:
                        logger.info(f"üí∞ WS: Balance –æ–Ω–æ–≤–ª–µ–Ω–æ ${new_balance:.2f}")
                        self.balance = new_balance
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ account update: {e}")

    async def get_market_data(self, symbol: str, interval: str = '4h', limit: int = 500) -> pd.DataFrame:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö"""
        try:
            klines = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: self.client.futures_klines(
                    symbol=symbol,
                    interval=interval,
                    limit=limit
                )
            )

            df = pd.DataFrame(klines, columns=[
                'timestamp', 'open', 'high', 'low', 'close', 'volume',
                'close_time', 'quote_volume', 'trades', 'taker_buy_base',
                'taker_buy_quote', 'ignore'
            ])

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —Ç–∏–ø—ñ–≤
            for col in ['open', 'high', 'low', 'close', 'volume']:
                df[col] = df[col].astype(float)

            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)

            logger.info(f"üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(df)} —Å–≤—ñ—á–æ–∫")
            return df

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
            return pd.DataFrame()

    async def get_atr(self, symbol: str, period: int = 14) -> float:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è ATR –¥–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö SL/TP"""
        try:
            df = await self.get_market_data(symbol, '1h', 100)  # 1h –¥–ª—è ATR
            if df.empty:
                return 0.01  # Default fallback

            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ ATR —á–µ—Ä–µ–∑ Rust
            df_features = self.feature_engineer.calculate_all(
                df, atr_periods=[period]
            )

            atr_col = f'atr_{period}'
            if atr_col in df_features.columns:
                current_atr = df_features[atr_col].iloc[-1]
                if pd.isna(current_atr):
                    return 0.01
                return current_atr
            else:
                logger.warning(f"‚ö†Ô∏è ATR –Ω–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ –¥–ª—è {symbol}")
                return 0.01

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É ATR –¥–ª—è {symbol}: {e}")
            return 0.01

    async def predict(self, symbol: str, df: pd.DataFrame) -> dict:
        """–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞–ø—Ä—è–º–∫—É —Ä—É—Ö—É"""
        try:
            if symbol not in self.models:
                logger.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å –¥–ª—è {symbol} –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
                return None

            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ features —á–µ—Ä–µ–∑ Rust (—Ç–æ—á–Ω–æ —è–∫ —É SimpleTrendClassifier)
            df_features = self.feature_engineer.calculate_all(
                df,
                sma_periods=[5, 10, 20, 50, 100, 200],
                ema_periods=[9, 12, 21, 26, 50],
                rsi_periods=[7, 14, 21, 28],
                atr_periods=[14, 21],
            )

            # Price relative to MAs
            for period in [5, 10, 20, 50, 100, 200]:
                ma_col = f'sma_{period}'
                if ma_col in df_features.columns:
                    df_features[f'price_vs_sma{period}'] = (df['close'] / df_features[ma_col] - 1) * 100

            # MA crossovers
            if 'sma_50' in df_features.columns and 'sma_200' in df_features.columns:
                df_features['golden_cross'] = (df_features['sma_50'] > df_features['sma_200']).astype(int)

            if 'ema_12' in df_features.columns and 'ema_26' in df_features.columns:
                df_features['macd_cross'] = (df_features['ema_12'] > df_features['ema_26']).astype(int)

            # Volume features
            if 'volume' in df.columns:
                df_features['volume_sma20'] = df['volume'].rolling(20).mean()
                df_features['volume_trend'] = df['volume'] / df_features['volume_sma20']

            # RSI levels
            if 'rsi_14' in df_features.columns:
                df_features['rsi_overbought'] = (df_features['rsi_14'] > 70).astype(int)
                df_features['rsi_oversold'] = (df_features['rsi_14'] < 30).astype(int)

            # Momentum
            df_features['momentum_5'] = df['close'].pct_change(5) * 100
            df_features['momentum_10'] = df['close'].pct_change(10) * 100
            df_features['momentum_20'] = df['close'].pct_change(20) * 100

            # Volatility
            df_features['volatility_20'] = df['close'].rolling(20).std() / df['close'].rolling(20).mean() * 100

            # –û—á–∏—Å—Ç–∫–∞ NaN
            df_features = df_features.dropna()

            if len(df_features) < 10:
                logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É")
                return None

            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ features, —è–∫—ñ –±—É–ª–∏ –ø—Ä–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—ñ
            feature_names = self.feature_names_dict[symbol]
            missing_features = [f for f in feature_names if f not in df_features.columns]
            if missing_features:
                logger.warning(f"‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ features –¥–ª—è {symbol}: {missing_features[:5]}...")
                return None

            # –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫ –∑ –ø–æ—Ç—Ä—ñ–±–Ω–∏–º–∏ features
            X = df_features[feature_names].iloc[-1:].values

            # –°–∫–∞–ª—é–≤–∞–Ω–Ω—è
            X_scaled = self.scalers[symbol].transform(X)

            # –ü—Ä–æ–≥–Ω–æ–∑
            prediction = self.models[symbol].predict(X_scaled)[0]
            proba = self.models[symbol].predict_proba(X_scaled)[0]

            current_price = df['close'].iloc[-1]

            result = {
                'symbol': symbol,
                'prediction': 'UP' if prediction == 1 else 'DOWN',
                'confidence': max(proba),
                'proba_down': proba[0],
                'proba_up': proba[1] if len(proba) > 1 else 0,
                'current_price': current_price,
                'timestamp': datetime.now()
            }

            logger.info(
                f"ü§ñ {symbol}: {result['prediction']} "
                f"(confidence: {result['confidence']:.2%}, "
                f"price: ${current_price:.2f})"
            )

            return result

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É {symbol}: {e}", exc_info=True)
            return None

    async def predict_mtf(self, symbol: str) -> dict:
        """
        Multi-timeframe –ø—Ä–æ–≥–Ω–æ–∑
        –ê–Ω–∞–ª—ñ–∑—É—î 4h, 1h, 15m —ñ –∫–æ–º–±—ñ–Ω—É—î —Å–∏–≥–Ω–∞–ª–∏
        """
        try:
            if not self.use_mtf:
                # –Ø–∫—â–æ MTF –≤–∏–º–∫–Ω–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑
                df = await self.get_market_data(symbol, interval='4h')
                return await self.predict(symbol, df)

            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –≤—Å—ñ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤
            timeframes = ['4h', '1h', '15m']
            predictions = {}

            for tf in timeframes:
                df = await self.get_market_data(symbol, interval=tf, limit=1000)

                if df.empty:
                    logger.warning(f"‚ö†Ô∏è {symbol} {tf}: –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö")
                    continue

                pred = await self.predict(symbol, df)
                if pred:
                    predictions[tf] = pred

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤—Å—ñ—Ö –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤
            if len(predictions) < 3:
                logger.warning(f"‚ö†Ô∏è {symbol}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ MTF –¥–∞–Ω–∏—Ö ({len(predictions)}/3)")
                # Fallback –Ω–∞ 4h —è–∫—â–æ —î
                return predictions.get('4h')

            # –ö–æ–º–±—ñ–Ω—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ MTF –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä
            mtf_result = self.mtf_analyzer.analyze(predictions, require_alignment=True)

            if not mtf_result:
                logger.info(f"‚ö†Ô∏è {symbol}: MTF –Ω–µ –¥–∞–≤ —á—ñ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É")
                return None

            return mtf_result

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ MTF –ø—Ä–æ–≥–Ω–æ–∑—É {symbol}: {e}", exc_info=True)
            return None

    async def check_position(self, symbol: str) -> dict:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó"""
        try:
            positions = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: self.client.futures_position_information(symbol=symbol)
            )

            for pos in positions:
                if pos['symbol'] == symbol:
                    amt = float(pos['positionAmt'])
                    if abs(amt) > 0.0001:  # –ü–æ–∑–∏—Ü—ñ—è –≤—ñ–¥–∫—Ä–∏—Ç–∞
                        return {
                            'symbol': symbol,
                            'amount': amt,
                            'entry_price': float(pos['entryPrice']),
                            'unrealized_pnl': float(pos['unRealizedProfit']),
                            'side': 'LONG' if amt > 0 else 'SHORT'
                        }

            return None

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–∑–∏—Ü—ñ—ó {symbol}: {e}")
            return None

    def is_symbol_blacklisted(self, symbol: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Å–∏–º–≤–æ–ª –≤ blacklist"""
        if symbol not in self.symbol_blacklist:
            return False

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º–∏–Ω—É–≤ cooldown –ø–µ—Ä—ñ–æ–¥
        blacklist_until = self.symbol_blacklist[symbol]
        now = datetime.now()

        if now >= blacklist_until:
            # Cooldown –º–∏–Ω—É–≤, –≤–∏–¥–∞–ª—è—î–º–æ –∑ blacklist
            del self.symbol_blacklist[symbol]
            logger.info(f"‚úÖ {symbol}: cooldown –ø–µ—Ä—ñ–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return False

        # –©–µ –≤ blacklist
        remaining = (blacklist_until - now).total_seconds() / 60
        logger.info(f"‚è∏Ô∏è {symbol}: –≤ cooldown —â–µ {remaining:.1f} —Ö–≤")
        return True

    def add_to_blacklist(self, symbol: str, reason: str, pnl: float):
        """–î–æ–¥–∞—Ç–∏ —Å–∏–º–≤–æ–ª –≤ blacklist –ø—ñ—Å–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó"""
        from datetime import datetime, timedelta

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å cooldown
        if reason == 'SL' or pnl < 0:
            cooldown_seconds = self.cooldown_after_sl  # 1 –≥–æ–¥–∏–Ω–∞ –ø—ñ—Å–ª—è SL
            cooldown_label = "1 –≥–æ–¥–∏–Ω–∞"
        else:
            cooldown_seconds = self.cooldown_after_tp  # 30 —Ö–≤ –ø—ñ—Å–ª—è TP
            cooldown_label = "30 —Ö–≤"

        blacklist_until = datetime.now() + timedelta(seconds=cooldown_seconds)
        self.symbol_blacklist[symbol] = blacklist_until

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –∑–∞–∫—Ä–∏—Ç–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
        if symbol not in self.closed_positions:
            self.closed_positions[symbol] = []

        self.closed_positions[symbol].append({
            'time': datetime.now(),
            'reason': reason,
            'pnl': pnl
        })

        logger.warning(f"üö´ {symbol}: –¥–æ–¥–∞–Ω–æ –≤ blacklist –Ω–∞ {cooldown_label} (reason: {reason}, PnL: ${pnl:+.2f})")

    def get_daily_losses_count(self, symbol: str) -> int:
        """–ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–æ–≥—Ä–∞—à–Ω–∏—Ö —É–≥–æ–¥ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"""
        if symbol not in self.closed_positions:
            return 0

        from datetime import datetime, timedelta
        today_start = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)

        losses_today = [
            pos for pos in self.closed_positions[symbol]
            if pos['time'] >= today_start and pos['pnl'] < 0
        ]

        return len(losses_today)

    async def open_long_position(self, symbol: str, price: float, confidence: float):
        """–í—ñ–¥–∫—Ä–∏—Ç—Ç—è LONG –ø–æ–∑–∏—Ü—ñ—ó"""
        try:
            # üõ°Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ blacklist
            if self.is_symbol_blacklisted(symbol):
                logger.warning(f"‚è∏Ô∏è {symbol}: –≤ cooldown –ø–µ—Ä—ñ–æ–¥—ñ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
                return False

            # üõ°Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–µ–Ω–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É –ø—Ä–æ–≥—Ä–∞—à—ñ–≤
            daily_losses = self.get_daily_losses_count(symbol)
            if daily_losses >= self.max_daily_losses_per_symbol:
                logger.warning(f"üö´ {symbol}: –¥–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç –ø—Ä–æ–≥—Ä–∞—à—ñ–≤ –∑–∞ –¥–µ–Ω—å ({daily_losses}/{self.max_daily_losses_per_symbol})")
                return False

            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó: $500 –ø–æ–∑–∏—Ü—ñ—è –∑ leverage 25x
            # Margin = $500 / 25 = $20
            position_value = self.position_size_usd  # $500
            margin_required = position_value / self.leverage  # $20
            quantity = position_value / price
            quantity = self.round_quantity(symbol, quantity)  # –û–∫—Ä—É–≥–ª–µ–Ω–Ω—è

            if quantity * price < 10:  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ —É–≥–æ–¥–∏ $10
                logger.warning(f"‚ö†Ô∏è –ó–∞–Ω–∞–¥—Ç–æ –º–∞–ª–µ–Ω—å–∫–∞ —Å—É–º–∞: ${quantity * price:.2f}")
                return False

            logger.info(f"üìà –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ LONG {symbol}: {quantity} @ ${price:.2f}")
            logger.info(f"   Margin: ${margin_required:.2f} | Position: ${position_value:.2f} ({self.leverage}x)")

            if not self.enable_trading:
                logger.info("‚ÑπÔ∏è Demo —Ä–µ–∂–∏–º - —É–≥–æ–¥–∞ –ù–ï –≤–∏–∫–æ–Ω–∞–Ω–∞")
                await telegram_notifier.send_message(
                    f"üìà DEMO BUY Signal\n"
                    f"Symbol: {symbol}\n"
                    f"Price: ${price:.2f}\n"
                    f"Quantity: {quantity:.6f}\n"
                    f"Confidence: {confidence:.2%}"
                )
                return False

            # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞
            quantity_str = self.format_quantity_for_binance(symbol, quantity)

            order = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: self.client.futures_create_order(
                    symbol=symbol,
                    side='BUY',
                    type='MARKET',
                    quantity=quantity_str
                )
            )

            logger.info(f"‚úÖ –û—Ä–¥–µ—Ä –≤–∏–∫–æ–Ω–∞–Ω–æ: {order['orderId']}")

            # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∞–ª—å–Ω—É —Ü—ñ–Ω—É –∑ –ø–æ–∑–∏—Ü—ñ—ó (—Ç—Ä–µ–±–∞ –ø–æ—á–µ–∫–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è)
            await asyncio.sleep(1.5)  # –ó–±—ñ–ª—å—à–µ–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è Testnet

            position_info = await self.check_position(symbol)
            if position_info and position_info['entry_price'] > 0:
                filled_price = position_info['entry_price']
                filled_qty = abs(position_info['amount'])
                logger.info(f"üí∞ –û—Ç—Ä–∏–º–∞–Ω–æ –∑ –ø–æ–∑–∏—Ü—ñ—ó: {filled_qty:.6f} @ ${filled_price:.2f}")
            else:
                # Fallback: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
                filled_price = price
                filled_qty = quantity
                logger.warning(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü—ñ—è —â–µ –Ω–µ –æ–Ω–æ–≤–∏–ª–∞—Å—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–≤—ñ: {filled_qty:.6f} @ ${filled_price:.2f}")

            # Stop-loss —ñ Take-profit —Ü—ñ–Ω–∏ (–¥–∏–Ω–∞–º—ñ—á–Ω—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ ATR)
            atr = await self.get_atr(symbol, 14)
            sl_distance = 2.0 * atr  # 2 ATR –¥–ª—è SL
            tp_distance = 4.0 * atr  # 4 ATR –¥–ª—è TP

            sl_price = filled_price - sl_distance  # –î–ª—è LONG: –Ω–∏–∂—á–µ entry
            tp_price = filled_price + tp_distance  # –î–ª—è LONG: –≤–∏—â–µ entry

            # –í–∏—Å—Ç–∞–≤–ª—è—î–º–æ STOP_MARKET –¥–ª—è SL
            try:
                sl_order = await asyncio.get_event_loop().run_in_executor(
                    None,
                    lambda: self.client.futures_create_order(
                        symbol=symbol,
                        side='SELL',
                        type='STOP_MARKET',
                        stopPrice=round(sl_price, 2),
                        quantity=self.format_quantity_for_binance(symbol, filled_qty),
                        closePosition=False
                    )
                )
                logger.info(f"üõë Stop-loss –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–æ: ${sl_price:.2f} (orderId: {sl_order['orderId']})")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–Ω—è SL: {e}")

            # –í–∏—Å—Ç–∞–≤–ª—è—î–º–æ TAKE_PROFIT_MARKET –¥–ª—è TP
            try:
                tp_order = await asyncio.get_event_loop().run_in_executor(
                    None,
                    lambda: self.client.futures_create_order(
                        symbol=symbol,
                        side='SELL',
                        type='TAKE_PROFIT_MARKET',
                        stopPrice=round(tp_price, 2),
                        quantity=self.format_quantity_for_binance(symbol, filled_qty),
                        closePosition=False
                    )
                )
                logger.info(f"üéØ Take-profit –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–æ: ${tp_price:.2f} (orderId: {tp_order['orderId']})")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–Ω—è TP: {e}")

            logger.info(f"üõë Stop-loss: ${sl_price:.2f}")
            logger.info(f"üéØ Take-profit: ${tp_price:.2f}")

            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è Telegram
            position_value = filled_qty * filled_price
            margin_used = position_value / self.leverage

            # Telegram notification
            await telegram_notifier.send_message(
                f"‚úÖ OPENED LONG\n"
                f"Symbol: {symbol}\n"
                f"Entry: ${filled_price:.2f}\n"
                f"Quantity: {filled_qty:.6f}\n"
                f"Position: ${position_value:.2f}\n"
                f"Margin: ${margin_used:.2f} ({self.leverage}x)\n"
                f"SL: ${sl_price:.2f} (-{self.stop_loss_pct*100:.1f}%)\n"
                f"TP: ${tp_price:.2f} (+{self.take_profit_pct*100:.1f}%)\n"
                f"Confidence: {confidence:.2%}"
            )

            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î
            if DB_AVAILABLE:
                try:
                    db = DatabaseConnection()
                    await save_position(db, {
                        'symbol': symbol,
                        'side': 'LONG',
                        'entry_price': filled_price,
                        'quantity': filled_qty,
                        'stop_loss': sl_price,
                        'take_profit': tp_price,
                        'status': 'open',
                        'strategy': 'ML_4h',
                        'entry_time': datetime.now(),
                        'signal_id': None,
                        'metadata': {
                            'confidence': float(confidence),  # numpy.float64 ‚Üí float
                            'leverage': self.leverage
                        }
                    })
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î: {e}")

            return True

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó {symbol}: {e}", exc_info=True)
            await telegram_notifier.send_message(f"‚ùå ERROR opening {symbol}: {str(e)[:100]}")
            return False

    async def open_short_position(self, symbol: str, price: float, confidence: float):
        """–í—ñ–¥–∫—Ä–∏—Ç—Ç—è SHORT –ø–æ–∑–∏—Ü—ñ—ó (–ø—Ä–æ–¥–∞–∂ –Ω–∞ –∑–Ω–∏–∂–µ–Ω–Ω—è)"""
        try:
            # üõ°Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ blacklist
            if self.is_symbol_blacklisted(symbol):
                logger.warning(f"‚è∏Ô∏è {symbol}: –≤ cooldown –ø–µ—Ä—ñ–æ–¥—ñ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
                return False

            # üõ°Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–µ–Ω–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É –ø—Ä–æ–≥—Ä–∞—à—ñ–≤
            daily_losses = self.get_daily_losses_count(symbol)
            if daily_losses >= self.max_daily_losses_per_symbol:
                logger.warning(f"üö´ {symbol}: –¥–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç –ø—Ä–æ–≥—Ä–∞—à—ñ–≤ –∑–∞ –¥–µ–Ω—å ({daily_losses}/{self.max_daily_losses_per_symbol})")
                return False

            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó: $500 –ø–æ–∑–∏—Ü—ñ—è –∑ leverage 25x
            position_value = self.position_size_usd  # $500
            margin_required = position_value / self.leverage  # $20
            quantity = position_value / price
            quantity = self.round_quantity(symbol, quantity)  # –û–∫—Ä—É–≥–ª–µ–Ω–Ω—è

            # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —É–≥–æ–¥–∞ $10
            if position_value < 10:
                logger.warning(f"‚ö†Ô∏è {symbol}: —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó ${position_value:.2f} < $10, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
                return False

            logger.info(f"üìâ –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ SHORT {symbol}: {quantity:.6f} @ ${price:.2f}")
            logger.info(f"   Margin: ${margin_required:.2f} | Position: ${position_value:.2f} ({self.leverage}x)")
            logger.info(f"   Confidence: {confidence:.2%}")

            if not self.enable_trading:
                logger.info("‚ÑπÔ∏è Demo —Ä–µ–∂–∏–º - —É–≥–æ–¥–∞ –ù–ï –≤–∏–∫–æ–Ω–∞–Ω–∞")
                await telegram_notifier.send_message(
                    f"üìâ DEMO SHORT Signal\n"
                    f"Symbol: {symbol}\n"
                    f"Price: ${price:.2f}\n"
                    f"Quantity: {quantity:.6f}\n"
                    f"Margin: ${margin_required:.2f}\n"
                    f"Position: ${position_value:.2f} ({self.leverage}x)\n"
                    f"Confidence: {confidence:.2%}"
                )
                return False

            # –í–∏–∫–æ–Ω–∞–Ω–Ω—è SELL –æ—Ä–¥–µ—Ä–∞
            quantity_str = self.format_quantity_for_binance(symbol, quantity)

            order = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: self.client.futures_create_order(
                    symbol=symbol,
                    side='SELL',
                    type='MARKET',
                    quantity=quantity_str
                )
            )

            logger.info(f"‚úÖ SHORT –≤—ñ–¥–∫—Ä–∏—Ç–æ: {order['orderId']}")

            # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∞–ª—å–Ω—É —Ü—ñ–Ω—É –∑ –ø–æ–∑–∏—Ü—ñ—ó (–∑ –±—ñ–ª—å—à–æ—é –∑–∞—Ç—Ä–∏–º–∫–æ—é –¥–ª—è Testnet)
            await asyncio.sleep(1.5)  # –ó–±—ñ–ª—å—à–µ–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞

            position_info = await self.check_position(symbol)
            if position_info and position_info['entry_price'] > 0:
                filled_price = position_info['entry_price']
                filled_qty = abs(position_info['amount'])
                logger.info(f"üí∞ –û—Ç—Ä–∏–º–∞–Ω–æ –∑ –ø–æ–∑–∏—Ü—ñ—ó: {filled_qty:.6f} @ ${filled_price:.2f}")
            else:
                filled_price = price
                filled_qty = quantity
                logger.warning(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü—ñ—è —â–µ –Ω–µ –æ–Ω–æ–≤–∏–ª–∞—Å—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è")

            # SL/TP –¥–ª—è SHORT (–¥–∏–Ω–∞–º—ñ—á–Ω—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ ATR)
            atr = await self.get_atr(symbol, 14)
            sl_distance = 2.0 * atr  # 2 ATR –¥–ª—è SL
            tp_distance = 4.0 * atr  # 4 ATR –¥–ª—è TP

            sl_price = filled_price + sl_distance  # –î–ª—è SHORT: –≤–∏—â–µ entry
            tp_price = filled_price - tp_distance  # –î–ª—è SHORT: –Ω–∏–∂—á–µ entry

            # –í–∏—Å—Ç–∞–≤–ª—è—î–º–æ STOP_MARKET –¥–ª—è SL (BUY to close SHORT)
            try:
                sl_order = await asyncio.get_event_loop().run_in_executor(
                    None,
                    lambda: self.client.futures_create_order(
                        symbol=symbol,
                        side='BUY',  # BUY –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è SHORT
                        type='STOP_MARKET',
                        stopPrice=round(sl_price, 2),
                        quantity=self.format_quantity_for_binance(symbol, filled_qty),
                        closePosition=False
                    )
                )
                logger.info(f"üõë Stop-loss –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–æ: ${sl_price:.2f} (orderId: {sl_order['orderId']})")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–Ω—è SL: {e}")

            # –í–∏—Å—Ç–∞–≤–ª—è—î–º–æ TAKE_PROFIT_MARKET –¥–ª—è TP (BUY to close SHORT)
            try:
                tp_order = await asyncio.get_event_loop().run_in_executor(
                    None,
                    lambda: self.client.futures_create_order(
                        symbol=symbol,
                        side='BUY',  # BUY –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è SHORT
                        type='TAKE_PROFIT_MARKET',
                        stopPrice=round(tp_price, 2),
                        quantity=self.format_quantity_for_binance(symbol, filled_qty),
                        closePosition=False
                    )
                )
                logger.info(f"üéØ Take-profit –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–æ: ${tp_price:.2f} (orderId: {tp_order['orderId']})")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–Ω—è TP: {e}")

            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è Telegram
            position_value = filled_qty * filled_price
            margin_used = position_value / self.leverage

            # Telegram notification
            await telegram_notifier.send_message(
                f"üìâ SHORT OPENED\n"
                f"Symbol: {symbol}\n"
                f"Entry: ${filled_price:.2f}\n"
                f"Quantity: {filled_qty:.6f}\n"
                f"Position: ${position_value:.2f}\n"
                f"Margin: ${margin_used:.2f} ({self.leverage}x)\n"
                f"SL: ${sl_price:.2f} (+{self.stop_loss_pct*100:.1f}%)\n"
                f"TP: ${tp_price:.2f} (-{self.take_profit_pct*100:.1f}%)\n"
                f"Confidence: {confidence:.2%}"
            )

            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î
            if DB_AVAILABLE:
                try:
                    db = DatabaseConnection()
                    await save_position(db, {
                        'symbol': symbol,
                        'side': 'SHORT',
                        'entry_price': filled_price,
                        'quantity': filled_qty,
                        'stop_loss': sl_price,
                        'take_profit': tp_price,
                        'status': 'open',
                        'strategy': 'ML_4h',
                        'entry_time': datetime.now(),
                        'signal_id': None,
                        'metadata': {
                            'confidence': float(confidence),  # numpy.float64 ‚Üí float
                            'leverage': self.leverage
                        }
                    })
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î: {e}")

            return True

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è SHORT {symbol}: {e}", exc_info=True)
            await telegram_notifier.send_message(f"‚ùå ERROR opening SHORT {symbol}: {str(e)[:100]}")
            return False

    async def close_long_position(self, symbol: str, position: dict, price: float, reason: str):
        """–ó–∞–∫—Ä–∏—Ç—Ç—è LONG –ø–æ–∑–∏—Ü—ñ—ó"""
        try:
            quantity = abs(position['amount'])
            entry_price = position['entry_price']
            pnl = position['unrealized_pnl']

            logger.info(f"üìâ –ó–∞–∫—Ä–∏–≤–∞—î–º–æ LONG {symbol}: {quantity} @ ${price:.2f} (PnL: ${pnl:.2f})")

            if not self.enable_trading:
                logger.info("‚ÑπÔ∏è Demo —Ä–µ–∂–∏–º - —É–≥–æ–¥–∞ –ù–ï –≤–∏–∫–æ–Ω–∞–Ω–∞")
                await telegram_notifier.send_message(
                    f"üìâ DEMO SELL Signal\n"
                    f"Symbol: {symbol}\n"
                    f"Price: ${price:.2f}\n"
                    f"PnL: ${pnl:.2f}\n"
                    f"Reason: {reason}"
                )
                return False

            # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞
            quantity_str = self.format_quantity_for_binance(symbol, quantity)

            order = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: self.client.futures_create_order(
                    symbol=symbol,
                    side='SELL',
                    type='MARKET',
                    quantity=quantity_str
                )
            )

            logger.info(f"‚úÖ –ü–æ–∑–∏—Ü—ñ—é –∑–∞–∫—Ä–∏—Ç–æ: {order['orderId']}")

            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ P&L %
            pnl_pct = ((price - entry_price) / entry_price) * 100

            # Telegram notification
            emoji = "üí∞" if pnl > 0 else "üìâ"
            await telegram_notifier.send_message(
                f"{emoji} CLOSED LONG\n"
                f"Symbol: {symbol}\n"
                f"Entry: ${entry_price:.2f}\n"
                f"Exit: ${price:.2f}\n"
                f"PnL: ${pnl:.2f} ({pnl_pct:+.2f}%)\n"
                f"Reason: {reason}"
            )

            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î
            if DB_AVAILABLE:
                try:
                    db = DatabaseConnection()
                    await save_trade(db, {
                        'symbol': symbol,
                        'side': 'LONG',
                        'entry_price': entry_price,
                        'exit_price': price,
                        'quantity': quantity,
                        'entry_time': None,  # TODO: –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –∑ position
                        'exit_time': datetime.now(),
                        'pnl': pnl,
                        'pnl_percentage': pnl_pct,
                        'strategy': 'ML_4h',
                        'exit_reason': reason,
                        'position_id': None,
                        'signal_id': None,
                        'fees': 0.0,
                        'metadata': {}
                    })
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î: {e}")

            return True

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó {symbol}: {e}", exc_info=True)
            await telegram_notifier.send_message(f"‚ùå ERROR closing {symbol}: {str(e)[:100]}")
            return False

    async def close_short_position(self, symbol: str, position: dict, price: float, reason: str):
        """–ó–∞–∫—Ä–∏—Ç—Ç—è SHORT –ø–æ–∑–∏—Ü—ñ—ó"""
        try:
            quantity = abs(position['amount'])
            entry_price = position['entry_price']
            pnl = position['unrealized_pnl']

            logger.info(f"üìà –ó–∞–∫—Ä–∏–≤–∞—î–º–æ SHORT {symbol}: {quantity} @ ${price:.2f} (PnL: ${pnl:.2f})")

            if not self.enable_trading:
                logger.info("‚ÑπÔ∏è Demo —Ä–µ–∂–∏–º - —É–≥–æ–¥–∞ –ù–ï –≤–∏–∫–æ–Ω–∞–Ω–∞")
                await telegram_notifier.send_message(
                    f"üìà DEMO BUY to Close SHORT\n"
                    f"Symbol: {symbol}\n"
                    f"Price: ${price:.2f}\n"
                    f"PnL: ${pnl:.2f}\n"
                    f"Reason: {reason}"
                )
                return False

            # –í–∏–∫–æ–Ω–∞–Ω–Ω—è BUY –æ—Ä–¥–µ—Ä–∞ (–∑–∞–∫—Ä–∏–≤–∞—î–º–æ SHORT)
            quantity_str = self.format_quantity_for_binance(symbol, quantity)

            order = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: self.client.futures_create_order(
                    symbol=symbol,
                    side='BUY',
                    type='MARKET',
                    quantity=quantity_str
                )
            )

            logger.info(f"‚úÖ SHORT –∑–∞–∫—Ä–∏—Ç–æ: {order['orderId']}")

            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ P&L %
            pnl_pct = ((entry_price - price) / entry_price) * 100  # –ü—Ä–æ—Ç–∏–ª–µ–∂–Ω–æ LONG

            # Telegram notification
            await telegram_notifier.send_message(
                f"üìà SHORT CLOSED\n"
                f"Symbol: {symbol}\n"
                f"Entry: ${entry_price:.2f}\n"
                f"Exit: ${price:.2f}\n"
                f"PnL: ${pnl:.2f} ({pnl_pct:+.2f}%)\n"
                f"Reason: {reason}"
            )

            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î
            if DB_AVAILABLE:
                try:
                    db = DatabaseConnection()
                    await save_trade(db, {
                        'symbol': symbol,
                        'side': 'SHORT',
                        'entry_price': entry_price,
                        'exit_price': price,
                        'quantity': quantity,
                        'entry_time': None,
                        'exit_time': datetime.now(),
                        'pnl': pnl,
                        'pnl_percentage': pnl_pct,
                        'strategy': 'ML_4h',
                        'exit_reason': reason,
                        'position_id': None,
                        'signal_id': None,
                        'fees': 0.0,
                        'metadata': {}
                    })
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î: {e}")

            return True

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è SHORT {symbol}: {e}", exc_info=True)
            await telegram_notifier.send_message(f"‚ùå ERROR closing SHORT {symbol}: {str(e)[:100]}")
            return False

    async def run_single_check(self):
        """–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è –¥–µ–º–æ —Ä–µ–∂–∏–º—É"""
        try:
            logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –ø–æ–∑–∏—Ü—ñ–π...")

            total_positions = 0
            total_pnl = 0.0

            for symbol in self.symbols:
                try:
                    position = await self.check_position(symbol)
                    if position:
                        total_positions += 1
                        total_pnl += position['unrealized_pnl']

                        side_emoji = "üìà" if position['side'] == 'LONG' else "üìâ"
                        pnl_emoji = "üí∞" if position['unrealized_pnl'] > 0 else "üìâ"

                        logger.info(
                            f"{side_emoji} {symbol}: {position['side']} "
                            f"{abs(position['amount']):.4f} @ ${position['entry_price']:.2f} "
                            f"PnL: {pnl_emoji} ${position['unrealized_pnl']:+.2f}"
                        )
                    else:
                        logger.info(f"‚ö™ {symbol}: –Ω–µ–º–∞—î –ø–æ–∑–∏—Ü—ñ—ó")

                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ {symbol}: {e}")

            if total_positions > 0:
                logger.info(f"\nüìä –ü—ñ–¥—Å—É–º–æ–∫: {total_positions} –ø–æ–∑–∏—Ü—ñ–π, –∑–∞–≥–∞–ª—å–Ω–∏–π PnL: ${total_pnl:+.2f}")
            else:
                logger.info("\n‚úÖ –ù–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π")

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ run_single_check: {e}")

    async def run(self, interval_seconds: int = 3600):
        """–ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª"""
        logger.info("=" * 60)
        logger.info(f"üöÄ –ó–ê–ü–£–°–ö TRADING BOT")
        logger.info(f"–°–∏–º–≤–æ–ª–∏: {', '.join(self.symbols)}")
        logger.info(f"MTF –∞–Ω–∞–ª—ñ–∑: {'‚úÖ –£–í–Ü–ú–ö–ù–ï–ù–û' if self.use_mtf else '‚ùå –í–ò–ú–ö–ù–ï–ù–û'}")
        logger.info("=" * 60)

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π
        self.load_models()

        # –ó–∞–ø—É—Å–∫ WebSocket –¥–ª—è real-time –æ–Ω–æ–≤–ª–µ–Ω—å
        if self.enable_trading:
            logger.info("üîå –ó–∞–ø—É—Å–∫ WebSocket...")
            await self.websocket.start()
            await asyncio.sleep(2)  # –î–∞—Ç–∏ —á–∞—Å –Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è

        # Telegram —Å—Ç–∞—Ä—Ç
        await telegram_notifier.send_message(
            f"üöÄ Trading Bot –∑–∞–ø—É—â–µ–Ω–æ\n"
            f"–°–∏–º–≤–æ–ª–∏: {', '.join(self.symbols)}\n"
            f"–†–µ–∂–∏–º: {'üî¥ –†–ï–ê–õ–¨–ù–Ü –£–ì–û–î–ò' if self.enable_trading else 'üü° DEMO'}\n"
            f"Min confidence: {self.min_confidence:.0%}\n"
            f"–†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó: ${self.position_size_usd} (leverage {self.leverage}x)\n"
            f"Margin –Ω–∞ —É–≥–æ–¥—É: ${self.position_size_usd / self.leverage:.2f}\n"
            f"MTF –∞–Ω–∞–ª—ñ–∑: {'‚úÖ' if self.use_mtf else '‚ùå'}\n"
            f"WebSocket: {'‚úÖ' if self.enable_trading else '‚ùå'}\n"
            f"\nüõ°Ô∏è –ó–ê–•–ò–°–¢ –í–Ü–î OVERTRADING:\n"
            f"‚Ä¢ Cooldown –ø—ñ—Å–ª—è SL: {self.cooldown_after_sl / 60:.0f} —Ö–≤\n"
            f"‚Ä¢ Cooldown –ø—ñ—Å–ª—è TP: {self.cooldown_after_tp / 60:.0f} —Ö–≤\n"
            f"‚Ä¢ Max –≤—Ç—Ä–∞—Ç/–¥–µ–Ω—å: {self.max_daily_losses_per_symbol}"
        )

        # –ë–∞–ª–∞–Ω—Å
        self.balance = await self.get_balance()

        iteration = 0

        try:
            while True:
                iteration += 1
                logger.info(f"\n{'='*60}")
                logger.info(f"üîÑ –Ü—Ç–µ—Ä–∞—Ü—ñ—è #{iteration} - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                logger.info(f"{'='*60}")

                try:
                    # –û–±—Ä–æ–±–∫–∞ –∫–æ–∂–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É
                    for symbol in self.symbols:
                        if symbol not in self.models:
                            continue

                        logger.info(f"\n--- {symbol} ---")

                        # üõ°Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ blacklist status
                        if symbol in self.symbol_blacklist:
                            remaining = (self.symbol_blacklist[symbol] - datetime.now()).total_seconds() / 60
                            if remaining > 0:
                                logger.info(f"‚è∏Ô∏è –í cooldown —â–µ {remaining:.0f} —Ö–≤")
                                continue

                        # –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç –ø—Ä–æ–≥—Ä–∞—à—ñ–≤
                        daily_losses = self.get_daily_losses_count(symbol)
                        if daily_losses > 0:
                            logger.info(f"üìä –ü—Ä–æ–≥—Ä–∞—à—ñ–≤ —Å—å–æ–≥–æ–¥–Ω—ñ: {daily_losses}/{self.max_daily_losses_per_symbol}")

                        # 1. MTF –ü—Ä–æ–≥–Ω–æ–∑ (–∞–±–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —è–∫—â–æ MTF –≤–∏–º–∫–Ω–µ–Ω–æ)
                        prediction = await self.predict_mtf(symbol)
                        if not prediction:
                            logger.warning(f"‚ö†Ô∏è {symbol}: –ø—Ä–æ–≥–Ω–æ–∑ –Ω–µ –≤–¥–∞–≤—Å—è")
                            continue

                        # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–∑–∏—Ü—ñ—ó
                        position = await self.check_position(symbol)

                        if position:
                            logger.info(f"üìä –ü–æ–∑–∏—Ü—ñ—è: {position['side']} {abs(position['amount']):.6f} @ ${position['entry_price']:.2f}")
                            logger.info(f"üí∞ P&L: ${position['unrealized_pnl']:.2f}")
                        else:
                            logger.info("‚ÑπÔ∏è –ü–æ–∑–∏—Ü—ñ–π –Ω–µ–º–∞—î")

                        # 4. –¢–æ—Ä–≥–æ–≤–∞ –ª–æ–≥—ñ–∫–∞
                        current_price = prediction['current_price']

                        if prediction['confidence'] >= self.min_confidence:
                            # UP —Å–∏–≥–Ω–∞–ª
                            if prediction['prediction'] == 'UP':
                                if not position:
                                    logger.info(f"üìà –°–ò–ì–ù–ê–õ BUY LONG (confidence: {prediction['confidence']:.2%})")
                                    await self.open_long_position(symbol, current_price, prediction['confidence'])
                                elif position['side'] == 'SHORT':
                                    logger.info(f"üìà –°–ò–ì–ù–ê–õ CLOSE SHORT (confidence: {prediction['confidence']:.2%})")
                                    await self.close_short_position(symbol, position, current_price, f"ML Signal (conf: {prediction['confidence']:.2%})")

                            # DOWN —Å–∏–≥–Ω–∞–ª
                            elif prediction['prediction'] == 'DOWN':
                                if not position:
                                    logger.info(f"üìâ –°–ò–ì–ù–ê–õ SELL SHORT (confidence: {prediction['confidence']:.2%})")
                                    await self.open_short_position(symbol, current_price, prediction['confidence'])
                                elif position['side'] == 'LONG':
                                    logger.info(f"üìâ –°–ò–ì–ù–ê–õ CLOSE LONG (confidence: {prediction['confidence']:.2%})")
                                    await self.close_long_position(symbol, position, current_price, f"ML Signal (conf: {prediction['confidence']:.2%})")
                        else:
                            logger.info(f"‚è∏Ô∏è HOLD (–Ω–∏–∑—å–∫–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {prediction['confidence']:.2%})")

                    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–æ–∂–Ω—ñ 5 —ñ—Ç–µ—Ä–∞—Ü—ñ–π
                    if iteration % 5 == 0:
                        self.balance = await self.get_balance()

                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —ñ—Ç–µ—Ä–∞—Ü—ñ—ó: {e}", exc_info=True)

                # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è
                logger.info(f"‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è {interval_seconds}—Å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏...")
                await asyncio.sleep(interval_seconds)

        except KeyboardInterrupt:
            logger.info("\nüõë –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞ (Ctrl+C)")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}", exc_info=True)
        finally:
            # –ó—É–ø–∏–Ω–∫–∞ WebSocket
            if self.enable_trading and self.websocket.is_running:
                logger.info("üîå –ó—É–ø–∏–Ω–∫–∞ WebSocket...")
                await self.websocket.stop()

            logger.info("üëã Trading bot –∑—É–ø–∏–Ω–µ–Ω–æ")


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    import argparse
    parser = argparse.ArgumentParser(description="Multi-Symbol Trading Bot (Random Forest)")
    parser.add_argument('--symbols', nargs='+', default=['BTCUSDT'], help='Trading pairs (space-separated)')
    parser.add_argument('--testnet', action='store_true', default=True, help='Use testnet')
    parser.add_argument('--enable-trading', action='store_true', help='Enable real trading (default: demo)')
    parser.add_argument('--interval', type=int, default=3600, help='Check interval (seconds)')
    parser.add_argument('--position-size', type=float, default=50.0, help='Position size in USD (default: 50.0)')
    parser.add_argument('--min-confidence', type=float, default=0.67, help='Minimum confidence (default: 0.67)')

    args = parser.parse_args()

    bot = SimpleTradingBot(
        symbols=args.symbols,
        testnet=args.testnet,
        enable_trading=args.enable_trading
    )
    bot.min_confidence = args.min_confidence
    bot.position_size_usd = args.position_size

    await bot.run(interval_seconds=args.interval)


if __name__ == '__main__':
    asyncio.run(main())