# -*- coding: utf-8 -*-
"""
–í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞
"""
import asyncio
import logging
import gc
import psutil
from datetime import datetime
from typing import Dict, List, Optional, Any, Callable
from dataclasses import dataclass, field
from enum import Enum
from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor

import pandas as pd
import tensorflow as tf

# ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: Lazy import –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è —Ü–∏–∫–ª—ñ—á–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
from cache_system import cache_manager, async_cached

logger = logging.getLogger(__name__)


class TaskPriority(Enum):
    """–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏ –∑–∞–¥–∞—á"""
    LOW = 1
    NORMAL = 2
    HIGH = 3
    CRITICAL = 4


class TaskStatus(Enum):
    """–°—Ç–∞—Ç—É—Å–∏ –∑–∞–¥–∞—á"""
    PENDING = "pending"
    RUNNING = "running"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"


@dataclass
class Task:
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"""
    id: str
    func: Callable
    args: tuple = field(default_factory=tuple)
    kwargs: dict = field(default_factory=dict)
    priority: TaskPriority = TaskPriority.NORMAL
    status: TaskStatus = TaskStatus.PENDING
    created_at: datetime = field(default_factory=datetime.now)
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None
    result: Any = None
    error: Optional[str] = None
    retries: int = 0
    max_retries: int = 3
    timeout: Optional[int] = None
    requires_gpu: bool = False
    memory_requirement: int = 1024  # MB
    
    def __post_init__(self):
        if not self.id:
            self.id = f"task_{int(datetime.now().timestamp() * 1000000)}"


class ResourceMonitor:
    """–ú–æ–Ω—ñ—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤"""
    
    def __init__(self):
        self.cpu_threshold = 80.0  # %
        self.memory_threshold = 85.0  # %
        self.gpu_memory_threshold = 90.0  # %
    
    def get_system_status(self) -> Dict:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Å–∏—Å—Ç–µ–º–∏"""
        try:
            cpu_percent = psutil.cpu_percent(interval=0.5)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            status = {
                'cpu_percent': cpu_percent,
                'memory_percent': memory.percent,
                'memory_available_gb': memory.available / (1024**3),
                'disk_percent': disk.percent,
                'disk_free_gb': disk.free / (1024**3),
                'gpu_info': self._get_gpu_info(),
                'timestamp': datetime.now()
            }
            
            return status
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ä–µ—Å—É—Ä—Å—ñ–≤: {e}")
            return {}
    
    def _get_gpu_info(self) -> Dict:
        """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ GPU"""
        try:
            gpus = tf.config.list_physical_devices('GPU')
            if not gpus:
                return {'available': False}
            
            gpu_info = {
                'available': True,
                'count': len(gpus),
                'details': []
            }
            
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π pynvml
            try:
                import pynvml
                pynvml.nvmlInit()
                
                for i in range(len(gpus)):
                    try:
                        handle = pynvml.nvmlDeviceGetHandleByIndex(i)
                        memory_info = pynvml.nvmlDeviceGetMemoryInfo(handle)
                        utilization = pynvml.nvmlDeviceGetUtilizationRates(handle)
                        name = pynvml.nvmlDeviceGetName(handle)
                        
                        gpu_info['details'].append({
                            'id': i,
                            'name': name.decode('utf-8') if isinstance(name, bytes) else name,
                            'memory_used_mb': memory_info.used / (1024**2),
                            'memory_total_mb': memory_info.total / (1024**2),
                            'memory_percent': (memory_info.used / memory_info.total) * 100,
                            'gpu_utilization': utilization.gpu,
                            'memory_utilization': utilization.memory
                        })
                    except Exception as e:
                        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ –ø—Ä–æ GPU {i}: {e}")
                
                pynvml.nvmlShutdown()
                
            except ImportError:
                logger.debug("pynvml –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –±–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ GPU")
                for i, gpu in enumerate(gpus):
                    gpu_info['details'].append({
                        'id': i,
                        'name': gpu.name,
                        'memory_total_mb': 'Unknown'
                    })
            
            return gpu_info
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ GPU: {e}")
            return {'available': False}
    
    def is_system_overloaded(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏"""
        status = self.get_system_status()
        
        if status.get('cpu_percent', 0) > self.cpu_threshold:
            logger.warning(f"‚ö†Ô∏è CPU –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {status['cpu_percent']:.1f}%")
            return True
        
        if status.get('memory_percent', 0) > self.memory_threshold:
            logger.warning(f"‚ö†Ô∏è –ü–∞–º'—è—Ç—å –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞: {status['memory_percent']:.1f}%")
            return True
        
        gpu_info = status.get('gpu_info', {})
        if gpu_info.get('available'):
            for gpu in gpu_info.get('details', []):
                if gpu.get('memory_percent', 0) > self.gpu_memory_threshold:
                    logger.warning(f"‚ö†Ô∏è GPU {gpu['id']} –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {gpu['memory_percent']:.1f}%")
                    return True
        
        return False
    
    def can_allocate_resources(self, memory_mb: int, requires_gpu: bool = False) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤"""
        status = self.get_system_status()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞–º'—è—Ç—ñ (–∑ –∑–∞–ø–∞—Å–æ–º 20%)
        available_memory_mb = status.get('memory_available_gb', 0) * 1024 * 0.8
        if available_memory_mb < memory_mb:
            logger.debug(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–∞–º'—è—Ç—ñ: –ø–æ—Ç—Ä—ñ–±–Ω–æ {memory_mb}MB, –¥–æ—Å—Ç—É–ø–Ω–æ {available_memory_mb:.0f}MB")
            return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ GPU
        if requires_gpu:
            gpu_info = status.get('gpu_info', {})
            if not gpu_info.get('available'):
                logger.debug("GPU –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
                return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–ª—å–Ω–æ—ó –ø–∞–º'—è—Ç—ñ GPU
            gpu_available = False
            for gpu in gpu_info.get('details', []):
                if gpu.get('memory_percent', 100) < self.gpu_memory_threshold:
                    gpu_available = True
                    break
            
            if not gpu_available:
                logger.debug("–í—Å—ñ GPU –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ")
                return False
        
        return True


class TaskQueue:
    """–ß–µ—Ä–≥–∞ –∑–∞–¥–∞—á –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏"""
    
    def __init__(self, maxsize: int = 1000):
        self.maxsize = maxsize
        self._queues = {
            TaskPriority.CRITICAL: asyncio.Queue(maxsize=maxsize//4),
            TaskPriority.HIGH: asyncio.Queue(maxsize=maxsize//4),
            TaskPriority.NORMAL: asyncio.Queue(maxsize=maxsize//2),
            TaskPriority.LOW: asyncio.Queue(maxsize=maxsize//4)
        }
        self._task_registry: Dict[str, Task] = {}
        self._lock = asyncio.Lock()
    
    async def put(self, task: Task) -> bool:
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ –≤ —á–µ—Ä–≥—É"""
        async with self._lock:
            try:
                queue = self._queues[task.priority]
                await asyncio.wait_for(queue.put(task), timeout=5.0)
                self._task_registry[task.id] = task
                logger.debug(f"üìã –ó–∞–¥–∞—á–∞ {task.id} –¥–æ–¥–∞–Ω–∞ ({task.priority.name})")
                return True
            except asyncio.TimeoutError:
                logger.error(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ {task.id}")
                return False
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ: {e}")
                return False
    
    async def get(self) -> Optional[Task]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ –∑ –Ω–∞–π–≤–∏—â–∏–º –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º (non-blocking)"""
        for priority in [TaskPriority.CRITICAL, TaskPriority.HIGH, TaskPriority.NORMAL, TaskPriority.LOW]:
            queue = self._queues[priority]
            try:
                task = queue.get_nowait()
                task.status = TaskStatus.RUNNING
                task.started_at = datetime.now()
                return task
            except asyncio.QueueEmpty:
                continue
        
        return None
    
    async def get_task_status(self, task_id: str) -> Optional[TaskStatus]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–¥–∞—á—ñ"""
        task = self._task_registry.get(task_id)
        return task.status if task else None
    
    async def cancel_task(self, task_id: str) -> bool:
        """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ"""
        async with self._lock:
            task = self._task_registry.get(task_id)
            if task and task.status == TaskStatus.PENDING:
                task.status = TaskStatus.CANCELLED
                logger.info(f"üõë –ó–∞–¥–∞—á–∞ {task_id} —Å–∫–∞—Å–æ–≤–∞–Ω–∞")
                return True
            return False
    
    def get_queue_stats(self) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–≥"""
        return {
            priority.name: {
                'pending': queue.qsize(),
                'maxsize': queue.maxsize
            }
            for priority, queue in self._queues.items()
        }
    
    def get_total_pending(self) -> int:
        """–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–¥–∞—á –≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ"""
        return sum(q.qsize() for q in self._queues.values())


class AsyncWorkerPool:
    """–ü—É–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –≤–æ—Ä–∫–µ—Ä—ñ–≤"""
    
    def __init__(self, 
                 max_workers: int = 4,
                 thread_pool_size: int = 8,
                 process_pool_size: int = 4):
        
        self.max_workers = max_workers
        self.workers: List[asyncio.Task] = []
        self.task_queue = TaskQueue()
        self.resource_monitor = ResourceMonitor()
        self.running = False
        
        # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ü—Ä–∞–≤–∏–ª—å–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è executors
        self.thread_executor = ThreadPoolExecutor(
            max_workers=thread_pool_size,
            thread_name_prefix="async_thread"
        )
        self.process_executor = ProcessPoolExecutor(max_workers=process_pool_size)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'tasks_completed': 0,
            'tasks_failed': 0,
            'tasks_cancelled': 0,
            'total_execution_time': 0.0,
            'avg_execution_time': 0.0
        }
        
        self._lock = asyncio.Lock()
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø—É–ª—É –≤–æ—Ä–∫–µ—Ä—ñ–≤"""
        if self.running:
            logger.warning("Worker pool –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return
        
        self.running = True
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ worker pool: {self.max_workers} –≤–æ—Ä–∫–µ—Ä—ñ–≤")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–æ—Ä–∫–µ—Ä—ñ–≤
        for i in range(self.max_workers):
            worker_id = f"worker-{i}-{id(asyncio.current_task()) % 1000:03d}"
            worker = asyncio.create_task(
                self._worker(worker_id),
                name=worker_id
            )
            self.workers.append(worker)
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä —Ä–µ—Å—É—Ä—Å—ñ–≤
        monitor_task = asyncio.create_task(
            self._resource_monitor_loop(),
            name="resource-monitor"
        )
        self.workers.append(monitor_task)
        
        logger.info(f"‚úÖ {len(self.workers)} –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω–æ")
    
    async def stop(self, timeout: float = 10.0):
        """–ó—É–ø–∏–Ω–∫–∞ –ø—É–ª—É –≤–æ—Ä–∫–µ—Ä—ñ–≤"""
        if not self.running:
            return
        
        self.running = False
        logger.info("‚è∏Ô∏è –ó—É–ø–∏–Ω–∫–∞ worker pool...")
        
        try:
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –®–≤–∏–¥–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            # 1. –°–∫–∞—Å–æ–≤—É—î–º–æ –≤—Å—ñ –≤–æ—Ä–∫–µ—Ä–∏ –Ω–µ–≥–∞–π–Ω–æ
            for worker in self.workers:
                if not worker.done():
                    worker.cancel()
            
            # 2. –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑ –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                await asyncio.wait_for(
                    asyncio.gather(*self.workers, return_exceptions=True),
                    timeout=timeout
                )
            except asyncio.TimeoutError:
                logger.warning(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –∑—É–ø–∏–Ω–∫–∏ –≤–æ—Ä–∫–µ—Ä—ñ–≤ ({timeout}s)")
            
            # 3. –ó–∞–∫—Ä–∏–≤–∞—î–º–æ executor pools –∑ –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
            self.thread_executor.shutdown(wait=False)
            self.process_executor.shutdown(wait=False)
            
            self.workers.clear()
            logger.info("‚úÖ Worker pool –∑—É–ø–∏–Ω–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ worker pool: {e}")
    
    async def submit_task(self, 
                         func: Callable,
                         *args,
                         priority: TaskPriority = TaskPriority.NORMAL,
                         timeout: Optional[int] = None,
                         requires_gpu: bool = False,
                         memory_requirement: int = 1024,
                         **kwargs) -> str:
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ –¥–æ —á–µ—Ä–≥–∏"""
        
        if not self.running:
            raise RuntimeError("Worker pool –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
        
        task = Task(
            id=f"task_{int(datetime.now().timestamp() * 1000000)}",
            func=func,
            args=args,
            kwargs=kwargs,
            priority=priority,
            timeout=timeout,
            requires_gpu=requires_gpu,
            memory_requirement=memory_requirement
        )
        
        success = await self.task_queue.put(task)
        if success:
            logger.debug(f"üìã –ó–∞–¥–∞—á–∞ {task.id} –¥–æ–¥–∞–Ω–∞ –¥–æ —á–µ—Ä–≥–∏")
            return task.id
        else:
            raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∑–∞–¥–∞—á—É –¥–æ —á–µ—Ä–≥–∏")
    
    async def get_task_result(self, task_id: str, timeout: Optional[int] = 60) -> Any:
        """–û—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∑–∞–¥–∞—á—ñ"""
        start_time = datetime.now()
        
        while True:
            task = self.task_queue._task_registry.get(task_id)
            if not task:
                raise ValueError(f"–ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
            
            if task.status == TaskStatus.COMPLETED:
                return task.result
            elif task.status == TaskStatus.FAILED:
                raise Exception(f"–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: {task.error}")
            elif task.status == TaskStatus.CANCELLED:
                raise Exception("–ó–∞–¥–∞—á–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç—É
            elapsed = (datetime.now() - start_time).total_seconds()
            if timeout and elapsed > timeout:
                raise TimeoutError(f"–¢–∞–π–º–∞—É—Ç –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∑–∞–¥–∞—á—ñ {task_id} ({elapsed:.1f}s)")
            
            await asyncio.sleep(0.5)
    
    async def _worker(self, worker_name: str):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–¥–∞—á"""
        logger.info(f"üë∑ {worker_name} –∑–∞–ø—É—â–µ–Ω–æ")
        
        while self.running:
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–¥–∞—á—É
                task = await self.task_queue.get()
                if not task:
                    await asyncio.sleep(0.5)
                    continue
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ—Å—É—Ä—Å–∏
                retries = 0
                while not self.resource_monitor.can_allocate_resources(
                    task.memory_requirement, task.requires_gpu
                ):
                    if retries >= 3:
                        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥—ñ–ª–∏—Ç–∏ —Ä–µ—Å—É—Ä—Å–∏ –¥–ª—è {task.id}, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤ —á–µ—Ä–≥—É")
                        task.status = TaskStatus.PENDING
                        await self.task_queue.put(task)
                        break
                    
                    await asyncio.sleep(5)
                    retries += 1
                    continue
                
                if task.status != TaskStatus.RUNNING:
                    continue
                
                logger.debug(f"üîß {worker_name} –≤–∏–∫–æ–Ω—É—î {task.id}")
                
                # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–¥–∞—á—É
                start_time = datetime.now()
                try:
                    result = await self._execute_task(task)
                    execution_time = (datetime.now() - start_time).total_seconds()
                    
                    async with self._lock:
                        task.status = TaskStatus.COMPLETED
                        task.result = result
                        task.completed_at = datetime.now()
                        
                        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        self.stats['tasks_completed'] += 1
                        self.stats['total_execution_time'] += execution_time
                        self.stats['avg_execution_time'] = (
                            self.stats['total_execution_time'] / self.stats['tasks_completed']
                        )
                    
                    logger.info(f"‚úÖ {task.id} –≤–∏–∫–æ–Ω–∞–Ω–∞ –∑–∞ {execution_time:.2f}s")
                    
                except asyncio.CancelledError:
                    task.status = TaskStatus.CANCELLED
                    self.stats['tasks_cancelled'] += 1
                    raise
                    
                except Exception as e:
                    async with self._lock:
                        task.status = TaskStatus.FAILED
                        task.error = str(e)
                        task.completed_at = datetime.now()
                        self.stats['tasks_failed'] += 1
                    
                    logger.error(f"‚ùå {task.id} –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: {e}")
                    
                    # –ü–æ–≤—Ç–æ—Ä–Ω—ñ —Å–ø—Ä–æ–±–∏
                    if task.retries < task.max_retries:
                        task.retries += 1
                        task.status = TaskStatus.PENDING
                        await self.task_queue.put(task)
                        logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ {task.retries}/{task.max_retries} –¥–ª—è {task.id}")
                
                # –û—á–∏—â–µ–Ω–Ω—è –ø–∞–º'—è—Ç—ñ
                gc.collect()
                
            except asyncio.CancelledError:
                logger.info(f"üë∑ {worker_name} —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
                break
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ {worker_name}: {e}", exc_info=True)
                await asyncio.sleep(1)
        
        logger.info(f"üë∑ {worker_name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    async def _execute_task(self, task: Task) -> Any:
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ"""
        func = task.func
        args = task.args
        kwargs = task.kwargs
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        if asyncio.iscoroutinefunction(func):
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
            if task.timeout:
                result = await asyncio.wait_for(
                    func(*args, **kwargs),
                    timeout=task.timeout
                )
            else:
                result = await func(*args, **kwargs)
        else:
            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è - –≤–∏–∫–æ–Ω—É—î–º–æ –≤ executor
            loop = asyncio.get_running_loop()
            
            # –í–∏–±–∏—Ä–∞—î–º–æ executor
            if task.requires_gpu or getattr(func, '_use_thread_executor', False):
                executor = self.thread_executor
            else:
                executor = self.process_executor
            
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–∫–ª–∏–∫ –∑ executor
            if task.timeout:
                result = await asyncio.wait_for(
                    loop.run_in_executor(executor, lambda: func(*args, **kwargs)),
                    timeout=task.timeout
                )
            else:
                result = await loop.run_in_executor(
                    executor, lambda: func(*args, **kwargs)
                )
        
        return result
    
    async def _resource_monitor_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ä–µ—Å—É—Ä—Å—ñ–≤"""
        logger.info("üìä –ú–æ–Ω—ñ—Ç–æ—Ä —Ä–µ—Å—É—Ä—Å—ñ–≤ –∑–∞–ø—É—â–µ–Ω–æ")
        
        while self.running:
            try:
                if self.resource_monitor.is_system_overloaded():
                    logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞, –ø–∞—É–∑–∞ 10s")
                    await asyncio.sleep(10)
                else:
                    await asyncio.sleep(30)
                    
                # –õ–æ–≥—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
                if int(datetime.now().timestamp()) % 300 == 0:
                    stats = self.get_stats()
                    logger.info(
                        f"üìä Stats: {stats['tasks_completed']} completed, "
                        f"{stats['tasks_failed']} failed, "
                        f"{stats['pending_tasks']} pending"
                    )
                    
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
                await asyncio.sleep(30)
        
        logger.info("üìä –ú–æ–Ω—ñ—Ç–æ—Ä —Ä–µ—Å—É—Ä—Å—ñ–≤ –∑—É–ø–∏–Ω–µ–Ω–æ")
    
    def get_stats(self) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–ª—É –≤–æ—Ä–∫–µ—Ä—ñ–≤"""
        stats = self.stats.copy()
        stats.update({
            'active_workers': sum(1 for w in self.workers if not w.done() and 'worker' in w.get_name()),
            'max_workers': self.max_workers,
            'pending_tasks': self.task_queue.get_total_pending(),
            'queue_stats': self.task_queue.get_queue_stats(),
            'system_status': self.resource_monitor.get_system_status()
        })
        return stats


class AsyncMLPipeline:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π ML –ø–∞–π–ø–ª–∞–π–Ω"""
    
    def __init__(self):
        self.worker_pool = AsyncWorkerPool(
            max_workers=4,
            thread_pool_size=8,
            process_pool_size=2
        )
        self.initialized = False
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω—É"""
        if self.initialized:
            logger.warning("ML Pipeline –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return
        
        await self.worker_pool.start()
        self.initialized = True
        logger.info("üöÄ ML Pipeline –∑–∞–ø—É—â–µ–Ω–æ")
    
    async def stop(self):
        """–ó—É–ø–∏–Ω–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω—É"""
        if not self.initialized:
            return
        
        await self.worker_pool.stop(timeout=10.0)
        self.initialized = False
        logger.info("‚è∏Ô∏è ML Pipeline –∑—É–ø–∏–Ω–µ–Ω–æ")
    
    # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –í–∏–¥–∞–ª–µ–Ω–æ _train_model_task —Ç–∞ _predict_prices_task
    # —è–∫—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ asyncio.run() –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ async –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    # –¶—ñ –º–µ—Ç–æ–¥–∏ –º–∞—é—Ç—å –±—É—Ç–∏ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –≤ unified_intelligent_system


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
ml_pipeline = AsyncMLPipeline()


# ============================================================================
# –ü–£–ë–õ–Ü–ß–ù–ò–ô API
# ============================================================================

async def init_async_system():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏"""
    try:
        # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –í–∏–¥–∞–ª–µ–Ω–æ uvloop.install() - —Ü–µ –º–∞—î –±—É—Ç–∏ –≤ main.py
        await ml_pipeline.start()
        logger.info("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó async —Å–∏—Å—Ç–µ–º–∏: {e}")
        raise


async def shutdown_async_system():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏"""
    try:
        await ml_pipeline.stop()
        
        # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: Lazy import –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è —Ü–∏–∫–ª—ñ—á–Ω–æ—ó –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
        from optimized.database import DatabaseConnection
        db_manager = DatabaseConnection()
        await db_manager.close()
        
        logger.info("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ shutdown async —Å–∏—Å—Ç–µ–º–∏: {e}")