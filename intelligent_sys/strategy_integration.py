# -*- coding: utf-8 -*-
"""
–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è —Ç–æ—Ä–≥–æ–≤–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π –≤ intelligent_sys
–ó–∞–±–µ–∑–ø–µ—á—É—î —Ä–æ–±–æ—Ç—É –∑ StrategyManager —Ç–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—é —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π
"""
import logging
import sys
import os
from typing import Dict, List, Optional, Any
from datetime import datetime
import pandas as pd

from .utils import calculate_signal_confidence

logger = logging.getLogger(__name__)


class StrategyIntegration:
    """
    –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π —à–∞—Ä –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è–º–∏
    
    –§—É–Ω–∫—Ü—ñ—ó:
    - –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Strategy Manager
    - –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ—Ä–≥–æ–≤–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤
    - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—è–º–∏
    - –ó–±—ñ—Ä —Ç–∞ –∞–≥—Ä–µ–≥–∞—Ü—ñ—è –º–µ—Ç—Ä–∏–∫
    """
    
    def __init__(
        self,
        symbols: List[str],
        portfolio_value: float = 10000.0,
        strategy_config: Optional[Dict] = None
    ):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π
        
        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ä
            portfolio_value: –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –∫–∞–ø—ñ—Ç–∞–ª
            strategy_config: –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π
        """
        self.symbols = symbols
        self.portfolio_value = portfolio_value
        self.strategy_config = strategy_config or {}
        self.strategy_manager = None
        self.initialized = False
        
        logger.info(f"üéØ StrategyIntegration —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª—ñ–≤")
    
    def initialize(self) -> bool:
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Strategy Manager
        
        Returns:
            bool: True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ
        """
        try:
            # –î–æ–¥–∞—î–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ sys.path –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É strategy_manager
            current_dir = os.path.dirname(os.path.abspath(__file__))
            parent_dir = os.path.dirname(current_dir)
            if parent_dir not in sys.path:
                sys.path.insert(0, parent_dir)
            
            # –Ü–º–ø–æ—Ä—Ç —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π –Ω–∞–ø—Ä—è–º—É
            from strategies.scalping import ScalpingStrategy
            from strategies.day_trading import DayTradingStrategy
            from strategies.swing_trading import SwingTradingStrategy
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π
            self.active_strategies = []
            
            if self.strategy_config.get('enable_scalping', False):
                self.active_strategies.append(ScalpingStrategy(self.symbols))
                logger.info("‚úÖ Scalping strategy enabled")
                
            if self.strategy_config.get('enable_day_trading', True):
                self.active_strategies.append(DayTradingStrategy(self.symbols))
                logger.info("‚úÖ Day trading strategy enabled")
                
            if self.strategy_config.get('enable_swing_trading', True):
                self.active_strategies.append(SwingTradingStrategy(self.symbols))
                logger.info("‚úÖ Swing trading strategy enabled")
            
            self.strategy_manager = None  # –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ manager
            
            self.initialized = True
            logger.info(f"‚úÖ Strategies initialized: {len(self.active_strategies)} active")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Strategy Manager: {e}", exc_info=True)
            return False
    
    async def generate_signals(
        self,
        market_data: Dict[str, pd.DataFrame],
        predictions: Optional[Dict[str, Dict]] = None
    ) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ—Ä–≥–æ–≤–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤
        
        Args:
            market_data: –Ü—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ –ø–æ —Å–∏–º–≤–æ–ª–∞—Ö
            predictions: ML –ø—Ä–æ–≥–Ω–æ–∑–∏ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            Dict –∑ —Ç–æ—Ä–≥–æ–≤–∏–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
        """
        if not self.initialized or not self.active_strategies:
            logger.warning("‚ö†Ô∏è Strategies –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return {}
        
        try:
            # –Ø–∫—â–æ –Ω–µ–º–∞—î –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤, —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–ª—É—à–∫–∏
            if predictions is None:
                predictions = self._create_dummy_predictions(market_data)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑ —É—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π
            all_signals = {}
            for strategy in self.active_strategies:
                try:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–µ—Ç–æ–¥ async
                    if hasattr(strategy.analyze_market, '__call__'):
                        import inspect
                        if inspect.iscoroutinefunction(strategy.analyze_market):
                            strategy_signals = await strategy.analyze_market(market_data, predictions)
                        else:
                            strategy_signals = strategy.analyze_market(market_data, predictions)
                    else:
                        strategy_signals = strategy.analyze_market(market_data, predictions)
                    all_signals.update(strategy_signals)
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ {strategy.name}: {e}")
            
            if all_signals:
                logger.info(f"üìä –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(all_signals)} —Ç–æ—Ä–≥–æ–≤–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤")
            
            return all_signals
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–∏–≥–Ω–∞–ª—ñ–≤: {e}", exc_info=True)
            return {}
    
    def _create_dummy_predictions(self, market_data: Dict[str, pd.DataFrame]) -> Dict[str, Dict]:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç—Ä–µ–Ω–¥—ñ–≤
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è, —è–∫—â–æ –Ω–µ–º–∞—î ML –º–æ–¥–µ–ª–µ–π
        """
        predictions = {}
        
        for symbol, df in market_data.items():
            if df.empty or len(df) < 2:
                continue
            
            try:
                current_price = df['close'].iloc[-1]
                price_change = df['close'].pct_change().iloc[-1]
                
                # –ü—Ä–æ—Å—Ç–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –º–æ–º–µ–Ω—Ç—É–º—É
                predicted_change = price_change * 1.1
                predicted_price = current_price * (1 + predicted_change)
                confidence = calculate_signal_confidence(predicted_change, df)
                
                predictions[symbol] = {
                    'current_price': current_price,
                    'predicted_price': predicted_price,
                    'predicted_change': predicted_change,
                    'confidence': confidence,
                    'timestamp': datetime.now()
                }
                
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É –¥–ª—è {symbol}: {e}")
        
        return predictions
    
    async def check_close_positions(
        self,
        current_prices: Dict[str, float],
        market_data: Dict[str, pd.DataFrame]
    ) -> Dict[str, bool]:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ–π
        
        Args:
            current_prices: –ü–æ—Ç–æ—á–Ω—ñ —Ü—ñ–Ω–∏ —Å–∏–º–≤–æ–ª—ñ–≤
            market_data: –†–∏–Ω–∫–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            
        Returns:
            Dict[symbol, should_close]: –†—ñ—à–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–∫—Ä–∏—Ç—Ç—è
        """
        if not self.initialized or not self.active_strategies:
            logger.warning("‚ö†Ô∏è Strategies –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return {}
        
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è –∫–æ–∂–Ω–æ—ó —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
            close_decisions = {}
            for strategy in self.active_strategies:
                try:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
                    for symbol in strategy.symbols:
                        if symbol in strategy.positions and strategy.positions[symbol]:
                            position = strategy.positions[symbol]
                            current_price = current_prices.get(symbol, 0)
                            if current_price and strategy._should_close_position(position, current_price):
                                close_decisions[symbol] = True
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ {strategy.name}: {e}")
            
            if close_decisions:
                logger.info(f"üîî –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –∑–∞–∫—Ä–∏—Ç–∏ {len(close_decisions)} –ø–æ–∑–∏—Ü—ñ–π")
            
            return close_decisions
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ–π: {e}", exc_info=True)
            return {}
    
    def validate_signal(self, signal: Any) -> tuple:
        """
        –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É
        
        Returns:
            (is_valid, reason)
        """
        if not self.initialized or not self.active_strategies:
            return False, "Strategies –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ"
        
        try:
            # –ë–∞–∑–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
            if not hasattr(signal, 'action') or not hasattr(signal, 'confidence'):
                return False, "–ù–µ–≤–∞–ª—ñ–¥–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∏–≥–Ω–∞–ª—É"
            
            if signal.confidence < 0.05:
                return False, f"–ó–∞–Ω–∞–¥—Ç–æ –Ω–∏–∑—å–∫–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {signal.confidence}"
            
            return True, "OK"
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Å–∏–≥–Ω–∞–ª—É: {e}")
            return False, str(e)
    
    def calculate_position_size(self, signal: Any) -> float:
        """
        –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó
        
        Returns:
            float: –†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó
        """
        if not self.initialized or not self.active_strategies:
            logger.warning("‚ö†Ô∏è Strategies –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return 0.0
        
        try:
            # –ë–∞–∑–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫: 2% –≤—ñ–¥ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ
            base_risk = self.portfolio_value * 0.02
            position_size = base_risk * signal.confidence
            return position_size
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó: {e}")
            return 0.0
    
    def record_trade(self, symbol: str, pnl: float, strategy_name: str = None):
        """
        –ó–∞–ø–∏—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —É–≥–æ–¥–∏
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞ –ø–∞—Ä–∞
            pnl: –ü—Ä–∏–±—É—Ç–æ–∫/–∑–±–∏—Ç–æ–∫
            strategy_name: –ù–∞–∑–≤–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        """
        if not self.initialized or not self.active_strategies:
            logger.warning("‚ö†Ô∏è Strategies –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return
        
        try:
            # –ó–∞–ø–∏—Å—É—î–º–æ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é
            for strategy in self.active_strategies:
                if strategy_name and strategy.name == strategy_name:
                    strategy.record_trade(symbol, pnl)
                    break
            logger.debug(f"üìù –ó–∞–ø–∏—Å–∞–Ω–æ —É–≥–æ–¥—É {symbol}: PnL=${pnl:.2f}")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —É–≥–æ–¥–∏: {e}")
    
    def update_portfolio_value(self, new_value: float):
        """
        –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∞—Ä—Ç–æ—Å—Ç—ñ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        
        Args:
            new_value: –ù–æ–≤–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
        """
        if not self.initialized or not self.active_strategies:
            return
        
        try:
            self.portfolio_value = new_value
            logger.debug(f"üí∞ –ü–æ—Ä—Ç—Ñ–µ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ: ${new_value:.2f}")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
    
    def get_performance_summary(self) -> Dict[str, Any]:
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        
        Returns:
            Dict –∑ –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        """
        if not self.initialized or not self.active_strategies:
            return {
                'initialized': False,
                'portfolio_value': self.portfolio_value,
                'total_trades': 0,
                'win_rate': 0.0
            }
        
        try:
            # –ó–±–∏—Ä–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑ —É—Å—ñ—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π
            summary = {
                'portfolio_value': self.portfolio_value,
                'strategies': {}
            }
            
            total_trades = 0
            total_winning = 0
            
            for strategy in self.active_strategies:
                strategy_stats = {
                    'name': strategy.name,
                    'total_trades': getattr(strategy, 'total_trades', 0),
                    'winning_trades': getattr(strategy, 'winning_trades', 0),
                    'total_pnl': getattr(strategy, 'total_pnl', 0.0)
                }
                summary['strategies'][strategy.name] = strategy_stats
                total_trades += strategy_stats['total_trades']
                total_winning += strategy_stats['winning_trades']
            
            summary['total_trades'] = total_trades
            summary['win_rate'] = (total_winning / total_trades * 100) if total_trades > 0 else 0.0
            
            return summary
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'error': str(e)}
    
    def reset_daily_stats(self):
        """–°–∫–∏–¥–∞–Ω–Ω—è –¥–µ–Ω–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.initialized or not self.active_strategies:
            return
        
        try:
            for strategy in self.active_strategies:
                if hasattr(strategy, 'reset_daily_stats'):
                    strategy.reset_daily_stats()
            logger.info("üîÑ –î–µ–Ω–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π —Å–∫–∏–Ω—É—Ç–∞")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def get_active_positions(self) -> Dict[str, Dict]:
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
        
        Returns:
            Dict –∑ –∞–∫—Ç–∏–≤–Ω–∏–º–∏ –ø–æ–∑–∏—Ü—ñ—è–º–∏ –ø–æ –≤—Å—ñ—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è—Ö
        """
        if not self.initialized or not self.active_strategies:
            return {}
        
        try:
            all_positions = {}
            for strategy in self.active_strategies:
                for symbol, position in strategy.positions.items():
                    if position:  # –Ø–∫—â–æ –ø–æ–∑–∏—Ü—ñ—è –∞–∫—Ç–∏–≤–Ω–∞
                        all_positions[f"{strategy.name}_{symbol}"] = {
                            'strategy': strategy.name,
                            'symbol': symbol,
                            'position': position
                        }
            return all_positions
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π: {e}")
            return {}
    
    def shutdown(self):
        """–ö–æ—Ä–µ–∫—Ç–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏"""
        if self.active_strategies:
            logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ Strategy Integration...")
            # –û—á–∏—â–∞—î–º–æ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
            self.active_strategies.clear()
        
        self.initialized = False
        logger.info("‚úÖ Strategy Integration –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


# –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
def create_strategy_integration(
    symbols: List[str],
    portfolio_value: float = 10000.0,
    enable_scalping: bool = False,
    enable_day_trading: bool = True,
    enable_swing_trading: bool = True
) -> StrategyIntegration:
    """
    –®–≤–∏–¥–∫–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è StrategyIntegration –∑ —Ç–∏–ø–æ–≤–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
    
    Args:
        symbols: –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ä
        portfolio_value: –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –∫–∞–ø—ñ—Ç–∞–ª
        enable_scalping: –£–≤—ñ–º–∫–Ω—É—Ç–∏ —Å–∫–∞–ª—å–ø—ñ–Ω–≥
        enable_day_trading: –£–≤—ñ–º–∫–Ω—É—Ç–∏ –¥–µ–Ω–Ω—É —Ç–æ—Ä–≥—ñ–≤–ª—é
        enable_swing_trading: –£–≤—ñ–º–∫–Ω—É—Ç–∏ —Å–≤—ñ–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥
        
    Returns:
        StrategyIntegration: –ì–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –æ–±'—î–∫—Ç
    """
    config = {
        'enable_scalping': enable_scalping,
        'enable_day_trading': enable_day_trading,
        'enable_swing_trading': enable_swing_trading,
        'risk_config': {
            'max_risk_per_trade': 0.02,  # 2% –Ω–∞ —É–≥–æ–¥—É
            'max_daily_loss': 0.05,  # 5% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –¥–µ–Ω–Ω–∏–π –∑–±–∏—Ç–æ–∫
            'max_positions': 10  # –ú–∞–∫—Å–∏–º—É–º 10 –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
        }
    }
    
    integration = StrategyIntegration(
        symbols=symbols,
        portfolio_value=portfolio_value,
        strategy_config=config
    )
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    if integration.initialize():
        logger.info("‚úÖ StrategyIntegration —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
    else:
        logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó StrategyIntegration")
    
    return integration
