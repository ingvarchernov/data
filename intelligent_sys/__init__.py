"""
–ú–æ–¥—É–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Binance —Ç–∞ —Ç–æ—Ä–≥–æ–≤–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π

–¶–µ–π –º–æ–¥—É–ª—å –Ω–∞–¥–∞—î –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—É –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è:
- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Binance (ClientManager, DataFetcher)
- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î (DatabaseSaver)
- –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π (StrategyIntegration)
- –û–±'—î–¥–Ω–∞–Ω–∏–π loader (UnifiedBinanceLoader –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è)
"""
import sys
from pathlib import Path

# –î–æ–¥–∞—î–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É UnifiedBinanceLoader
sys.path.insert(0, str(Path(__file__).parent.parent))

# –Ü–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –∑ –º–æ–¥—É–ª—ñ–≤
from .base import DataSource, LoaderConfig, DataRange
from .client_manager import ClientManager
from .data_fetcher import DataFetcher
from .database_saver import DatabaseSaver
from .strategy_integration import StrategyIntegration, create_strategy_integration

# –Ü–º–ø–æ—Ä—Ç –≥–æ–ª–æ–≤–Ω–æ–≥–æ UnifiedBinanceLoader (—É–Ω–∏–∫–∞—î–º–æ –¥—É–±–ª—é–≤–∞–Ω–Ω—è)
try:
    from unified_binance_loader import UnifiedBinanceLoader
except ImportError:
    # Fallback - —Å—Ç–≤–æ—Ä—é—î–º–æ wrapper —è–∫—â–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
    import logging
    from typing import Optional, List, Dict
    import pandas as pd
    
    logger = logging.getLogger(__name__)
    
    class UnifiedBinanceLoader:
        """
        Wrapper –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ—ó –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –∑ intelligent_sys
        """
        
        def __init__(
            self,
            api_key: Optional[str] = None,
            api_secret: Optional[str] = None,
            testnet: bool = True,
            data_source: DataSource = DataSource.AUTO,
            use_public_data: bool = True,
            public_only: bool = True,  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞ –Ω–∞–∑–≤–∞
            **kwargs
        ):
            """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—á–∞"""
            # public_only - —Å–∏–Ω–æ–Ω—ñ–º use_public_data
            if public_only:
                use_public_data = True
                
            self.config = LoaderConfig(
                api_key=api_key,
                api_secret=api_secret,
                testnet=testnet,
                data_source=data_source,
                use_public_data=use_public_data,
                **kwargs
            )
            
            self.client_manager = ClientManager(self.config)
            self.data_fetcher = DataFetcher(self.client_manager)
            self.database_saver = DatabaseSaver()
            
            logger.info(
                f"‚úÖ UnifiedBinanceLoader (modular): source={self.config.data_source.value}, "
                f"testnet={testnet}, public={use_public_data}"
            )
        
        async def get_historical_data(
            self,
            symbol: str,
            interval: str = '1h',
            days_back: int = 7,
            start_date: Optional[any] = None,
            end_date: Optional[any] = None
        ) -> pd.DataFrame:
            """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
            return await self.data_fetcher.fetch(
                symbol, interval, days_back, start_date, end_date
            )
        
        # Alias –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
        async def load_data_async(self, symbol: str, interval: str, days: int = 7) -> pd.DataFrame:
            """Alias –¥–ª—è get_historical_data"""
            return await self.get_historical_data(symbol, interval, days_back=days)
        
        async def get_multiple_symbols(
            self,
            symbols: List[str],
            interval: str = '1h',
            days_back: int = 7
        ) -> Dict[str, pd.DataFrame]:
            """–ü–∞—Ä–∞–ª–µ–ª—å–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Ö —Å–∏–º–≤–æ–ª—ñ–≤"""
            return await self.data_fetcher.fetch_multiple(symbols, interval, days_back)
        
        async def save_to_database(
            self,
            db_manager,
            symbol: str,
            interval: str,
            days_back: int = 7
        ) -> int:
            """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î"""
            data = await self.get_historical_data(symbol, interval, days_back)
            return await self.database_saver.save_dataframe(
                db_manager, symbol, interval, data
            )
        
        async def close(self):
            """–ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω—å"""
            await self.client_manager.close()
            logger.info("üîí UnifiedBinanceLoader (modular) –∑–∞–∫—Ä–∏—Ç–æ")


# –ï–∫—Å–ø–æ—Ä—Ç
__all__ = [
    'UnifiedBinanceLoader',
    'DataSource',
    'LoaderConfig',
    'ClientManager',
    'DataFetcher',
    'DatabaseSaver',
    'StrategyIntegration',
    'create_strategy_integration'
]