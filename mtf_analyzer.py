#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Multi-Timeframe Analyzer
–ê–Ω–∞–ª—ñ–∑—É—î –¥–µ–∫—ñ–ª—å–∫–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤ –¥–ª—è –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ç–æ—á–Ω–æ—Å—Ç—ñ —Å–∏–≥–Ω–∞–ª—ñ–≤
"""
import pandas as pd
import numpy as np
from typing import Dict, List, Optional, Tuple
import logging

logger = logging.getLogger(__name__)


class MultiTimeframeAnalyzer:
    """
    –ê–Ω–∞–ª—ñ–∑—É—î –¥–µ–∫—ñ–ª—å–∫–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤ —ñ –∫–æ–º–±—ñ–Ω—É—î —Å–∏–≥–Ω–∞–ª–∏
    
    –õ–æ–≥—ñ–∫–∞:
    - 4h (primary): –æ—Å–Ω–æ–≤–Ω–∏–π —Ç—Ä–µ–Ω–¥ —ñ –ø—Ä–æ–≥–Ω–æ–∑
    - 1h (confirmation): –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç—Ä–µ–Ω–¥—É
    - 15m (timing): —Ç–æ—á–∫–∞ –≤—Ö–æ–¥—É
    
    –ö–æ–º–±—ñ–Ω–∞—Ü—ñ—è:
    - –í—Å—ñ 3 —Ç–∞–π–º—Ñ—Ä–µ–π–º–∏ –≤ –æ–¥–Ω–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É = –≤–∏—Å–æ–∫–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å
    - 2 –∑ 3 = —Å–µ—Ä–µ–¥–Ω—è –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å
    - –†–æ–∑–±—ñ–∂–Ω—ñ—Å—Ç—å = –Ω–∏–∑—å–∫–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å (–Ω–µ —Ç–æ—Ä–≥—É—î–º–æ)
    """
    
    def __init__(self):
        self.timeframes = {
            '4h': {'weight': 0.5, 'interval': '4h'},   # –û—Å–Ω–æ–≤–Ω–∏–π —Ç—Ä–µ–Ω–¥
            '1h': {'weight': 0.4, 'interval': '1h'},   # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            '15m': {'weight': 0.1, 'interval': '15m'}  # –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É (–∑–º–µ–Ω—à–µ–Ω–æ)
        }
    
    def analyze(
        self,
        predictions: Dict[str, Dict],  # {timeframe: {prediction, confidence, price}}
        require_alignment: bool = True
    ) -> Optional[Dict]:
        """
        –ê–Ω–∞–ª—ñ–∑—É—î –ø—Ä–æ–≥–Ω–æ–∑–∏ –∑ —Ä—ñ–∑–Ω–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤
        
        Args:
            predictions: Dict –∑ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
            require_alignment: –ß–∏ –≤–∏–º–∞–≥–∞—Ç–∏ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –Ω–∞–ø—Ä—è–º–∫—ñ–≤
            
        Returns:
            Combined prediction –∞–±–æ None —è–∫—â–æ –Ω–µ–º–∞—î –∫–æ–Ω—Å–µ–Ω—Å—É—Å—É
        """
        if not predictions:
            return None
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤—Å—ñ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤
        available_tf = set(predictions.keys())
        required_tf = set(self.timeframes.keys())
        
        if not required_tf.issubset(available_tf):
            missing = required_tf - available_tf
            logger.warning(f"‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∏: {missing}")
            return None
        
        # –ó–±—ñ—Ä –Ω–∞–ø—Ä—è–º–∫—ñ–≤ —ñ –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç–µ–π
        directions = {}
        confidences = {}
        prices = {}
        
        for tf, pred in predictions.items():
            if tf not in self.timeframes:
                continue
            
            directions[tf] = pred['prediction']
            confidences[tf] = pred['confidence']
            prices[tf] = pred['current_price']
        
        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∫–æ–Ω—Å–µ–Ω—Å—É—Å—É
        up_weight = sum(
            self.timeframes[tf]['weight']
            for tf, direction in directions.items()
            if direction == 'UP'
        )
        
        down_weight = sum(
            self.timeframes[tf]['weight']
            for tf, direction in directions.items()
            if direction == 'DOWN'
        )
        
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–ø—Ä—è–º–∫—É
        if up_weight > down_weight:
            final_direction = 'UP'
            consensus_strength = up_weight
        elif down_weight > up_weight:
            final_direction = 'DOWN'
            consensus_strength = down_weight
        else:
            # –†—ñ–≤–Ω–æ–≤–∞–≥–∞ - –Ω–µ —Ç–æ—Ä–≥—É—î–º–æ
            logger.info("‚öñÔ∏è MTF: —Ä—ñ–≤–Ω–æ–≤–∞–≥–∞ –º—ñ–∂ UP/DOWN")
            return None
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å—É (2/3 majority –∑–∞–º—ñ—Å—Ç—å 100%)
        total_weight = sum(self.timeframes[tf]['weight'] for tf in directions.keys())
        consensus_threshold = total_weight * 0.6  # 60% –¥–ª—è 2/3
        
        if consensus_strength < consensus_threshold:
            logger.info(
                f"‚ö†Ô∏è MTF: –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å ({consensus_strength:.1f}/{total_weight:.1f}) - "
                f"4h:{directions.get('4h')}, "
                f"1h:{directions.get('1h')}, "
                f"15m:{directions.get('15m')}"
            )
            return None
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–≤–∞–∂–µ–Ω–æ—ó –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ
        weighted_confidence = sum(
            confidences[tf] * self.timeframes[tf]['weight']
            for tf in self.timeframes.keys()
            if tf in confidences
        )
        
        # –ë–æ–Ω—É—Å –∑–∞ –ø–æ–≤–Ω–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è
        if all(d == final_direction for d in directions.values()):
            alignment_bonus = 0.1  # +10% –¥–æ –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ
            weighted_confidence = min(1.0, weighted_confidence + alignment_bonus)
            logger.info(f"‚ú® MTF: –≤—Å—ñ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∏ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å - –±–æ–Ω—É—Å +10%")
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –∑ 15m (–Ω–∞–π–∞–∫—Ç—É–∞–ª—å–Ω—ñ—à–∞)
        current_price = prices.get('15m', prices.get('1h', prices.get('4h')))
        
        result = {
            'prediction': final_direction,
            'confidence': weighted_confidence,
            'current_price': current_price,
            'consensus_strength': consensus_strength,
            'timeframe_signals': {
                tf: {
                    'direction': directions[tf],
                    'confidence': confidences[tf]
                }
                for tf in self.timeframes.keys()
            },
            'alignment': all(d == final_direction for d in directions.values())
        }
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è
        self._log_analysis(result)
        
        return result
    
    def _log_analysis(self, result: Dict):
        """–õ–æ–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ MTF –∞–Ω–∞–ª—ñ–∑—É"""
        direction_emoji = "üìà" if result['prediction'] == 'UP' else "üìâ"
        
        log_msg = (
            f"\n{'='*60}\n"
            f"üîÑ MULTI-TIMEFRAME ANALYSIS\n"
            f"{'='*60}\n"
            f"{direction_emoji} –ù–∞–ø—Ä—è–º–æ–∫: {result['prediction']}\n"
            f"üí™ –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {result['confidence']:.2%}\n"
            f"üéØ –ö–æ–Ω—Å–µ–Ω—Å—É—Å: {result['consensus_strength']:.1%}\n"
            f"‚úÖ –°–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è: {'–¢–ê–ö' if result['alignment'] else '–ù–Ü'}\n"
            f"\n–°–∏–≥–Ω–∞–ª–∏ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º:\n"
        )
        
        for tf, signal in result['timeframe_signals'].items():
            emoji = "üìà" if signal['direction'] == 'UP' else "üìâ"
            weight = self.timeframes[tf]['weight']
            log_msg += (
                f"  {tf:>3} ({weight:.0%}): {emoji} {signal['direction']:>4} "
                f"({signal['confidence']:.1%})\n"
            )
        
        log_msg += f"{'='*60}"
        
        logger.info(log_msg)
    
    def get_timeframe_data_requirements(self) -> Dict[str, int]:
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î –≤–∏–º–æ–≥–∏ –¥–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–≤—ñ—á–æ–∫ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
        
        Returns:
            Dict –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Å–≤—ñ—á–æ–∫
        """
        return {
            '4h': 500,   # ~83 –¥–Ω—ñ
            '1h': 500,   # ~20 –¥–Ω—ñ–≤
            '15m': 500   # ~5 –¥–Ω—ñ–≤
        }


# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
def example():
    """–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è MTF –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞"""
    analyzer = MultiTimeframeAnalyzer()
    
    # –°–∏–º—É–ª—è—Ü—ñ—è –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤ –∑ —Ä—ñ–∑–Ω–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤
    predictions = {
        '4h': {
            'prediction': 'UP',
            'confidence': 0.75,
            'current_price': 50000.0
        },
        '1h': {
            'prediction': 'UP',
            'confidence': 0.68,
            'current_price': 50010.0
        },
        '15m': {
            'prediction': 'UP',
            'confidence': 0.62,
            'current_price': 50015.0
        }
    }
    
    # –ê–Ω–∞–ª—ñ–∑
    result = analyzer.analyze(predictions)
    
    if result:
        print(f"\n–§—ñ–Ω–∞–ª—å–Ω–∏–π —Å–∏–≥–Ω–∞–ª: {result['prediction']}")
        print(f"–í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {result['confidence']:.2%}")
        print(f"–í—Å—ñ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å: {result['alignment']}")
    else:
        print("–ù–µ–º–∞—î —á—ñ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É")
    
    # –ü—Ä–∏–∫–ª–∞–¥ —Ä–æ–∑–±—ñ–∂–Ω–æ—Å—Ç—ñ
    print("\n" + "="*60)
    print("–ü—Ä–∏–∫–ª–∞–¥ –∑ —Ä–æ–∑–±—ñ–∂–Ω—ñ—Å—Ç—é:")
    print("="*60)
    
    predictions_mixed = {
        '4h': {
            'prediction': 'UP',
            'confidence': 0.72,
            'current_price': 50000.0
        },
        '1h': {
            'prediction': 'DOWN',
            'confidence': 0.65,
            'current_price': 50010.0
        },
        '15m': {
            'prediction': 'UP',
            'confidence': 0.61,
            'current_price': 50015.0
        }
    }
    
    result = analyzer.analyze(predictions_mixed, require_alignment=True)
    
    if result:
        print(f"\n–§—ñ–Ω–∞–ª—å–Ω–∏–π —Å–∏–≥–Ω–∞–ª: {result['prediction']}")
    else:
        print("\n‚ùå –ù–µ–º–∞—î —Å–∏–≥–Ω–∞–ª—É (—Ä–æ–∑–±—ñ–∂–Ω—ñ—Å—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤)")


if __name__ == '__main__':
    example()
