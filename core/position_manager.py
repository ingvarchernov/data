"""
Position Manager - —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—è–º–∏ (–≤—ñ–¥–∫—Ä–∏—Ç—Ç—è/–∑–∞–∫—Ä–∏—Ç—Ç—è)
"""
import asyncio
from datetime import datetime
import logging
import pandas as pd

from telegram_bot import telegram_notifier
from training.online_learning import online_learner

logger = logging.getLogger(__name__)

# Database (optional)
try:
    from optimized.database.connection import DatabaseConnection
    from optimized.database.positions import PositionDB
    DB_AVAILABLE = True
except ImportError:
    DB_AVAILABLE = False
    logger.warning("‚ö†Ô∏è Database module not available")


# –°—Ç–∞—Ç–∏—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–∑–∏—Ü—ñ—ó
async def check_position_static(client, symbol: str) -> dict:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–∑–∏—Ü—ñ—ó (—Å—Ç–∞—Ç–∏—á–Ω–∞ –≤–µ—Ä—Å—ñ—è) –∑ retry"""
    max_retries = 3
    retry_delay = 1
    
    for attempt in range(max_retries):
        try:
            positions = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: client.futures_position_information(symbol=symbol)
            )
            
            for pos in positions:
                if pos['symbol'] == symbol:
                    amt = float(pos['positionAmt'])
                    if abs(amt) > 0.0001:
                        return {
                            'symbol': symbol,
                            'amount': amt,
                            'entry_price': float(pos['entryPrice']),
                            'unrealized_pnl': float(pos['unRealizedProfit']),
                            'side': 'LONG' if amt > 0 else 'SHORT'
                        }
            return None
        except Exception as e:
            if attempt < max_retries - 1:
                logger.warning(f"‚ö†Ô∏è –°–ø—Ä–æ–±–∞ {attempt + 1}/{max_retries} –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–∑–∏—Ü—ñ—ó {symbol}: {e}")
                await asyncio.sleep(retry_delay)
            else:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–∑–∏—Ü—ñ—ó {symbol} –ø—ñ—Å–ª—è {max_retries} —Å–ø—Ä–æ–±: {e}")
                return None


class PositionManager:
    """–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—è–º–∏ –Ω–∞ Binance Futures"""
    
    def __init__(self, client, leverage: int, position_size_usd: float, 
                 stop_loss_pct: float, take_profit_pct: float):
        self.client = client
        self.leverage = leverage
        self.position_size_usd = position_size_usd
        self.stop_loss_pct = stop_loss_pct
        self.take_profit_pct = take_profit_pct
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è
        self.open_positions_data = {}  # {symbol: {entry_time, prediction, confidence, features}}
        
        # Trailing stop –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É –ø—Ä–∏–±—É—Ç–∫—É
        self.trailing_stops = {}  # {symbol: {'best_price': float, 'trailing_stop': float}}
        
        # –ö–µ—à precision –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É (–æ—Ç—Ä–∏–º—É—î–º–æ –∑ exchangeInfo)
        self.symbol_info_cache = {}  # {symbol: {'quantityPrecision': int, 'pricePrecision': int, 'minQty': float}}
        
        # Database
        self.position_db = PositionDB() if DB_AVAILABLE else None
        if self.position_db:
            logger.info("‚úÖ PositionDB initialized")
        else:
            logger.warning("‚ö†Ô∏è Trading without database")
    
    async def get_symbol_info(self, symbol: str) -> dict:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å–∏–º–≤–æ–ª –∑ exchangeInfo (–∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º)"""
        if symbol in self.symbol_info_cache:
            return self.symbol_info_cache[symbol]
        
        try:
            exchange_info = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: self.client.futures_exchange_info()
            )
            
            for s in exchange_info['symbols']:
                if s['symbol'] == symbol:
                    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ LOT_SIZE —Ñ—ñ–ª—å—Ç—Ä –¥–ª—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
                    min_qty = 0.0
                    for f in s['filters']:
                        if f['filterType'] == 'LOT_SIZE':
                            min_qty = float(f['minQty'])
                            break
                    
                    info = {
                        'quantityPrecision': s['quantityPrecision'],
                        'pricePrecision': s['pricePrecision'],
                        'minQty': min_qty
                    }
                    self.symbol_info_cache[symbol] = info
                    logger.info(f"üìä {symbol}: precision={info['quantityPrecision']}, minQty={min_qty}")
                    return info
            
            # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
            logger.warning(f"‚ö†Ô∏è {symbol}: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ exchangeInfo, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è")
            return {'quantityPrecision': 2, 'pricePrecision': 2, 'minQty': 0.001}
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è exchangeInfo –¥–ª—è {symbol}: {e}")
            return {'quantityPrecision': 2, 'pricePrecision': 2, 'minQty': 0.001}
    
    def round_quantity(self, symbol: str, quantity: float) -> float:
        """–û–∫—Ä—É–≥–ª–µ–Ω–Ω—è quantity –∑–≥—ñ–¥–Ω–æ –ø—Ä–∞–≤–∏–ª Binance (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∫–µ—à)"""
        # –Ø–∫—â–æ —î –≤ –∫–µ—à—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ—á–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        if symbol in self.symbol_info_cache:
            precision = self.symbol_info_cache[symbol]['quantityPrecision']
        else:
            # Fallback –¥–æ –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å (–∑ test_exchange_info)
            precision_map = {
                'BTCUSDT': 3, 'ETHUSDT': 3, 'BNBUSDT': 2, 'SOLUSDT': 0,  # SOLUSDT: 0 (–Ω–µ 1)
                'ADAUSDT': 0, 'DOGEUSDT': 0, 'XRPUSDT': 1, 'LTCUSDT': 3,
                'LINKUSDT': 2, 'MATICUSDT': 0, 'DOTUSDT': 1, 'UNIUSDT': 2,
                'ATOMUSDT': 2, 'ETCUSDT': 2, 'XLMUSDT': 0, 'ALGOUSDT': 0,
                'VETUSDT': 0, 'FILUSDT': 1, 'TRXUSDT': 0, 'AVAXUSDT': 0  # AVAXUSDT: 0, FILUSDT: 1
            }
            precision = precision_map.get(symbol, 2)
        
        rounded = round(quantity, precision)
        return int(rounded) if precision == 0 else rounded
    
    def format_quantity(self, symbol: str, quantity: float) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è quantity –¥–ª—è Binance API (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∫–µ—à)"""
        # –Ø–∫—â–æ —î –≤ –∫–µ—à—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ—á–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        if symbol in self.symbol_info_cache:
            precision = self.symbol_info_cache[symbol]['quantityPrecision']
        else:
            # Fallback –¥–æ –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å (–∑ test_exchange_info)
            precision_map = {
                'BTCUSDT': 3, 'ETHUSDT': 3, 'BNBUSDT': 2, 'SOLUSDT': 0,  # SOLUSDT: 0 (–Ω–µ 1)
                'ADAUSDT': 0, 'DOGEUSDT': 0, 'XRPUSDT': 1, 'LTCUSDT': 3,
                'LINKUSDT': 2, 'MATICUSDT': 0, 'DOTUSDT': 1, 'UNIUSDT': 2,
                'ATOMUSDT': 2, 'ETCUSDT': 2, 'XLMUSDT': 0, 'ALGOUSDT': 0,
                'VETUSDT': 0, 'FILUSDT': 1, 'TRXUSDT': 0, 'AVAXUSDT': 0  # AVAXUSDT: 0, FILUSDT: 1
            }
            precision = precision_map.get(symbol, 2)
        
        if precision == 0:
            return str(int(quantity))
        return f"{quantity:.{precision}f}"
    
    async def cancel_all_orders(self, symbol: str) -> bool:
        """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤"""
        try:
            open_orders = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: self.client.futures_get_open_orders(symbol=symbol)
            )
            
            if not open_orders:
                return True
            
            logger.info(f"üóëÔ∏è {symbol}: —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è {len(open_orders)} –æ—Ä–¥–µ—Ä—ñ–≤...")
            
            for order in open_orders:
                try:
                    await asyncio.get_event_loop().run_in_executor(
                        None,
                        lambda o=order: self.client.futures_cancel_order(
                            symbol=symbol,
                            orderId=o['orderId']
                        )
                    )
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ –æ—Ä–¥–µ—Ä {order['orderId']}: {e}")
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä—ñ–≤ {symbol}: {e}")
            return False
    
    async def get_atr(self, symbol: str, get_market_data_func, period: int = 14) -> float:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è ATR –¥–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö SL/TP"""
        try:
            from training.rust_features import RustFeatureEngineer
            
            df = await get_market_data_func(symbol, '1h', 100)
            if df.empty:
                return 0.01
            
            feature_engineer = RustFeatureEngineer()
            df_features = feature_engineer.calculate_all(df, atr_periods=[period])
            
            atr_col = f'atr_{period}'
            if atr_col in df_features.columns:
                current_atr = df_features[atr_col].iloc[-1]
                if not pd.isna(current_atr):
                    return current_atr
            
            return 0.01
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ ATR –¥–ª—è {symbol}: {e}")
            return 0.01
    
    async def update_trailing_stop(self, symbol: str, current_price: float, 
                                   entry_price: float, side: str) -> bool:
        """
        –û–Ω–æ–≤–ª–µ–Ω–Ω—è trailing stop –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É –ø—Ä–∏–±—É—Ç–∫—É
        
        Args:
            symbol: –°–∏–º–≤–æ–ª
            current_price: –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞
            entry_price: –¶—ñ–Ω–∞ –≤—Ö–æ–¥—É
            side: 'LONG' –∞–±–æ 'SHORT'
        
        Returns:
            True —è–∫—â–æ —Ç—Ä–µ–±–∞ –∑–∞–∫—Ä–∏–≤–∞—Ç–∏ (trailing stop —Å–ø—Ä–∞—Ü—é–≤–∞–≤)
        """
        try:
            # –í—ñ–¥—Å–æ—Ç–æ–∫ –ø—Ä–∏–±—É—Ç–∫—É
            if side == 'LONG':
                profit_pct = (current_price - entry_price) / entry_price
            else:  # SHORT
                profit_pct = (entry_price - current_price) / entry_price
            
            # –ê–∫—Ç–∏–≤—É—î–º–æ trailing —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ —î –ø—Ä–∏–±—É—Ç–æ–∫ >= 1%
            if profit_pct < 0.01:
                return False
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è trailing –¥–ª—è —Å–∏–º–≤–æ–ª—É
            if symbol not in self.trailing_stops:
                self.trailing_stops[symbol] = {
                    'best_profit_pct': profit_pct,
                    'best_price': current_price,
                    'activated': True
                }
                logger.info(f"üéØ {symbol}: Trailing stop –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –ø—Ä–∏ +{profit_pct:.2%}")
                return False
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ—ó —Ü—ñ–Ω–∏
            trail = self.trailing_stops[symbol]
            if profit_pct > trail['best_profit_pct']:
                trail['best_profit_pct'] = profit_pct
                trail['best_price'] = current_price
                logger.info(f"üìà {symbol}: –ù–æ–≤–∏–π –ø—ñ–∫ –ø—Ä–∏–±—É—Ç–∫—É +{profit_pct:.2%} @ ${current_price:.2f}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü—ñ–Ω–∞ –≤—ñ–¥–∫–æ—Ç–∏–ª–∞—Å—è –Ω–∞ 50% –≤—ñ–¥ –ø—ñ–∫—É
            # –Ø–∫—â–æ –±—É–≤ +3%, –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –ø—Ä–∏ +1.5%
            threshold_pct = trail['best_profit_pct'] * 0.5
            
            if profit_pct < threshold_pct:
                logger.info(
                    f"üõë {symbol}: Trailing stop —Å–ø—Ä–∞—Ü—é–≤–∞–≤! "
                    f"–ü—ñ–∫: +{trail['best_profit_pct']:.2%}, "
                    f"–ó–∞—Ä–∞–∑: +{profit_pct:.2%}, "
                    f"–ü–æ—Ä—ñ–≥: +{threshold_pct:.2%}"
                )
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ trailing stop {symbol}: {e}")
            return False
    
    async def open_long(self, symbol: str, price: float, confidence: float, get_market_data_func) -> bool:
        """–í—ñ–¥–∫—Ä–∏—Ç—Ç—è LONG –ø–æ–∑–∏—Ü—ñ—ó"""
        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å–∏–º–≤–æ–ª (precision, minQty) - –í–ê–ñ–õ–ò–í–û: —Ä–æ–±–∏–º–æ —Ü–µ –ü–ï–†–®–ò–ú
            symbol_info = await self.get_symbol_info(symbol)
            
            # –°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–∞—Ä—ñ –æ—Ä–¥–µ—Ä–∏
            await self.cancel_all_orders(symbol)
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—ó —Ü—ñ–Ω–∏ –∑ –±—ñ—Ä–∂—ñ
            ticker = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: self.client.futures_symbol_ticker(symbol=symbol)
            )
            current_price = float(ticker['price'])
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–∫—Ç—É–∞–ª—å–Ω–æ—ó —Ü—ñ–Ω–∏
            position_value = self.position_size_usd
            quantity = position_value / current_price
            
            # –û–∫—Ä—É–≥–ª–µ–Ω–Ω—è (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∫–µ—à –∑ get_symbol_info)
            quantity = self.round_quantity(symbol, quantity)
            logger.info(f"üìê {symbol}: quantity={quantity} (precision={symbol_info['quantityPrecision']})")
            
            if quantity * current_price < 10:
                logger.warning(f"‚ö†Ô∏è –ó–∞–Ω–∞–¥—Ç–æ –º–∞–ª–µ–Ω—å–∫–∞ —Å—É–º–∞: ${quantity * current_price:.2f}")
                return False
            
            logger.info(f"üìà LONG {symbol}: {quantity} @ ${current_price:.2f} (target: ${self.position_size_usd})")
            
            # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞
            quantity_str = self.format_quantity(symbol, quantity)
            
            order = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: self.client.futures_create_order(
                    symbol=symbol,
                    side='BUY',
                    type='MARKET',
                    quantity=quantity_str
                )
            )
            
            logger.info(f"‚úÖ –û—Ä–¥–µ—Ä –≤–∏–∫–æ–Ω–∞–Ω–æ: {order['orderId']}")
            
            # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó
            await asyncio.sleep(1.5)
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–æ—ó —Ü—ñ–Ω–∏ –≤—Ö–æ–¥—É
            position_info = await check_position_static(self.client, symbol)
            
            if position_info and position_info['entry_price'] > 0:
                filled_price = position_info['entry_price']
                filled_qty = abs(position_info['amount'])
            else:
                filled_price = price
                filled_qty = quantity
            
            # SL/TP –∑ –∫–æ–Ω—Ñ—ñ–≥—É (–±–µ–∑ ATR)
            sl_distance = filled_price * self.stop_loss_pct
            tp_distance = filled_price * self.take_profit_pct
            
            sl_price = filled_price - sl_distance
            tp_price = filled_price + tp_distance
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è price precision –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è
            price_precision = symbol_info.get('pricePrecision', 2)
            
            # Stop-loss
            try:
                sl_order = await asyncio.get_event_loop().run_in_executor(
                    None,
                    lambda: self.client.futures_create_order(
                        symbol=symbol,
                        side='SELL',
                        type='STOP_MARKET',
                        stopPrice=round(sl_price, price_precision),
                        closePosition=True,  # üî• –ö–†–ò–¢–ò–ß–ù–û: –ó–ê–ö–†–ò–¢–ò –ø–æ–∑–∏—Ü—ñ—é, –Ω–µ –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ SHORT!
                        timeInForce='GTC'  # üîí –ö–†–ò–¢–ò–ß–ù–û: –æ—Ä–¥–µ—Ä –Ω–µ expired –¥–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
                    )
                )
                logger.info(f"üõë Stop-loss: ${sl_price:.{price_precision}f}")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ SL: {e}")
            
            # Take-profit
            try:
                tp_order = await asyncio.get_event_loop().run_in_executor(
                    None,
                    lambda: self.client.futures_create_order(
                        symbol=symbol,
                        side='SELL',
                        type='TAKE_PROFIT_MARKET',
                        stopPrice=round(tp_price, price_precision),
                        closePosition=True,  # üî• –ö–†–ò–¢–ò–ß–ù–û: –ó–ê–ö–†–ò–¢–ò –ø–æ–∑–∏—Ü—ñ—é!
                        timeInForce='GTC'
                    )
                )
                logger.info(f"üéØ Take-profit: ${tp_price:.{price_precision}f}")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ TP: {e}")
            
            # Telegram
            await telegram_notifier.send_message(
                f"‚úÖ OPENED LONG\n"
                f"Symbol: {symbol}\n"
                f"Entry: ${filled_price:.2f}\n"
                f"Quantity: {filled_qty:.6f}\n"
                f"Position: ${filled_qty * filled_price:.2f}\n"
                f"Margin: ${filled_qty * filled_price / self.leverage:.2f} ({self.leverage}x)\n"
                f"SL: ${sl_price:.2f}\n"
                f"TP: ${tp_price:.2f}\n"
                f"Confidence: {confidence:.2%}"
            )
            
            # –ë–î - –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
            if self.position_db:
                try:
                    position_id = await self.position_db.create_position(
                        symbol=symbol,
                        side='LONG',
                        entry_price=filled_price,
                        quantity=filled_qty,
                        leverage=self.leverage,
                        stop_loss_price=sl_price,
                        take_profit_price=tp_price,
                        ml_prediction='UP',
                        ml_confidence=confidence,
                        binance_order_id=order.get('orderId')
                    )
                    logger.info(f"üíæ Position saved to DB: #{position_id}")
                except Exception as e:
                    logger.error(f"‚ùå –ë–î –ø–æ–º–∏–ª–∫–∞: {e}")
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è online learning
            self.open_positions_data[symbol] = {
                'entry_time': datetime.now(),
                'entry_price': filled_price,
                'side': 'LONG',
                'prediction': 'UP',
                'confidence': confidence,
                'features': {}  # TODO: –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ —Ñ—ñ—á—ñ –∑ ML predictor
            }
            
            return True
        
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è LONG {symbol}: {e}", exc_info=True)
            await telegram_notifier.send_message(f"‚ùå ERROR opening LONG {symbol}: {str(e)[:100]}")
            return False
    
    async def open_short(self, symbol: str, price: float, confidence: float, get_market_data_func) -> bool:
        """–í—ñ–¥–∫—Ä–∏—Ç—Ç—è SHORT –ø–æ–∑–∏—Ü—ñ—ó"""
        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å–∏–º–≤–æ–ª (precision, minQty) - –í–ê–ñ–õ–ò–í–û: —Ä–æ–±–∏–º–æ —Ü–µ –ü–ï–†–®–ò–ú
            symbol_info = await self.get_symbol_info(symbol)
            
            # –°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–∞—Ä—ñ –æ—Ä–¥–µ—Ä–∏
            await self.cancel_all_orders(symbol)
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—ó —Ü—ñ–Ω–∏ –∑ –±—ñ—Ä–∂—ñ
            ticker = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: self.client.futures_symbol_ticker(symbol=symbol)
            )
            current_price = float(ticker['price'])
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–∫—Ç—É–∞–ª—å–Ω–æ—ó —Ü—ñ–Ω–∏
            position_value = self.position_size_usd
            quantity = position_value / current_price
            
            # –û–∫—Ä—É–≥–ª–µ–Ω–Ω—è (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∫–µ—à –∑ get_symbol_info)
            quantity = self.round_quantity(symbol, quantity)
            logger.info(f"üìê {symbol}: quantity={quantity} (precision={symbol_info['quantityPrecision']})")
            
            if quantity * current_price < 10:
                logger.warning(f"‚ö†Ô∏è –ó–∞–Ω–∞–¥—Ç–æ –º–∞–ª–µ–Ω—å–∫–∞ —Å—É–º–∞: ${quantity * current_price:.2f}")
                return False
            
            logger.info(f"üìâ SHORT {symbol}: {quantity} @ ${current_price:.2f} (target: ${self.position_size_usd})")
            
            # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞
            quantity_str = self.format_quantity(symbol, quantity)
            
            order = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: self.client.futures_create_order(
                    symbol=symbol,
                    side='SELL',
                    type='MARKET',
                    quantity=quantity_str
                )
            )
            
            logger.info(f"‚úÖ SHORT –≤—ñ–¥–∫—Ä–∏—Ç–æ: {order['orderId']}")
            
            await asyncio.sleep(1.5)
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–æ—ó —Ü—ñ–Ω–∏ –≤—Ö–æ–¥—É
            position_info = await check_position_static(self.client, symbol)
            
            if position_info and position_info['entry_price'] > 0:
                filled_price = position_info['entry_price']
                filled_qty = abs(position_info['amount'])
            else:
                filled_price = price
                filled_qty = quantity
            
            # SL/TP –∑ –∫–æ–Ω—Ñ—ñ–≥—É (–±–µ–∑ ATR)
            sl_distance = filled_price * self.stop_loss_pct
            tp_distance = filled_price * self.take_profit_pct
            
            sl_price = filled_price + sl_distance  # SHORT: –≤–∏—â–µ
            tp_price = filled_price - tp_distance  # SHORT: –Ω–∏–∂—á–µ
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è price precision –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è
            price_precision = symbol_info.get('pricePrecision', 2)
            
            # Stop-loss (BUY –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è SHORT)
            try:
                sl_order = await asyncio.get_event_loop().run_in_executor(
                    None,
                    lambda: self.client.futures_create_order(
                        symbol=symbol,
                        side='BUY',
                        type='STOP_MARKET',
                        stopPrice=round(sl_price, price_precision),
                        closePosition=True,  # üî• –ö–†–ò–¢–ò–ß–ù–û: –ó–ê–ö–†–ò–¢–ò –ø–æ–∑–∏—Ü—ñ—é, –Ω–µ –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ LONG!
                        timeInForce='GTC'  # üîí –ö–†–ò–¢–ò–ß–ù–û: –æ—Ä–¥–µ—Ä –Ω–µ expired –¥–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
                    )
                )
                logger.info(f"üõë Stop-loss: ${sl_price:.{price_precision}f}")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ SL: {e}")
            
            # Take-profit (BUY –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è SHORT)
            try:
                tp_order = await asyncio.get_event_loop().run_in_executor(
                    None,
                    lambda: self.client.futures_create_order(
                        symbol=symbol,
                        side='BUY',
                        type='TAKE_PROFIT_MARKET',
                        stopPrice=round(tp_price, price_precision),
                        closePosition=True,  # üî• –ö–†–ò–¢–ò–ß–ù–û: –ó–ê–ö–†–ò–¢–ò –ø–æ–∑–∏—Ü—ñ—é!
                        timeInForce='GTC'
                    )
                )
                logger.info(f"üéØ Take-profit: ${tp_price:.{price_precision}f}")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ TP: {e}")
            
            # Telegram
            await telegram_notifier.send_message(
                f"üìâ OPENED SHORT\n"
                f"Symbol: {symbol}\n"
                f"Entry: ${filled_price:.2f}\n"
                f"Quantity: {filled_qty:.6f}\n"
                f"Position: ${filled_qty * filled_price:.2f}\n"
                f"Margin: ${filled_qty * filled_price / self.leverage:.2f} ({self.leverage}x)\n"
                f"SL: ${sl_price:.2f}\n"
                f"TP: ${tp_price:.2f}\n"
                f"Confidence: {confidence:.2%}"
            )
            
            # –ë–î - –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
            if self.position_db:
                try:
                    position_id = await self.position_db.create_position(
                        symbol=symbol,
                        side='SHORT',
                        entry_price=filled_price,
                        quantity=filled_qty,
                        leverage=self.leverage,
                        stop_loss_price=sl_price,
                        take_profit_price=tp_price,
                        ml_prediction='DOWN',
                        ml_confidence=confidence,
                        binance_order_id=order.get('orderId')
                    )
                    logger.info(f"üíæ Position saved to DB: #{position_id}")
                except Exception as e:
                    logger.error(f"‚ùå –ë–î –ø–æ–º–∏–ª–∫–∞: {e}")
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è online learning
            self.open_positions_data[symbol] = {
                'entry_time': datetime.now(),
                'entry_price': filled_price,
                'side': 'SHORT',
                'prediction': 'DOWN',
                'confidence': confidence,
                'features': {}  # TODO: –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ —Ñ—ñ—á—ñ –∑ ML predictor
            }
            
            return True
        
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è SHORT {symbol}: {e}", exc_info=True)
            await telegram_notifier.send_message(f"‚ùå ERROR opening SHORT {symbol}: {str(e)[:100]}")
            return False
    
    async def close_long(self, symbol: str, position: dict, price: float, reason: str) -> bool:
        """–ó–∞–∫—Ä–∏—Ç—Ç—è LONG –ø–æ–∑–∏—Ü—ñ—ó"""
        try:
            quantity = abs(position['amount'])
            entry_price = position['entry_price']
            pnl = position['unrealized_pnl']
            
            logger.info(f"üìâ –ó–∞–∫—Ä–∏–≤–∞—î–º–æ LONG {symbol}: {quantity} @ ${price:.2f} (PnL: ${pnl:.2f})")
            
            quantity_str = self.format_quantity(symbol, quantity)
            
            order = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: self.client.futures_create_order(
                    symbol=symbol,
                    side='SELL',
                    type='MARKET',
                    quantity=quantity_str
                )
            )
            
            logger.info(f"‚úÖ LONG –∑–∞–∫—Ä–∏—Ç–æ: {order['orderId']}")
            
            # PnL%
            price_change_pct = ((price - entry_price) / entry_price) * 100
            pnl_pct = price_change_pct * self.leverage
            
            emoji = "üí∞" if pnl > 0 else "üìâ"
            await telegram_notifier.send_message(
                f"{emoji} CLOSED LONG\n"
                f"Symbol: {symbol}\n"
                f"Entry: ${entry_price:.2f}\n"
                f"Exit: ${price:.2f}\n"
                f"PnL: ${pnl:.2f} ({pnl_pct:+.2f}%)\n"
                f"Reason: {reason}"
            )
            
            # –ë–î - –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó
            if self.position_db:
                try:
                    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–∑–∏—Ü—ñ—é –≤ –ë–î
                    db_position = await self.position_db.get_position_by_symbol(symbol)
                    if db_position:
                        await self.position_db.close_position(
                            position_id=db_position['id'],
                            exit_price=price,
                            exit_reason=reason,
                            realized_pnl=pnl,
                            realized_pnl_pct=pnl_pct
                        )
                except Exception as e:
                    logger.error(f"‚ùå –ë–î –ø–æ–º–∏–ª–∫–∞: {e}")
            
            # Online Learning - –∞–Ω–∞–ª—ñ–∑ —É–≥–æ–¥–∏
            if symbol in self.open_positions_data:
                position_data = self.open_positions_data[symbol]
                online_learner.analyze_closed_trade({
                    'symbol': symbol,
                    'side': 'LONG',
                    'entry_price': entry_price,
                    'exit_price': price,
                    'entry_time': position_data['entry_time'],
                    'exit_time': datetime.now(),
                    'pnl': pnl,
                    'pnl_percentage': pnl_pct,
                    'exit_reason': reason,
                    'prediction': position_data['prediction'],
                    'confidence': position_data['confidence'],
                    'features': position_data.get('features', {})
                })
                del self.open_positions_data[symbol]
            
            return True
        
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è LONG {symbol}: {e}", exc_info=True)
            return False
    
    async def close_short(self, symbol: str, position: dict, price: float, reason: str) -> bool:
        """–ó–∞–∫—Ä–∏—Ç—Ç—è SHORT –ø–æ–∑–∏—Ü—ñ—ó"""
        try:
            quantity = abs(position['amount'])
            entry_price = position['entry_price']
            pnl = position['unrealized_pnl']
            
            logger.info(f"üìà –ó–∞–∫—Ä–∏–≤–∞—î–º–æ SHORT {symbol}: {quantity} @ ${price:.2f} (PnL: ${pnl:.2f})")
            
            quantity_str = self.format_quantity(symbol, quantity)
            
            order = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: self.client.futures_create_order(
                    symbol=symbol,
                    side='BUY',
                    type='MARKET',
                    quantity=quantity_str
                )
            )
            
            logger.info(f"‚úÖ SHORT –∑–∞–∫—Ä–∏—Ç–æ: {order['orderId']}")
            
            # PnL%
            price_change_pct = ((entry_price - price) / entry_price) * 100
            pnl_pct = price_change_pct * self.leverage
            
            await telegram_notifier.send_message(
                f"üìà CLOSED SHORT\n"
                f"Symbol: {symbol}\n"
                f"Entry: ${entry_price:.2f}\n"
                f"Exit: ${price:.2f}\n"
                f"PnL: ${pnl:.2f} ({pnl_pct:+.2f}%)\n"
                f"Reason: {reason}"
            )
            
            # –ë–î - –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó
            if self.position_db:
                try:
                    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–∑–∏—Ü—ñ—é –≤ –ë–î
                    db_position = await self.position_db.get_position_by_symbol(symbol)
                    if db_position:
                        await self.position_db.close_position(
                            position_id=db_position['id'],
                            exit_price=price,
                            exit_reason=reason,
                            realized_pnl=pnl,
                            realized_pnl_pct=pnl_pct
                        )
                except Exception as e:
                    logger.error(f"‚ùå –ë–î –ø–æ–º–∏–ª–∫–∞: {e}")
            
            # Online Learning - –∞–Ω–∞–ª—ñ–∑ —É–≥–æ–¥–∏
            if symbol in self.open_positions_data:
                position_data = self.open_positions_data[symbol]
                online_learner.analyze_closed_trade({
                    'symbol': symbol,
                    'side': 'SHORT',
                    'entry_price': entry_price,
                    'exit_price': price,
                    'entry_time': position_data['entry_time'],
                    'exit_time': datetime.now(),
                    'pnl': pnl,
                    'pnl_percentage': pnl_pct,
                    'exit_reason': reason,
                    'prediction': position_data['prediction'],
                    'confidence': position_data['confidence'],
                    'features': position_data.get('features', {})
                })
                del self.open_positions_data[symbol]
            
            return True
        
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è SHORT {symbol}: {e}", exc_info=True)
            return False
    
    async def ensure_position_protection(self, symbol: str, get_market_data_func) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è SL/TP –¥–æ —ñ—Å–Ω—É—é—á–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –±–µ–∑ –∑–∞—Ö–∏—Å—Ç—É
        """
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–∑–∏—Ü—ñ—ó
            position = await check_position_static(self.client, symbol)
            if not position:
                return True  # –ù–µ–º–∞—î –ø–æ–∑–∏—Ü—ñ—ó
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤
            orders = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: self.client.futures_get_open_orders(symbol=symbol)
            )
            
            has_sl = any(o['type'] == 'STOP_MARKET' for o in orders)
            has_tp = any(o['type'] == 'TAKE_PROFIT_MARKET' for o in orders)
            
            if has_sl and has_tp:
                return True  # –í–∂–µ –∑–∞—Ö–∏—â–µ–Ω–æ
            
            logger.warning(f"üõ°Ô∏è {symbol}: –ø–æ–∑–∏—Ü—ñ—è –±–µ–∑ –∑–∞—Ö–∏—Å—Ç—É (SL:{has_sl}, TP:{has_tp})")
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –ø–æ–∑–∏—Ü—ñ—ó
            side = position['side']
            entry_price = position['entry_price']
            quantity = abs(position['amount'])
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ ATR –¥–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö SL/TP
            atr = await self.get_atr(symbol, get_market_data_func, 14)
            sl_distance = 2.0 * atr
            tp_distance = 4.0 * atr
            
            # –î–ª—è –¥—É–∂–µ –¥–µ—à–µ–≤–∏—Ö –º–æ–Ω–µ—Ç (< $0.1) –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –≤—ñ–¥—Å—Ç–∞–Ω—å —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
            min_sl_pct = 0.015  # 1.5% –º—ñ–Ω—ñ–º—É–º –¥–ª—è SL
            min_tp_pct = 0.03   # 3% –º—ñ–Ω—ñ–º—É–º –¥–ª—è TP
            
            min_sl_distance = entry_price * min_sl_pct
            min_tp_distance = entry_price * min_tp_pct
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±—ñ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è (ATR –∞–±–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫)
            sl_distance = max(sl_distance, min_sl_distance)
            tp_distance = max(tp_distance, min_tp_distance)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–∏–º–≤–æ–ª –¥–ª—è precision
            symbol_info = await self.get_symbol_info(symbol)
            price_precision = symbol_info.get('pricePrecision', 2)
            
            if side == 'LONG':
                sl_price = entry_price - sl_distance
                tp_price = entry_price + tp_distance
                close_side = 'SELL'
            else:  # SHORT
                sl_price = entry_price + sl_distance
                tp_price = entry_price - tp_distance
                close_side = 'BUY'
            
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è Stop-Loss
            if not has_sl:
                try:
                    await asyncio.get_event_loop().run_in_executor(
                        None,
                        lambda: self.client.futures_create_order(
                            symbol=symbol,
                            side=close_side,
                            type='STOP_MARKET',
                            stopPrice=round(sl_price, price_precision),
                            closePosition=True,  # üî• –ö–†–ò–¢–ò–ß–ù–û: –ó–ê–ö–†–ò–¢–ò –ø–æ–∑–∏—Ü—ñ—é!
                            timeInForce='GTC'  # üîí –ö–†–ò–¢–ò–ß–ù–û: –æ—Ä–¥–µ—Ä –Ω–µ expired –¥–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
                        )
                    )
                    logger.info(f"‚úÖ {symbol}: –¥–æ–¥–∞–Ω–æ SL @ ${sl_price:.{price_precision}f}")
                except Exception as e:
                    logger.error(f"‚ùå {symbol}: –ø–æ–º–∏–ª–∫–∞ SL - {e}")
            
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è Take-Profit
            if not has_tp:
                try:
                    await asyncio.get_event_loop().run_in_executor(
                        None,
                        lambda: self.client.futures_create_order(
                            symbol=symbol,
                            side=close_side,
                            type='TAKE_PROFIT_MARKET',
                            stopPrice=round(tp_price, price_precision),
                            closePosition=True,  # üî• –ö–†–ò–¢–ò–ß–ù–û: –ó–ê–ö–†–ò–¢–ò –ø–æ–∑–∏—Ü—ñ—é!
                            timeInForce='GTC'
                        )
                    )
                    logger.info(f"‚úÖ {symbol}: –¥–æ–¥–∞–Ω–æ TP @ ${tp_price:.{price_precision}f}")
                except Exception as e:
                    logger.error(f"‚ùå {symbol}: –ø–æ–º–∏–ª–∫–∞ TP - {e}")
            
            # Telegram notification
            if not (has_sl and has_tp):
                await telegram_notifier.send_message(
                    f"üõ°Ô∏è –î–û–î–ê–ù–û –ó–ê–•–ò–°–¢\n"
                    f"Symbol: {symbol}\n"
                    f"Side: {side}\n"
                    f"Entry: ${entry_price:.2f}\n"
                    f"{'‚úÖ SL –¥–æ–¥–∞–Ω–æ' if not has_sl else '‚úì SL —î'}: ${sl_price:.2f}\n"
                    f"{'‚úÖ TP –¥–æ–¥–∞–Ω–æ' if not has_tp else '‚úì TP —î'}: ${tp_price:.2f}"
                )
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞—Ö–∏—Å—Ç—É {symbol}: {e}", exc_info=True)
            return False
