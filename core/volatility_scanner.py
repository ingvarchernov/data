#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìä VOLATILITY SCANNER
–°–∫–∞–Ω–µ—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ –¥–ª—è –ø–æ—à—É–∫—É –Ω–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∏—Ö –º–æ–Ω–µ—Ç
"""
import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Tuple
import pandas as pd
import numpy as np

logger = logging.getLogger(__name__)


class VolatilityScanner:
    """–°–∫–∞–Ω–µ—Ä –¥–ª—è –ø–æ—à—É–∫—É –≤–æ–ª–∞—Ç–∏–ª—å–Ω–∏—Ö –º–æ–Ω–µ—Ç"""
    
    def __init__(self, client, symbols: List[str]):
        self.client = client
        self.all_symbols = symbols
        self.volatility_cache = {}
        self.cache_time = {}
        self.cache_duration = 900  # 15 —Ö–≤–∏–ª–∏–Ω
    
    async def get_24h_stats(self, symbol: str) -> Dict:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è 24-–≥–æ–¥–∏–Ω–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            ticker = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: self.client.futures_ticker(symbol=symbol)
            )
            return {
                'symbol': symbol,
                'price_change_pct': float(ticker['priceChangePercent']),
                'volume': float(ticker['quoteVolume']),
                'high': float(ticker['highPrice']),
                'low': float(ticker['lowPrice']),
                'trades': int(ticker['count'])
            }
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {symbol}: {e}")
            return None
    
    async def calculate_volatility_score(self, symbol: str) -> float:
        """
        –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∫–æ—Ä—É –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ (0-100)
        –í—Ä–∞—Ö–æ–≤—É—î:
        - –¶—ñ–Ω–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω (high-low)
        - –û–±'—î–º —Ç–æ—Ä–≥—ñ–≤
        - –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–π–¥—ñ–≤
        - –ó–º—ñ–Ω—É —Ü—ñ–Ω–∏ –∑–∞ 24h
        """
        try:
            stats = await self.get_24h_stats(symbol)
            if not stats:
                return 0.0
            
            # 1. –¶—ñ–Ω–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω (—á–∏–º –±—ñ–ª—å—à–∏–π - —Ç–∏–º –∫—Ä–∞—â–µ)
            price_range_pct = ((stats['high'] - stats['low']) / stats['low']) * 100
            range_score = min(price_range_pct * 2, 40)  # –ú–∞–∫—Å–∏–º—É–º 40 –±–∞–ª—ñ–≤
            
            # 2. –ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏ –∑–∞ 24h (–∞–±—Å–æ–ª—é—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è)
            change_score = min(abs(stats['price_change_pct']) * 2, 30)  # –ú–∞–∫—Å–∏–º—É–º 30 –±–∞–ª—ñ–≤
            
            # 3. –û–±'—î–º (–Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π)
            # –ú—ñ–Ω—ñ–º—É–º $10M –¥–ª—è –≤–∏—Å–æ–∫–æ–≥–æ —Å–∫–æ—Ä—É
            volume_score = min((stats['volume'] / 10_000_000) * 20, 20)  # –ú–∞–∫—Å–∏–º—É–º 20 –±–∞–ª—ñ–≤
            
            # 4. –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–π–¥—ñ–≤ (–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å)
            # –ú—ñ–Ω—ñ–º—É–º 50k —Ç—Ä–µ–π–¥—ñ–≤ –¥–ª—è –≤–∏—Å–æ–∫–æ–≥–æ —Å–∫–æ—Ä—É
            trades_score = min((stats['trades'] / 50_000) * 10, 10)  # –ú–∞–∫—Å–∏–º—É–º 10 –±–∞–ª—ñ–≤
            
            total_score = range_score + change_score + volume_score + trades_score
            
            return round(total_score, 2)
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ {symbol}: {e}")
            return 0.0
    
    async def scan_all_symbols(self) -> List[Tuple[str, float, Dict]]:
        """
        –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö —Å–∏–º–≤–æ–ª—ñ–≤ –∑ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–º —Å–∫–æ—Ä—É
        –ü–æ–≤–µ—Ä—Ç–∞—î: [(symbol, score, stats), ...]
        """
        logger.info(f"üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ {len(self.all_symbols)} –º–æ–Ω–µ—Ç...")
        
        results = []
        tasks = []
        
        # –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∏–π –∑–±—ñ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        for symbol in self.all_symbols:
            tasks.append(self.get_24h_stats(symbol))
        
        stats_list = await asyncio.gather(*tasks)
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∫–æ—Ä—ñ–≤
        for stats in stats_list:
            if stats:
                symbol = stats['symbol']
                
                # –¶—ñ–Ω–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω
                price_range_pct = ((stats['high'] - stats['low']) / stats['low']) * 100
                range_score = min(price_range_pct * 2, 40)
                
                # –ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏
                change_score = min(abs(stats['price_change_pct']) * 2, 30)
                
                # –û–±'—î–º
                volume_score = min((stats['volume'] / 10_000_000) * 20, 20)
                
                # –¢—Ä–µ–π–¥–∏
                trades_score = min((stats['trades'] / 50_000) * 10, 10)
                
                total_score = range_score + change_score + volume_score + trades_score
                
                results.append((symbol, round(total_score, 2), stats))
        
        # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —Å–∫–æ—Ä–æ–º (–Ω–∞–π–∫—Ä–∞—â—ñ —Å–ø–æ—á–∞—Ç–∫—É)
        results.sort(key=lambda x: x[1], reverse=True)
        
        return results
    
    async def get_top_volatile_symbols(self, count: int = 6, min_score: float = 30.0) -> List[str]:
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø N –Ω–∞–π–≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—à–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
        
        Args:
            count: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤
            min_score: –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Å–∫–æ—Ä (30-50 - –ø–æ–º—ñ—Ä–Ω–∞, 50+ - –≤–∏—Å–æ–∫–∞)
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤
        """
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–µ—à—É
        now = datetime.now()
        if 'symbols' in self.volatility_cache:
            cache_age = (now - self.cache_time.get('symbols', datetime.min)).total_seconds()
            if cache_age < self.cache_duration:
                logger.info(f"üì¶ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–µ—à—É –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ (–≤—ñ–∫: {int(cache_age)}s)")
                return self.volatility_cache['symbols'][:count]
        
        # –ù–æ–≤–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
        results = await self.scan_all_symbols()
        
        # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–º —Å–∫–æ—Ä–æ–º
        filtered = [(s, sc, st) for s, sc, st in results if sc >= min_score]
        
        if not filtered:
            logger.warning(f"‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –º–æ–Ω–µ—Ç –∑—ñ —Å–∫–æ—Ä–æ–º >= {min_score}, –∑–Ω–∏–∂—É—î–º–æ –¥–æ {min_score * 0.7:.1f}")
            filtered = [(s, sc, st) for s, sc, st in results if sc >= min_score * 0.7]
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        logger.info(f"\n{'='*70}")
        logger.info(f"üìä –í–û–õ–ê–¢–ò–õ–¨–ù–Ü–°–¢–¨ (—Ç–æ–ø {min(10, len(filtered))})")
        logger.info(f"{'='*70}")
        for i, (symbol, score, stats) in enumerate(filtered[:10], 1):
            logger.info(
                f"{i:2d}. {symbol:12s} | "
                f"Score: {score:5.1f} | "
                f"Range: {((stats['high']-stats['low'])/stats['low']*100):5.2f}% | "
                f"Change: {stats['price_change_pct']:+6.2f}% | "
                f"Vol: ${stats['volume']/1_000_000:6.1f}M"
            )
        logger.info(f"{'='*70}\n")
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –∫–µ—à
        top_symbols = [s for s, _, _ in filtered[:count]]
        self.volatility_cache['symbols'] = top_symbols
        self.cache_time['symbols'] = now
        
        return top_symbols
    
    async def should_trade_symbol(self, symbol: str, min_score: float = 30.0) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤–∞—Ä—Ç–æ —Ç–æ—Ä–≥—É–≤–∞—Ç–∏ —Å–∏–º–≤–æ–ª (–¥–æ—Å—Ç–∞—Ç–Ω—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å)"""
        score = await self.calculate_volatility_score(symbol)
        return score >= min_score


# ============================================================================
# –†–û–ó–®–ò–†–ï–ù–ò–ô –°–ü–ò–°–û–ö –°–ò–ú–í–û–õ–Ü–í –î–õ–Ø –°–ö–ê–ù–£–í–ê–ù–ù–Ø
# ============================================================================
# –¶—ñ —Å–∏–º–≤–æ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è –∑ –ø–∞–ø–∫–∏ models/
# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ, –¥–ª—è —è–∫–∏—Ö —î –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω—ñ –º–æ–¥–µ–ª—ñ
try:
    from model_scanner import get_available_models
    EXTENDED_SYMBOLS = get_available_models()
except ImportError:
    # Fallback —è–∫—â–æ model_scanner –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
    EXTENDED_SYMBOLS = [
        'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'XRPUSDT', 'DOTUSDT',
        'SOLUSDT', 'AVAXUSDT', 'LINKUSDT', 'UNIUSDT', 'ATOMUSDT', 'MATICUSDT',
        'LTCUSDT', 'ETCUSDT', 'XLMUSDT', 'ALGOUSDT', 'VETUSDT', 'FILUSDT',
        'TRXUSDT', 'DOGEUSDT'
    ]
