"""
Analytics - –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–∏
"""
import asyncio
from datetime import datetime
import logging

from telegram_bot import telegram_notifier

logger = logging.getLogger(__name__)


class TradingSession:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ—ó —Å–µ—Å—ñ—ó"""
    def __init__(self):
        self.start_time = datetime.now()
        self.iterations = 0
        self.signals_generated = 0
        self.positions_opened = 0
        self.positions_closed = 0
        self.balance_history = []
        self.peak_balance = 0.0
        
    def duration(self):
        """–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Å–µ—Å—ñ—ó"""
        delta = datetime.now() - self.start_time
        hours, remainder = divmod(delta.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        return f"{hours}–≥–æ–¥ {minutes}—Ö–≤ {seconds}—Å–µ–∫"


async def get_analytics(bot, session: TradingSession, iteration: int):
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —ñ—Ç–µ—Ä–∞—Ü—ñ—ó
    
    Args:
        bot: TradingBot instance
        session: TradingSession instance  
        iteration: –ù–æ–º–µ—Ä —ñ—Ç–µ—Ä–∞—Ü—ñ—ó
    """
    try:
        leverage = bot.leverage
        
        logger.info(f"\n{'='*80}")
        logger.info(f"üìä –ê–ù–ê–õ–Ü–¢–ò–ö–ê - –Ü—Ç–µ—Ä–∞—Ü—ñ—è #{iteration}")
        logger.info(f"{'='*80}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ä–∞—Ö—É–Ω–∫—É
        account = await asyncio.get_event_loop().run_in_executor(
            None, bot.client.futures_account
        )
        
        balance = float(account['totalWalletBalance'])
        available = float(account['availableBalance'])
        unrealized_pnl = float(account['totalUnrealizedProfit'])
        margin_used = balance - available
        margin_ratio = (margin_used / balance * 100) if balance > 0 else 0
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –±–∞–ª–∞–Ω—Å—É
        session.balance_history.append(balance)
        if balance > session.peak_balance:
            session.peak_balance = balance
        
        # Drawdown
        drawdown = 0.0
        if session.peak_balance > 0:
            drawdown = ((session.peak_balance - balance) / session.peak_balance) * 100
        
        logger.info(f"\nüí∞ –†–ê–•–£–ù–û–ö:")
        logger.info(f"   –ë–∞–ª–∞–Ω—Å: ${balance:.2f}")
        logger.info(f"   –î–æ—Å—Ç—É–ø–Ω–æ: ${available:.2f}")
        logger.info(f"   Unrealized PnL: ${unrealized_pnl:.2f}")
        logger.info(f"   –ú–∞—Ä–∂–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞: {margin_ratio:.1f}%")
        logger.info(f"   Peak –±–∞–ª–∞–Ω—Å: ${session.peak_balance:.2f}")
        logger.info(f"   Drawdown: {drawdown:.2f}%")
        
        # –ü–æ–∑–∏—Ü—ñ—ó
        positions = await asyncio.get_event_loop().run_in_executor(
            None, bot.client.futures_position_information
        )
        
        active_positions = []
        total_pos_pnl = 0.0
        
        for pos in positions:
            amount = float(pos['positionAmt'])
            if amount == 0:
                continue
            
            entry_price = float(pos['entryPrice'])
            mark_price = float(pos['markPrice'])
            unrealized = float(pos['unRealizedProfit'])
            
            # PnL%
            notional = abs(amount * mark_price)
            initial_margin = notional / leverage
            pnl_pct = (unrealized / initial_margin * 100) if initial_margin > 0 else 0
            
            side = 'LONG' if amount > 0 else 'SHORT'
            
            active_positions.append({
                'symbol': pos['symbol'],
                'side': side,
                'size': abs(amount),
                'entry': entry_price,
                'mark': mark_price,
                'pnl': unrealized,
                'pnl_pct': pnl_pct,
            })
            total_pos_pnl += unrealized
        
        logger.info(f"\nüìà –ü–û–ó–ò–¶–Ü–á: {len(active_positions)}")
        if active_positions:
            for p in sorted(active_positions, key=lambda x: abs(x['pnl']), reverse=True):
                logger.info(
                    f"   {p['symbol']:<10} {p['side']:<5} "
                    f"${p['pnl']:>7.2f} ({p['pnl_pct']:>+6.2f}%) "
                    f"@ ${p['mark']:.8g}"
                )
            logger.info(f"   {'‚îÄ'*50}")
            logger.info(f"   {'–í–°–¨–û–ì–û':<16} ${total_pos_pnl:>7.2f}")
        
        # –û—Ä–¥–µ—Ä–∏
        orders = await asyncio.get_event_loop().run_in_executor(
            None, bot.client.futures_get_open_orders
        )
        
        sl_count = sum(1 for o in orders if o['type'] == 'STOP_MARKET')
        tp_count = sum(1 for o in orders if o['type'] == 'TAKE_PROFIT_MARKET')
        
        logger.info(f"\nüìã –û–†–î–ï–†–ò: {len(orders)}")
        if orders:
            logger.info(f"   Stop-Loss: {sl_count}")
            logger.info(f"   Take-Profit: {tp_count}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—ñ—ó
        logger.info(f"\n‚è±Ô∏è  –°–ï–°–Ü–Ø:")
        logger.info(f"   –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {session.duration()}")
        logger.info(f"   –Ü—Ç–µ—Ä–∞—Ü—ñ–π: {session.iterations}")
        logger.info(f"   –°–∏–≥–Ω–∞–ª—ñ–≤: {session.signals_generated}")
        logger.info(f"   –ü–æ–∑–∏—Ü—ñ–π –≤—ñ–¥–∫—Ä–∏—Ç–æ: {session.positions_opened}")
        logger.info(f"   –ü–æ–∑–∏—Ü—ñ–π –∑–∞–∫—Ä–∏—Ç–æ: {session.positions_closed}")
        
        # Health check
        issues = []
        warnings = []
        
        if balance < 1000:
            issues.append("‚ö†Ô∏è –ù–∏–∑—å–∫–∏–π –±–∞–ª–∞–Ω—Å (< $1000)")
        
        if margin_ratio > 80:
            issues.append(f"üö® –í–∏—Å–æ–∫–∞ –º–∞—Ä–∂–∞ ({margin_ratio:.1f}%)")
        elif margin_ratio > 50:
            warnings.append(f"‚ö†Ô∏è –ú–∞—Ä–∂–∞ {margin_ratio:.1f}%")
        
        if drawdown > 20:
            issues.append(f"üö® –í–µ–ª–∏–∫–∏–π drawdown ({drawdown:.1f}%)")
        elif drawdown > 10:
            warnings.append(f"‚ö†Ô∏è Drawdown {drawdown:.1f}%")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–∑–∏—Ü—ñ–π –±–µ–∑ –∑–∞—Ö–∏—Å—Ç—É
        for pos in active_positions:
            symbol = pos['symbol']
            symbol_orders = [o for o in orders if o['symbol'] == symbol]
            has_sl = any(o['type'] == 'STOP_MARKET' for o in symbol_orders)
            has_tp = any(o['type'] == 'TAKE_PROFIT_MARKET' for o in symbol_orders)
            if not has_sl or not has_tp:
                warnings.append(f"‚ö†Ô∏è {symbol} –±–µ–∑ –∑–∞—Ö–∏—Å—Ç—É (SL:{has_sl}, TP:{has_tp})")
        
        # –í–µ–ª–∏–∫—ñ –≤—Ç—Ä–∞—Ç–∏
        for pos in active_positions:
            if pos['pnl_pct'] < -50:
                issues.append(f"üö® {pos['symbol']}: –≤—Ç—Ä–∞—Ç–∏ {pos['pnl_pct']:.1f}%")
            elif pos['pnl_pct'] < -30:
                issues.append(f"‚ö†Ô∏è {pos['symbol']}: –≤—Ç—Ä–∞—Ç–∏ {pos['pnl_pct']:.1f}%")
        
        status = '‚úÖ OK' if not issues else ('‚ö†Ô∏è –£–í–ê–ì–ê' if not any('üö®' in i for i in issues) else 'üö® –ö–†–ò–¢–ò–ß–ù–û')
        
        logger.info(f"\nüè• –°–¢–ê–ù –°–ò–°–¢–ï–ú–ò: {status}")
        for warning in warnings:
            logger.warning(f"   {warning}")
        for issue in issues:
            logger.error(f"   {issue}")
        
        logger.info(f"{'='*80}\n")
        
        # Telegram (–∫–æ–∂–Ω—ñ 10 —ñ—Ç–µ—Ä–∞—Ü—ñ–π –∞–±–æ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö)
        if iteration % 10 == 0 or issues:
            message = (
                f"üìä –ó–í–Ü–¢ #{iteration}\n"
                f"{'‚îÅ'*30}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}\n"
                f"üìä PnL: ${unrealized_pnl:.2f}\n"
                f"üìà –ü–æ–∑–∏—Ü—ñ–π: {len(active_positions)}\n"
                f"‚è±Ô∏è –°–µ—Å—ñ—è: {session.duration()}\n"
                f"\nüè• –°—Ç–∞–Ω: {status}\n"
            )
            
            if issues:
                message += "\nüö® –ü–†–û–ë–õ–ï–ú–ò:\n" + "\n".join(issues) + "\n"
            if warnings:
                message += "\n‚ö†Ô∏è –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø:\n" + "\n".join(warnings[:3]) + "\n"
            
            if active_positions:
                # –¢–û–ü-3 –ù–ê–ô–ö–†–ê–©–Ü (–Ω–∞–π–±—ñ–ª—å—à–∏–π –ø—Ä–∏–±—É—Ç–æ–∫)
                best_positions = sorted(active_positions, key=lambda x: x['pnl'], reverse=True)[:3]
                if any(p['pnl'] > 0 for p in best_positions):
                    message += f"\nÔøΩ –¢–û–ü-3 –ù–ê–ô–ö–†–ê–©–Ü:\n"
                    for p in best_positions:
                        if p['pnl'] > 0:
                            message += f"{p['symbol']} {p['side']}: ${p['pnl']:.2f} ({p['pnl_pct']:+.1f}%)\n"
                
                # –¢–û–ü-3 –ù–ê–ô–ì–Ü–†–®–Ü (–Ω–∞–π–±—ñ–ª—å—à–∏–π –∑–±–∏—Ç–æ–∫)
                worst_positions = sorted(active_positions, key=lambda x: x['pnl'])[:3]
                if any(p['pnl'] < 0 for p in worst_positions):
                    message += f"\nüî¥ –¢–û–ü-3 –ù–ê–ô–ì–Ü–†–®–Ü:\n"
                    for p in worst_positions:
                        if p['pnl'] < 0:
                            message += f"{p['symbol']} {p['side']}: ${p['pnl']:.2f} ({p['pnl_pct']:+.1f}%)\n"
            
            await telegram_notifier.send_message(message)
        
        return {
            'balance': balance,
            'positions_count': len(active_positions),
            'total_pnl': total_pos_pnl,
            'healthy': len(issues) == 0,
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏: {e}")
        return None
