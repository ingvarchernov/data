#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç POSITION MONITOR - –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü—ñ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
–ö—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–∏–π –º–æ–¥—É–ª—å –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ –≤–µ–ª–∏–∫–∏—Ö –∑–±–∏—Ç–∫—ñ–≤
"""
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List
from binance.client import Client

from config import TRADING_CONFIG
from telegram_bot import telegram_notifier

logger = logging.getLogger(__name__)


class PositionMonitor:
    """
    –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
    
    –§—É–Ω–∫—Ü—ñ—ó:
    - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ PnL –∫–æ–∂–Ω—ñ 30-60 —Å–µ–∫—É–Ω–¥
    - –ü—Ä–∏–º—É—Å–æ–≤–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–∏ –≤–µ–ª–∏–∫–∏—Ö –∑–±–∏—Ç–∫–∞—Ö (>5%)
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è SL/TP
    - –í–∏—è–≤–ª–µ–Ω–Ω—è –∑–∞—Å—Ç—Ä—è–≥–ª–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
    - –ê–∫—Ç–∏–≤–∞—Ü—ñ—è —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è trailing stop
    """
    
    def __init__(
        self,
        client: Client,
        position_manager,
        check_interval: int = 15,  # üî• –ö–†–ò–¢–ò–ß–ù–û: 15 —Å–µ–∫—É–Ω–¥ –∑–∞–º—ñ—Å—Ç—å 45 (3x —à–≤–∏–¥—à–µ)
        max_loss_pct: float = 0.05,  # 5% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –∑–±–∏—Ç–æ–∫ (125% –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç)
        force_close_threshold: float = 0.04,  # üö® 4% –ö–†–ò–¢–ò–ß–ù–ò–ô –°–¢–û–ü (100% –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç = 1x –≤—Ç—Ä–∞—Ç–∞)
        stale_position_hours: int = 24,  # –ü–æ–∑–∏—Ü—ñ—è "–∑–∞—Å—Ç—Ä—è–≥–ª–∞" —á–µ—Ä–µ–∑ 24 –≥–æ–¥–∏–Ω–∏
        on_force_close_callback = None  # Callback –¥–ª—è blacklist –ø—ñ—Å–ª—è force close
    ):
        self.client = client
        self.position_manager = position_manager
        self.check_interval = check_interval
        self.max_loss_pct = max_loss_pct
        self.force_close_threshold = force_close_threshold
        self.stale_position_hours = stale_position_hours
        self.on_force_close_callback = on_force_close_callback
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è trailing stop
        self.trailing_config = TRADING_CONFIG.get('trailing_stop', {})
        self.trailing_enabled = self.trailing_config.get('enabled', True)
        self.trailing_activation = self.trailing_config.get('activation_profit', 0.02)  # 2%
        self.trailing_distance = self.trailing_config.get('trail_distance', 0.30)  # 30%
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.monitor_stats = {
            'checks_count': 0,
            'force_closes': 0,
            'trailing_activations': 0,
            'trailing_closes': 0,
            'last_check': None
        }
        
        # –ö–µ—à –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö —Ü—ñ–Ω –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –∑–º—ñ–Ω
        self.price_cache = {}
        
        logger.info("üîç Position Monitor initialized")
        logger.info(f"   Check interval: {check_interval}s")
        logger.info(f"   Max loss: {max_loss_pct:.1%}")
        logger.info(f"   Force close: {force_close_threshold:.1%}")
        logger.info(f"   Trailing stop: {'‚úÖ' if self.trailing_enabled else '‚ùå'}")
    
    async def monitor_loop(self):
        """–ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        logger.info("üöÄ Position Monitor started")
        
        while True:
            try:
                await self._check_all_positions()
                self.monitor_stats['checks_count'] += 1
                self.monitor_stats['last_check'] = datetime.now()
                
                # –ß–µ–∫–∞—î–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                await asyncio.sleep(self.check_interval)
                
            except Exception as e:
                logger.error(f"‚ùå Error in monitor loop: {e}", exc_info=True)
                await asyncio.sleep(5)  # –ö–æ—Ä–æ—Ç–∫–∞ –ø–∞—É–∑–∞ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
    
    async def _check_all_positions(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–æ–∑–∏—Ü—ñ—ó –∑ Binance
            positions = await asyncio.get_event_loop().run_in_executor(
                None,
                self.client.futures_position_information
            )
            
            open_positions = [
                pos for pos in positions
                if abs(float(pos['positionAmt'])) > 0.0001
            ]
            
            if not open_positions:
                return
            
            logger.debug(f"üîç Checking {len(open_positions)} positions...")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É –ø–æ–∑–∏—Ü—ñ—é
            for pos in open_positions:
                await self._check_position(pos)
                
        except Exception as e:
            logger.error(f"‚ùå Error checking positions: {e}")
    
    async def _check_position(self, pos: dict):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–¥–Ω—ñ—î—ó –ø–æ–∑–∏—Ü—ñ—ó"""
        try:
            symbol = pos['symbol']
            amt = float(pos['positionAmt'])
            entry_price = float(pos['entryPrice'])
            mark_price = float(pos['markPrice'])
            unrealized_pnl = float(pos['unRealizedProfit'])
            
            side = 'LONG' if amt > 0 else 'SHORT'
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ PnL —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
            initial_margin = float(pos['positionInitialMargin'])
            if initial_margin <= 0:
                return
            
            pnl_pct = unrealized_pnl / initial_margin
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏
            if side == 'LONG':
                price_change_pct = (mark_price - entry_price) / entry_price
            else:
                price_change_pct = (entry_price - mark_price) / entry_price
            
            # üî¥ –ö–†–ò–¢–ò–ß–ù–ò–ô –ó–ë–ò–¢–û–ö - –ü—Ä–∏–º—É—Å–æ–≤–µ –∑–∞–∫—Ä–∏—Ç—Ç—è
            if pnl_pct < -self.force_close_threshold:
                await self._force_close_position(
                    symbol, pos, pnl_pct,
                    reason="FORCE_CLOSE"  # –ë–µ–∑ –¥–µ—Ç–∞–ª–µ–π - –¥–ª—è –ë–î constraint
                )
                return
            
            # üü° –í–ï–õ–ò–ö–ò–ô –ó–ë–ò–¢–û–ö - –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
            if pnl_pct < -self.max_loss_pct:
                logger.warning(
                    f"‚ö†Ô∏è {symbol} {side}: Large loss {pnl_pct:+.2%} "
                    f"(${unrealized_pnl:+.2f}) @ ${mark_price:.4f}"
                )
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ —Ç—Ä–µ–±–∞ –∑–∞–∫—Ä–∏—Ç–∏ —Ä–∞–Ω—ñ—à–µ
                if pnl_pct < -self.max_loss_pct * 1.2:  # -6% –ø—Ä–∏ max_loss=5%
                    await telegram_notifier.send_message(
                        f"üö® LARGE LOSS ALERT\n"
                        f"{symbol} {side}\n"
                        f"PnL: {pnl_pct:+.2%} (${unrealized_pnl:+.2f})\n"
                        f"Entry: ${entry_price:.4f}\n"
                        f"Mark: ${mark_price:.4f}"
                    )
            
            # üü¢ TRAILING STOP –¥–ª—è –ø—Ä–∏–±—É—Ç–∫–æ–≤–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
            if self.trailing_enabled and price_change_pct >= self.trailing_activation:
                await self._handle_trailing_stop(
                    symbol, pos, side, entry_price, mark_price, price_change_pct
                )
            
            # üïê –ó–ê–°–¢–†–Ø–ì–õ–ê –ü–û–ó–ò–¶–Ü–Ø
            await self._check_stale_position(symbol, pos)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à —Ü—ñ–Ω
            self.price_cache[symbol] = {
                'mark_price': mark_price,
                'pnl_pct': pnl_pct,
                'last_update': datetime.now()
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error checking position {pos.get('symbol')}: {e}")
    
    async def _force_close_position(
        self,
        symbol: str,
        pos: dict,
        pnl_pct: float,
        reason: str
    ):
        """–ü—Ä–∏–º—É—Å–æ–≤–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó"""
        try:
            amt = float(pos['positionAmt'])
            side = 'LONG' if amt > 0 else 'SHORT'
            mark_price = float(pos['markPrice'])
            unrealized_pnl = float(pos['unRealizedProfit'])
            
            logger.error(
                f"üö® FORCE CLOSE: {symbol} {side}\n"
                f"   PnL: {pnl_pct:+.2%} (${unrealized_pnl:+.2f})\n"
                f"   Reason: {reason}"
            )
            
            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é
            position_data = {
                'symbol': symbol,
                'amount': abs(amt),
                'entry_price': float(pos['entryPrice']),
                'unrealized_pnl': unrealized_pnl,
                'side': side
            }
            
            if side == 'LONG':
                success = await self.position_manager.close_long(
                    symbol, position_data, mark_price, reason
                )
            else:
                success = await self.position_manager.close_short(
                    symbol, position_data, mark_price, reason
                )
            
            if success:
                self.monitor_stats['force_closes'] += 1
                
                # –í–∏–∫–ª–∏–∫–∞—î–º–æ callback –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ blacklist
                if self.on_force_close_callback:
                    try:
                        self.on_force_close_callback(symbol, 'FORCE_CLOSE', unrealized_pnl)
                    except Exception as e:
                        logger.error(f"‚ùå Error in force close callback: {e}")
                
                # –ó–∞–ø—É—Å–∫–∞—î–º–æ –µ–∫—Å—Ç—Ä–µ–Ω–µ –¥–æ—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤ —Ñ–æ–Ω—ñ (–Ω–µ –±–ª–æ–∫—É—î–º–æ)
                asyncio.create_task(self._trigger_emergency_retrain(symbol, pnl_pct))
                
                # Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–±–µ–∑ Markdown —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ parse errors)
                pnl_pct_str = f"{pnl_pct:+.2%}"
                pnl_usd_str = f"${unrealized_pnl:+.2f}"
                
                await telegram_notifier.send_message(
                    f"üö® FORCE CLOSED\n"
                    f"====================\n"
                    f"{symbol} {side}\n"
                    f"PnL: {pnl_pct_str} ({pnl_usd_str})\n"
                    f"Critical loss detected\n"
                    f"\n‚ö†Ô∏è Position protection activated",
                    parse_mode=None  # –í—ñ–¥–∫–ª—é—á–∞—î–º–æ Markdown
                )
        except Exception as e:
            logger.error(f"‚ùå Error force closing {symbol}: {e}")
    
    async def _handle_trailing_stop(
        self,
        symbol: str,
        pos: dict,
        side: str,
        entry_price: float,
        mark_price: float,
        profit_pct: float
    ):
        """–û–±—Ä–æ–±–∫–∞ trailing stop"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ trailing –∑ position_manager
            if symbol not in self.position_manager.trailing_stops:
                # –ê–∫—Ç–∏–≤—É—î–º–æ trailing
                self.position_manager.trailing_stops[symbol] = {
                    'best_profit_pct': profit_pct,
                    'best_price': mark_price,
                    'activated': True
                }
                
                self.monitor_stats['trailing_activations'] += 1
                
                logger.info(
                    f"üéØ {symbol}: Trailing stop ACTIVATED at +{profit_pct:.2%} "
                    f"(${mark_price:.4f})"
                )
                return
            
            # –û–Ω–æ–≤–ª—é—î–º–æ trailing
            trail = self.position_manager.trailing_stops[symbol]
            
            # –ù–æ–≤–∏–π –ø—ñ–∫?
            if profit_pct > trail['best_profit_pct']:
                old_best = trail['best_profit_pct']
                trail['best_profit_pct'] = profit_pct
                trail['best_price'] = mark_price
                
                logger.info(
                    f"üìà {symbol}: New profit peak +{profit_pct:.2%} "
                    f"(was +{old_best:.2%})"
                )
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç—Ä–µ–±–∞ –∑–∞–∫—Ä–∏–≤–∞—Ç–∏
            threshold_pct = trail['best_profit_pct'] * (1 - self.trailing_distance)
            
            if profit_pct < threshold_pct:
                # Trailing stop —Å–ø—Ä–∞—Ü—é–≤–∞–≤!
                logger.info(
                    f"üõë {symbol}: TRAILING STOP triggered!\n"
                    f"   Peak: +{trail['best_profit_pct']:.2%}\n"
                    f"   Current: +{profit_pct:.2%}\n"
                    f"   Threshold: +{threshold_pct:.2%}"
                )
                
                # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ
                amt = float(pos['positionAmt'])
                unrealized_pnl = float(pos['unRealizedProfit'])
                
                position_data = {
                    'symbol': symbol,
                    'amount': abs(amt),
                    'entry_price': entry_price,
                    'unrealized_pnl': unrealized_pnl,
                    'side': side
                }
                
                if side == 'LONG':
                    success = await self.position_manager.close_long(
                        symbol, position_data, mark_price, "TRAILING_STOP"
                    )
                else:
                    success = await self.position_manager.close_short(
                        symbol, position_data, mark_price, "TRAILING_STOP"
                    )
                
                if success:
                    self.monitor_stats['trailing_closes'] += 1
                    
                    # –í–∏–¥–∞–ª—è—î–º–æ –∑ trailing
                    del self.position_manager.trailing_stops[symbol]
                    
                    # Telegram
                    await telegram_notifier.send_message(
                        f"üéØ TRAILING STOP\n"
                        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                        f"{symbol} {side}\n"
                        f"Peak: +{trail['best_profit_pct']:.2%}\n"
                        f"Closed: +{profit_pct:.2%}\n"
                        f"PnL: ${unrealized_pnl:+.2f}\n"
                        f"\n‚úÖ Profit secured"
                    )
                    
        except Exception as e:
            logger.error(f"‚ùå Error handling trailing stop for {symbol}: {e}")
    
    async def _check_stale_position(self, symbol: str, pos: dict):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞—Å—Ç—Ä—è–≥–ª—É –ø–æ–∑–∏—Ü—ñ—é"""
        try:
            # TODO: –î–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —á–∞—Å—É –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∑ –ë–î
            # –ó–∞—Ä–∞–∑ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É—î–º–æ —è–∫—â–æ –ø–æ–∑–∏—Ü—ñ—è –¥–æ–≤–≥–æ –±–µ–∑ –∑–º—ñ–Ω
            
            if symbol in self.price_cache:
                last_check = self.price_cache[symbol].get('last_update')
                if last_check and (datetime.now() - last_check).total_seconds() > 3600:
                    # –ü–æ–∑–∏—Ü—ñ—è –Ω–µ –∑–º—ñ–Ω—é–≤–∞–ª–∞—Å—å –±—ñ–ª—å—à–µ –≥–æ–¥–∏–Ω–∏
                    mark_price = float(pos['markPrice'])
                    cached_price = self.price_cache[symbol]['mark_price']
                    
                    price_diff = abs(mark_price - cached_price) / cached_price
                    
                    if price_diff < 0.001:  # –ú–µ–Ω—à–µ 0.1% –∑–º—ñ–Ω–∏
                        logger.warning(
                            f"‚è∞ {symbol}: Stale position detected "
                            f"(no significant price movement for 1h)"
                        )
        except Exception as e:
            logger.debug(f"Error checking stale position {symbol}: {e}")
    
    def get_stats(self) -> Dict:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∞"""
        return {
            **self.monitor_stats,
            'uptime_seconds': (
                (datetime.now() - self.monitor_stats['last_check']).total_seconds()
                if self.monitor_stats['last_check'] else 0
            )
        }
    
    async def _trigger_emergency_retrain(self, symbol: str, loss_pct: float):
        """
        –ï–∫—Å—Ç—Ä–µ–Ω–µ –¥–æ—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ –ø—ñ—Å–ª—è –∫—Ä–∏—Ç–∏—á–Ω–æ—ó –ø–æ–º–∏–ª–∫–∏
        
        –ó–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –≤ —Ñ–æ–Ω—ñ –ø—ñ—Å–ª—è force close, –Ω–µ –±–ª–æ–∫—É—î —Ç–æ—Ä–≥—ñ–≤–ª—é
        """
        try:
            logger.warning(f"üîÑ –ó–∞–ø—É—Å–∫ –µ–∫—Å—Ç—Ä–µ–Ω–æ–≥–æ –¥–æ—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è {symbol} (–≤—Ç—Ä–∞—Ç–∞: {loss_pct:.2%})")
            
            from incremental_retrain import IncrementalRetrainer
            retrainer = IncrementalRetrainer()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –Ω–µ–≤–¥–∞–ª–∏—Ö —É–≥–æ–¥
            failed_positions = await retrainer.get_failed_positions(symbol=symbol, days=1)
            
            if len(failed_positions) < 2:
                logger.info(f"‚ÑπÔ∏è {symbol}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –¥–æ—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ {len(failed_positions)} –ø–æ–∑–∏—Ü—ñ–π)")
                return
            
            logger.info(f"üìä {symbol}: –∑–Ω–∞–π–¥–µ–Ω–æ {len(failed_positions)} –Ω–µ–≤–¥–∞–ª–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –∑–∞ –æ—Å—Ç–∞–Ω–Ω—é –¥–æ–±—É")
            
            # –î–æ—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
            success = await retrainer.retrain_symbol(symbol, reason="emergency_force_close")
            
            if success:
                logger.info(f"‚úÖ {symbol}: –µ–∫—Å—Ç—Ä–µ–Ω–µ –¥–æ—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ")
                await telegram_notifier.send_message(
                    f"‚úÖ EMERGENCY RETRAIN\n"
                    f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    f"{symbol}\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: Force close {loss_pct:.2%}\n"
                    f"–î–∞–Ω—ñ: {len(failed_positions)} –Ω–µ–≤–¥–∞–ª–∏—Ö –ø–æ–∑–∏—Ü—ñ–π\n"
                    f"–°—Ç–∞—Ç—É—Å: –£—Å–ø—ñ—à–Ω–æ",
                    parse_mode=None
                )
            else:
                logger.error(f"‚ùå {symbol}: –µ–∫—Å—Ç—Ä–µ–Ω–µ –¥–æ—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å")
            
            # –ó–∞–∫—Ä–∏—Ç—Ç—è –ë–î
            if hasattr(retrainer.db, 'db') and hasattr(retrainer.db.db, 'close'):
                await retrainer.db.db.close()
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å—Ç—Ä–µ–Ω–æ–≥–æ –¥–æ—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è {symbol}: {e}")
            import traceback
            traceback.print_exc()


async def start_monitor(
    client: Client, 
    position_manager,
    on_force_close_callback=None
) -> PositionMonitor:
    """
    –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∞ –ø–æ–∑–∏—Ü—ñ–π
    
    Args:
        client: Binance client
        position_manager: PositionManager instance
        on_force_close_callback: Callback(symbol, reason, pnl) –¥–ª—è blacklist
    
    Usage:
        monitor = await start_monitor(client, position_manager, callback)
        # –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∞—Ü—é—î –≤ —Ñ–æ–Ω—ñ
    """
    monitor = PositionMonitor(
        client, 
        position_manager,
        on_force_close_callback=on_force_close_callback
    )
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤ background
    asyncio.create_task(monitor.monitor_loop())
    
    logger.info("‚úÖ Position Monitor started in background")
    return monitor
