#!/usr/bin/env python3
"""
üìä –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
"""
import os
import glob
import pandas as pd
from datetime import datetime

def monitor_training():
    """–ü–æ–∫–∞–∑—É—î –ø—Ä–æ–≥—Ä–µ—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"""
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π CSV —Ñ–∞–π–ª
    csv_files = glob.glob('models/classification_BTC/training_*.csv')
    
    if not csv_files:
        print("‚ùå –§–∞–π–ª–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    latest_csv = max(csv_files, key=os.path.getctime)
    
    print("="*80)
    print(f"üìä –ú–û–ù–Ü–¢–û–†–ò–ù–ì –¢–†–ï–ù–£–í–ê–ù–ù–Ø")
    print("="*80)
    print(f"\nüìÅ –§–∞–π–ª: {latest_csv}")
    
    try:
        df = pd.read_csv(latest_csv)
        
        if len(df) == 0:
            print("‚è≥ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —â–µ –Ω–µ –ø–æ—á–∞–ª–æ—Å—è...")
            return
        
        # –û—Å—Ç–∞–Ω–Ω—è –µ–ø–æ—Ö–∞
        last_epoch = len(df)
        last_row = df.iloc[-1]
        
        print(f"\nüìà –ü—Ä–æ–≥—Ä–µ—Å:")
        print(f"   –ü–æ—Ç–æ—á–Ω–∞ –µ–ø–æ—Ö–∞: {last_epoch}")
        print(f"   Train accuracy: {last_row['accuracy']:.4f} ({last_row['accuracy']*100:.2f}%)")
        print(f"   Val accuracy:   {last_row['val_accuracy']:.4f} ({last_row['val_accuracy']*100:.2f}%)")
        print(f"   Train loss:     {last_row['loss']:.4f}")
        print(f"   Val loss:       {last_row['val_loss']:.4f}")
        print(f"   Learning rate:  {last_row['learning_rate']:.2e}")
        
        # –ù–∞–π–∫—Ä–∞—â–∞ val accuracy
        best_epoch = df['val_accuracy'].idxmax() + 1
        best_acc = df['val_accuracy'].max()
        
        print(f"\nüèÜ –ù–∞–π–∫—Ä–∞—â–∞ val accuracy:")
        print(f"   –ï–ø–æ—Ö–∞: {best_epoch}")
        print(f"   Accuracy: {best_acc:.4f} ({best_acc*100:.2f}%)")
        
        # –¢—Ä–µ–Ω–¥ (–æ—Å—Ç–∞–Ω–Ω—ñ 5 epochs)
        if len(df) >= 5:
            recent_trend = df['val_accuracy'].tail(5)
            trend_change = recent_trend.iloc[-1] - recent_trend.iloc[0]
            
            print(f"\nüìä –¢—Ä–µ–Ω–¥ (–æ—Å—Ç–∞–Ω–Ω—ñ 5 epochs):")
            if trend_change > 0.01:
                print(f"   üìà –ó—Ä–æ—Å—Ç–∞–Ω–Ω—è: +{trend_change*100:.2f}%")
            elif trend_change < -0.01:
                print(f"   üìâ –ü–∞–¥—ñ–Ω–Ω—è: {trend_change*100:.2f}%")
            else:
                print(f"   ‚û°Ô∏è –°—Ç–∞–±—ñ–ª—å–Ω–∏–π: {trend_change*100:.2f}%")
        
        # –ì—Ä–∞—Ñ—ñ–∫ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 20 epochs
        if len(df) >= 10:
            print(f"\nüìâ Val Accuracy (–æ—Å—Ç–∞–Ω–Ω—ñ 10-20 epochs):")
            start_idx = max(0, len(df) - 20)
            for idx in range(start_idx, len(df)):
                epoch_num = idx + 1
                acc = df.iloc[idx]['val_accuracy']
                bar_length = int(acc * 50)  # Scale to 50 chars
                bar = '‚ñà' * bar_length + '‚ñë' * (50 - bar_length)
                print(f"   E{epoch_num:3d}: {bar} {acc*100:.2f}%")
        
        # –ß–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        mod_time = datetime.fromtimestamp(os.path.getmtime(latest_csv))
        time_ago = datetime.now() - mod_time
        
        print(f"\n‚è∞ –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {time_ago.seconds // 60} —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    print("="*80)


if __name__ == "__main__":
    import sys
    import time
    
    # –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç --watch, –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –∫–æ–∂–Ω—ñ 60 —Å–µ–∫—É–Ω–¥
    if len(sys.argv) > 1 and sys.argv[1] == '--watch':
        print("üëÅÔ∏è –†–µ–∂–∏–º –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É (–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 60 —Å–µ–∫). Ctrl+C –¥–ª—è –≤–∏—Ö–æ–¥—É.")
        try:
            while True:
                os.system('clear' if os.name == 'posix' else 'cls')
                monitor_training()
                print("\n‚è≥ –ù–∞—Å—Ç—É–ø–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
                time.sleep(60)
        except KeyboardInterrupt:
            print("\nüëã –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ")
    else:
        monitor_training()
        print("\nüí° –ü—ñ–¥–∫–∞–∑–∫–∞: –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ --watch –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
