#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø—É—Å–∫ trading bot - –æ–¥–Ω–∞ —ñ—Ç–µ—Ä–∞—Ü—ñ—è
"""
import asyncio
import sys
import os

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from simple_trading_bot import SimpleTradingBot

import logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def test_single_iteration():
    """–¢–µ—Å—Ç –æ–¥–Ω—ñ—î—ó —ñ—Ç–µ—Ä–∞—Ü—ñ—ó"""
    logger.info("=" * 70)
    logger.info("üß™ –¢–ï–°–¢–û–í–ò–ô –ó–ê–ü–£–°–ö TRADING BOT (1 —ñ—Ç–µ—Ä–∞—Ü—ñ—è)")
    logger.info("=" * 70)
    
    try:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞ (–º—É–ª—å—Ç–∏—Å–∏–º–≤–æ–ª–∏)
        symbols = ['BTCUSDT']  # –¢—ñ–ª—å–∫–∏ BTC –¥–ª—è —Ç–µ—Å—Ç—É
        bot = SimpleTradingBot(symbols=symbols, testnet=True, enable_trading=False)
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π
        logger.info("\nüì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π...")
        bot.load_models()
        
        # –ë–∞–ª–∞–Ω—Å
        logger.info("\nüí∞ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É...")
        balance = await bot.get_balance()
        
        if balance == 0:
            logger.warning("‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å 0 - –º–æ–∂–ª–∏–≤–æ –ø–æ–º–∏–ª–∫–∞ API –∞–±–æ testnet –Ω–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π")
        
        # –¢–µ—Å—Ç—É—î–º–æ –∫–æ–∂–µ–Ω —Å–∏–º–≤–æ–ª
        for symbol in symbols:
            logger.info(f"\n{'='*70}")
            logger.info(f"üìä –¢–ï–°–¢–£–í–ê–ù–ù–Ø: {symbol}")
            logger.info(f"{'='*70}")
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
            logger.info(f"\nüìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}...")
            df = await bot.get_market_data(symbol, interval='4h', limit=500)
            
            if df.empty:
                logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—å –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è {symbol}")
                continue
            
            logger.info(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(df)} —Å–≤—ñ—á–æ–∫")
            logger.info(f"   –ü–µ—Ä—ñ–æ–¥: {df.index[0]} - {df.index[-1]}")
            logger.info(f"   –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${df['close'].iloc[-1]:.2f}")
            
            # –ü—Ä–æ–≥–Ω–æ–∑
            logger.info(f"\nü§ñ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–≥–Ω–æ–∑—É –¥–ª—è {symbol}...")
            prediction = await bot.predict(symbol, df)
            
            if not prediction:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É –¥–ª—è {symbol}")
                continue
            
            logger.info("\n" + "=" * 70)
            logger.info(f"üìà –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–ì–ù–û–ó–£: {symbol}")
            logger.info("=" * 70)
            logger.info(f"–ù–∞–ø—Ä—è–º–æ–∫:      {prediction['prediction']}")
            logger.info(f"–í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å:   {prediction['confidence']:.2%}")
            logger.info(f"Proba DOWN:    {prediction['proba_down']:.2%}")
            logger.info(f"Proba UP:      {prediction['proba_up']:.2%}")
            logger.info(f"–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞:  ${prediction['current_price']:.2f}")
            logger.info(f"–ß–∞—Å:           {prediction['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}")
            logger.info("=" * 70)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–∑–∏—Ü—ñ–π
            logger.info(f"\nüìä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ç–æ—á–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è {symbol}...")
            position = await bot.check_position(symbol)
            
            if position:
                logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü—ñ—é:")
                logger.info(f"   –ù–∞–ø—Ä—è–º–æ–∫:    {position['side']}")
                logger.info(f"   –ö—ñ–ª—å–∫—ñ—Å—Ç—å:   {abs(position['amount']):.6f}")
                logger.info(f"   –í—Ö—ñ–¥:        ${position['entry_price']:.2f}")
                logger.info(f"   Unrealized:  ${position['unrealized_pnl']:.2f}")
            else:
                logger.info("‚ÑπÔ∏è –ü–æ–∑–∏—Ü—ñ–π –Ω–µ–º–∞—î")
            
            # –¢–æ—Ä–≥–æ–≤–∞ –ª–æ–≥—ñ–∫–∞
            logger.info(f"\nüéØ –ê–Ω–∞–ª—ñ–∑ —Ç–æ—Ä–≥–æ–≤–æ—ó –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–ª—è {symbol}...")
            
            if prediction['confidence'] >= 0.70:
                if prediction['prediction'] == 'UP' and not position:
                    logger.info("üìà –°–ò–ì–ù–ê–õ: –í–Ü–î–ö–†–ò–¢–ò LONG")
                    logger.info(f"   –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π –≤—Ö—ñ–¥: ${prediction['current_price']:.2f}")
                    logger.info(f"   –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {prediction['confidence']:.2%}")
                    logger.info("   ‚ö†Ô∏è DEMO MODE - —É–≥–æ–¥–∞ –Ω–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è")
                elif prediction['prediction'] == 'DOWN' and position and position['side'] == 'LONG':
                    logger.info("üìâ –°–ò–ì–ù–ê–õ: –ó–ê–ö–†–ò–¢–ò LONG")
                    logger.info(f"   –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${prediction['current_price']:.2f}")
                    logger.info(f"   PnL: ${position['unrealized_pnl']:.2f}")
                    logger.info("   ‚ö†Ô∏è DEMO MODE - —É–≥–æ–¥–∞ –Ω–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è")
                else:
                    logger.info("‚è∏Ô∏è –£–¢–†–ò–ú–ê–ù–ù–Ø –ø–æ–∑–∏—Ü—ñ—ó")
            else:
                logger.info(f"‚è∏Ô∏è –û–ß–Ü–ö–£–í–ê–ù–ù–Ø (–Ω–∏–∑—å–∫–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {prediction['confidence']:.2%})")
        
        logger.info("\n" + "=" * 70)
        logger.info("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û")
        logger.info("=" * 70)
        
        return True
        
    except KeyboardInterrupt:
        logger.info("\nüõë –ü–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        return False
    except Exception as e:
        logger.error(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", exc_info=True)
        return False


async def main():
    success = await test_single_iteration()
    return 0 if success else 1


if __name__ == '__main__':
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
