#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üóÑÔ∏è DATABASE INITIALIZATION
–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
"""
import os
import sys
import logging
from pathlib import Path
from dotenv import load_dotenv
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

load_dotenv()
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)


def get_db_config():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –ë–î –∑ environment"""
    db_url = os.getenv('DATABASE_URL')
    
    if db_url:
        # –ü–∞—Ä—Å–∏–Ω–≥ DATABASE_URL (—Ñ–æ—Ä–º–∞—Ç: postgresql://user:password@host:port/dbname)
        from urllib.parse import urlparse, unquote
        
        # –Ø–∫—â–æ –ø–∞—Ä–æ–ª—å –º—ñ—Å—Ç–∏—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∏, –≤–æ–Ω–∏ –º–∞—é—Ç—å –±—É—Ç–∏ –∑–∞–∫–æ–¥–æ–≤–∞–Ω—ñ
        # –ê–ª–µ —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ –∑–∞–∫–æ–¥–æ–≤–∞–Ω—ñ, –æ–±—Ä–æ–±–ª—è—î–º–æ –≤—Ä—É—á–Ω—É
        try:
            parsed = urlparse(db_url)
            
            # –Ø–∫—â–æ –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ—Ä—Ç—É –∑–ª–∞–º–∞–≤—Å—è —á–µ—Ä–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∏ –≤ –ø–∞—Ä–æ–ª—ñ
            # –ü–∞—Ä—Å–∏–º–æ –≤—Ä—É—á–Ω—É
            if '@' in db_url:
                # postgresql://user:password@host:port/dbname
                protocol_part, rest = db_url.split('://', 1)
                
                # –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ credentials —Ç–∞ host_db
                if '@' in rest:
                    credentials, host_db = rest.rsplit('@', 1)
                    
                    # –†–æ–∑–¥—ñ–ª—è—î–º–æ user:password
                    if ':' in credentials:
                        user, password = credentials.split(':', 1)
                    else:
                        user = credentials
                        password = ''
                    
                    # –†–æ–∑–¥—ñ–ª—è—î–º–æ host:port/dbname
                    if '/' in host_db:
                        host_port, database = host_db.split('/', 1)
                    else:
                        host_port = host_db
                        database = 'trading_db'
                    
                    # –†–æ–∑–¥—ñ–ª—è—î–º–æ host:port
                    if ':' in host_port:
                        host, port = host_port.split(':', 1)
                        port = int(port)
                    else:
                        host = host_port
                        port = 5432
                    
                    return {
                        'host': host,
                        'port': port,
                        'database': database,
                        'user': user,
                        'password': password
                    }
            
            # –Ø–∫—â–æ –≤—Å–µ –≤–ø–æ—Ä—è–¥–∫—É - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥
            return {
                'host': parsed.hostname,
                'port': parsed.port or 5432,
                'database': parsed.path[1:],
                'user': parsed.username,
                'password': parsed.password
            }
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É DATABASE_URL: {e}")
            logger.info("üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –æ–∫—Ä–µ–º—ñ –∑–º—ñ–Ω–Ω—ñ –∞–±–æ –∑–∞–∫–æ–¥—É–π—Ç–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∏")
            raise
    else:
        # –û–∫—Ä–µ–º—ñ –∑–º—ñ–Ω–Ω—ñ
        return {
            'host': os.getenv('DB_HOST', 'localhost'),
            'port': int(os.getenv('DB_PORT', 5432)),
            'database': os.getenv('DB_NAME', 'trading_db'),
            'user': os.getenv('DB_USER', 'postgres'),
            'password': os.getenv('DB_PASSWORD', '')
        }


def check_database_exists(config):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î –±–∞–∑–∞ –¥–∞–Ω–∏—Ö"""
    try:
        conn = psycopg2.connect(
            host=config['host'],
            port=config['port'],
            database='postgres',  # –ó'—î–¥–Ω—É—î–º–æ—Å—è –∑ –¥–µ—Ñ–æ–ª—Ç–Ω–æ—é –ë–î
            user=config['user'],
            password=config['password']
        )
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()
        
        cursor.execute(
            "SELECT 1 FROM pg_database WHERE datname = %s",
            (config['database'],)
        )
        exists = cursor.fetchone() is not None
        
        cursor.close()
        conn.close()
        
        return exists
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ë–î: {e}")
        return False


def create_database(config):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    try:
        logger.info(f"üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö '{config['database']}'...")
        
        conn = psycopg2.connect(
            host=config['host'],
            port=config['port'],
            database='postgres',
            user=config['user'],
            password=config['password']
        )
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()
        
        cursor.execute(f"CREATE DATABASE {config['database']}")
        
        cursor.close()
        conn.close()
        
        logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö '{config['database']}' —Å—Ç–≤–æ—Ä–µ–Ω–∞")
        return True
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ë–î: {e}")
        return False


def drop_all_tables(config):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å –∑ –ë–î (–±–µ–∑ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∞–º–æ—ó –ë–î)"""
    try:
        logger.info(f"üóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å –∑ –ë–î '{config['database']}'...")
        
        conn = psycopg2.connect(
            host=config['host'],
            port=config['port'],
            database=config['database'],
            user=config['user'],
            password=config['password']
        )
        cursor = conn.cursor()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_type = 'BASE TABLE'
        """)
        
        tables = [row[0] for row in cursor.fetchall()]
        
        if tables:
            logger.info(f"   –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—å: {len(tables)}")
            
            # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ –∑ CASCADE
            for table in tables:
                logger.info(f"   üóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ: {table}")
                cursor.execute(f"DROP TABLE IF EXISTS {table} CASCADE")
            
            conn.commit()
            logger.info("‚úÖ –í—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ –≤–∏–¥–∞–ª–µ–Ω–æ")
        else:
            logger.info("   ‚ÑπÔ∏è  –¢–∞–±–ª–∏—Ü—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        
        cursor.close()
        conn.close()
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å: {e}")
        return False


def execute_schema(config, schema_file='database_schema.sql'):
    """–í–∏–∫–æ–Ω–∞–Ω–Ω—è SQL —Å—Ö–µ–º–∏"""
    try:
        schema_path = Path(__file__).parent / schema_file
        
        if not schema_path.exists():
            logger.error(f"‚ùå –§–∞–π–ª —Å—Ö–µ–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {schema_path}")
            return False
        
        logger.info(f"üìù –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Å—Ö–µ–º–∏ –∑ {schema_file}...")
        
        # –ß–∏—Ç–∞—î–º–æ SQL
        with open(schema_path, 'r', encoding='utf-8') as f:
            sql_script = f.read()
        
        # –í–∏–∫–æ–Ω—É—î–º–æ
        conn = psycopg2.connect(
            host=config['host'],
            port=config['port'],
            database=config['database'],
            user=config['user'],
            password=config['password']
        )
        cursor = conn.cursor()
        
        cursor.execute(sql_script)
        conn.commit()
        
        cursor.close()
        conn.close()
        
        logger.info("‚úÖ –°—Ö–µ–º–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å—Ö–µ–º–∏: {e}")
        return False


def verify_tables(config):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å"""
    try:
        conn = psycopg2.connect(
            host=config['host'],
            port=config['port'],
            database=config['database'],
            user=config['user'],
            password=config['password']
        )
        cursor = conn.cursor()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü—å
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_type = 'BASE TABLE'
            ORDER BY table_name
        """)
        
        tables = [row[0] for row in cursor.fetchall()]
        
        logger.info("\nüìä –°—Ç–≤–æ—Ä–µ–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ:")
        for table in tables:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤
            cursor.execute(f"SELECT COUNT(*) FROM {table}")
            count = cursor.fetchone()[0]
            logger.info(f"   ‚úÖ {table:25} ({count} –∑–∞–ø–∏—Å—ñ–≤)")
        
        cursor.close()
        conn.close()
        
        return len(tables) > 0
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—å: {e}")
        return False


def initialize_database(force_recreate=False, drop_tables_only=False):
    """–ü–æ–≤–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    logger.info("="*70)
    logger.info("üóÑÔ∏è  –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ë–ê–ó–ò –î–ê–ù–ò–•")
    logger.info("="*70)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    config = get_db_config()
    
    logger.info(f"\nüìù –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:")
    logger.info(f"   Host: {config['host']}:{config['port']}")
    logger.info(f"   Database: {config['database']}")
    logger.info(f"   User: {config['user']}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –ë–î
    db_exists = check_database_exists(config)
    
    if db_exists:
        if drop_tables_only:
            # –í–∏–¥–∞–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ (–ë–î –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è)
            logger.warning(f"\n‚ö†Ô∏è  –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å –∑ –ë–î '{config['database']}'!")
            response = input("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (yes/no): ")
            if response.lower() not in ['yes', 'y']:
                logger.info("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
                return False
            
            if not drop_all_tables(config):
                return False
        elif force_recreate:
            # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—é –ë–î
            logger.warning(f"\n‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö '{config['database']}' –≤–∂–µ —ñ—Å–Ω—É—î!")
            response = input("–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–Ω–æ–≤–æ? (yes/no): ")
            if response.lower() not in ['yes', 'y']:
                logger.info("‚ùå –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
                return False
            
            # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ë–î
            try:
                conn = psycopg2.connect(
                    host=config['host'],
                    port=config['port'],
                    database='postgres',
                    user=config['user'],
                    password=config['password']
                )
                conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
                cursor = conn.cursor()
                
                # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—Å—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è
                cursor.execute(f"""
                    SELECT pg_terminate_backend(pg_stat_activity.pid)
                    FROM pg_stat_activity
                    WHERE pg_stat_activity.datname = '{config['database']}'
                    AND pid <> pg_backend_pid()
                """)
                
                cursor.execute(f"DROP DATABASE {config['database']}")
                cursor.close()
                conn.close()
                
                logger.info(f"üóëÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö '{config['database']}' –≤–∏–¥–∞–ª–µ–Ω–∞")
                db_exists = False
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ë–î: {e}")
                return False
        else:
            logger.info(f"\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö '{config['database']}' –≤–∂–µ —ñ—Å–Ω—É—î")
            logger.info("   –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ --force –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")
            logger.info("   –ê–±–æ --drop-tables –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ —Ç–∞–±–ª–∏—Ü—å")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ë–î
    if not db_exists:
        if not create_database(config):
            return False
    
    # –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Å—Ö–µ–º–∏
    if not execute_schema(config):
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—å
    if not verify_tables(config):
        return False
    
    logger.info("\n" + "="*70)
    logger.info("‚úÖ –ë–ê–ó–ê –î–ê–ù–ò–• –ì–û–¢–û–í–ê –î–û –†–û–ë–û–¢–ò!")
    logger.info("="*70)
    
    return True


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    force_recreate = '--force' in sys.argv or '-f' in sys.argv
    drop_tables_only = '--drop-tables' in sys.argv or '--drop' in sys.argv
    
    success = initialize_database(
        force_recreate=force_recreate,
        drop_tables_only=drop_tables_only
    )
    
    if not success:
        logger.error("\n‚ùå –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è")
        sys.exit(1)
    
    logger.info("\nüí° –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
    logger.info("   1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ .env —Ñ–∞–π–ª (DATABASE_URL)")
    logger.info("   2. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Ç–æ—Ä–≥–æ–≤—É —Å–∏—Å—Ç–µ–º—É: python main.py")
    logger.info("   3. –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –¥–∞–Ω—ñ: python check_db.py")
    logger.info("\nüìñ –û–ø—Ü—ñ—ó –∑–∞–ø—É—Å–∫—É:")
    logger.info("   python init_database.py             # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ë–î —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î")
    logger.info("   python init_database.py --drop      # –í–∏–¥–∞–ª–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ")
    logger.info("   python init_database.py --force     # –í–∏–¥–∞–ª–∏—Ç–∏ –ë–î –ø–æ–≤–Ω—ñ—Å—Ç—é")


if __name__ == '__main__':
    main()
