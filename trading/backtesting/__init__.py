"""
–°–∏—Å—Ç–µ–º–∞ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥—É –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π
"""
import pandas as pd
import numpy as np
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime, timedelta
import logging
import matplotlib.pyplot as plt
import seaborn as sns
from dataclasses import dataclass
from concurrent.futures import ProcessPoolExecutor, as_completed

from strategies.base import TradingStrategy, TradeSignal, TradeAction, Position

logger = logging.getLogger(__name__)


@dataclass
class BacktestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥—É"""
    strategy_name: str
    symbol: str
    start_date: datetime
    end_date: datetime

    # –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
    total_return: float
    total_trades: int
    winning_trades: int
    losing_trades: int
    win_rate: float
    avg_win: float
    avg_loss: float
    profit_factor: float
    max_drawdown: float
    sharpe_ratio: float

    # –†–∏–∑–∏–∫–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
    volatility: float
    max_consecutive_losses: int
    avg_trade_duration: float

    # –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    trades: List[Dict[str, Any]]
    equity_curve: List[float]
    drawdown_curve: List[float]


class Backtester:
    """
    –°–∏—Å—Ç–µ–º–∞ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥—É –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π
    """

    def __init__(self, initial_capital: float = 10000.0):
        self.initial_capital = initial_capital
        self.commission = 0.001  # 0.1% –∫–æ–º—ñ—Å—ñ—è
        self.slippage = 0.0005  # 0.05% slippage

    def run_backtest(self,
                    strategy: TradingStrategy,
                    market_data: Dict[str, pd.DataFrame],
                    predictions: Dict[str, Dict],
                    start_date: Optional[datetime] = None,
                    end_date: Optional[datetime] = None) -> Dict[str, BacktestResult]:
        """
        –ó–∞–ø—É—Å–∫ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥—É –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
        """
        results = {}

        for symbol in strategy.symbols:
            if symbol not in market_data:
                logger.warning(f"–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Å–∏–º–≤–æ–ª—É {symbol}")
                continue

            logger.info(f"üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó {strategy.name} –Ω–∞ {symbol}")

            result = self._backtest_symbol(
                strategy, symbol, market_data[symbol],
                predictions.get(symbol, {}), start_date, end_date
            )

            if result:
                results[symbol] = result

        return results

    def _backtest_symbol(self,
                        strategy: TradingStrategy,
                        symbol: str,
                        df: pd.DataFrame,
                        predictions: Dict,
                        start_date: Optional[datetime],
                        end_date: Optional[datetime]) -> Optional[BacktestResult]:
        """
        –ë–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥ –¥–ª—è –æ–∫—Ä–µ–º–æ–≥–æ —Å–∏–º–≤–æ–ª—É
        """
        # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –ø–æ –¥–∞—Ç—ñ
        if start_date:
            df = df[df.index >= start_date]
        if end_date:
            df = df[df.index <= end_date]

        if len(df) < 100:
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}: {len(df)} –∑–∞–ø–∏—Å—ñ–≤")
            return None

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
        capital = self.initial_capital
        positions = {}
        trades = []
        equity_curve = [capital]
        drawdown_curve = [0.0]

        peak_capital = capital
        max_drawdown = 0.0

        # –Ü—Ç–µ—Ä–∞—Ü—ñ—è –ø–æ –∫–æ–∂–Ω—ñ–π —Å–≤—ñ—á—Ü—ñ
        for i in range(len(df)):
            current_bar = df.iloc[i]
            current_time = current_bar.name
            current_price = current_bar['close']

            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–≥–Ω–æ–∑—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç—É (—è–∫—â–æ —î)
            current_predictions = self._get_prediction_at_time(predictions, current_time)

            # –ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É —Å—Ç—Ä–∞—Ç–µ–≥—ñ—î—é
            market_snapshot = {symbol: df.iloc[:i+1]}  # –î–∞–Ω—ñ –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç—É
            signals = strategy.analyze_market(market_snapshot, {symbol: current_predictions})

            # –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤
            if symbol in signals:
                signal = signals[symbol]

                # –í—Ö—ñ–¥ –≤ –ø–æ–∑–∏—Ü—ñ—é
                if signal.action in [TradeAction.BUY, TradeAction.SELL] and symbol not in positions:
                    if self._can_enter_position(strategy, capital, signal):
                        position = self._create_backtest_position(signal, current_price, current_time)
                        positions[symbol] = position

                        # –ö–æ–º—ñ—Å—ñ—è –∑–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è
                        commission = capital * self.commission
                        capital -= commission

                        logger.debug(f"üìà –í—ñ–¥–∫—Ä–∏—Ç–∞ –ø–æ–∑–∏—Ü—ñ—è {symbol} at {current_price}")

                # –í–∏—Ö—ñ–¥ –∑ –ø–æ–∑–∏—Ü—ñ—ó
                elif signal.action == TradeAction.CLOSE and symbol in positions:
                    position = positions[symbol]
                    pnl = self._calculate_pnl(position, current_price)

                    # –ö–æ–º—ñ—Å—ñ—è –∑–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è
                    commission = abs(pnl) * self.commission
                    capital += pnl - commission

                    # –ó–∞–ø–∏—Å —É–≥–æ–¥–∏
                    trade = {
                        'symbol': symbol,
                        'entry_time': position.entry_time,
                        'exit_time': current_time,
                        'entry_price': position.entry_price,
                        'exit_price': current_price,
                        'quantity': position.quantity,
                        'pnl': pnl,
                        'commission': commission,
                        'duration': (current_time - position.entry_time).total_seconds() / 3600,  # –≥–æ–¥–∏–Ω–∏
                        'side': position.side
                    }
                    trades.append(trade)

                    del positions[symbol]
                    logger.debug(f"üìâ –ó–∞–∫—Ä–∏—Ç–∞ –ø–æ–∑–∏—Ü—ñ—è {symbol} at {current_price}, P&L: {pnl:.2f}")

            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è equity curve
            unrealized_pnl = sum([
                self._calculate_pnl(pos, current_price)
                for pos in positions.values()
            ])

            total_equity = capital + unrealized_pnl
            equity_curve.append(total_equity)

            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ drawdown
            peak_capital = max(peak_capital, total_equity)
            current_drawdown = (peak_capital - total_equity) / peak_capital
            max_drawdown = max(max_drawdown, current_drawdown)
            drawdown_curve.append(current_drawdown)

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ñ—ñ–Ω–∞–ª—å–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫
        if not trades:
            logger.warning(f"–ñ–æ–¥–Ω–æ—ó —É–≥–æ–¥–∏ –Ω–µ –±—É–ª–æ –∑–¥—ñ–π—Å–Ω–µ–Ω–æ –¥–ª—è {symbol}")
            return None

        return self._calculate_backtest_metrics(
            strategy.name, symbol, trades, equity_curve, drawdown_curve,
            df.index[0], df.index[-1]
        )

    def _get_prediction_at_time(self, predictions: Dict, timestamp: datetime) -> Dict:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —á–∞—Å"""
        # –°–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞—Ç–∏—á–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑
        return predictions

    def _can_enter_position(self, strategy: TradingStrategy, capital: float, signal: TradeSignal) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –≤—Ö–æ–¥—É –≤ –ø–æ–∑–∏—Ü—ñ—é"""
        if not signal.quantity or signal.quantity <= 0:
            return False

        position_value = signal.entry_price * signal.quantity
        max_position_size = capital * 0.1  # –ú–∞–∫—Å–∏–º—É–º 10% –≤—ñ–¥ –∫–∞–ø—ñ—Ç–∞–ª—É

        return position_value <= max_position_size

    def _create_backtest_position(self, signal: TradeSignal, current_price: float, timestamp: datetime) -> Position:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥—É"""
        from strategies.base import Position

        side = 'LONG' if signal.action == TradeAction.BUY else 'SHORT'

        return Position(
            symbol=signal.symbol,
            side=side,
            entry_price=signal.entry_price or current_price,
            quantity=signal.quantity or 0.001,
            stop_loss=signal.stop_loss,
            take_profit=signal.take_profit,
            entry_time=timestamp
        )

    def _calculate_pnl(self, position: Position, current_price: float) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ P&L –ø–æ–∑–∏—Ü—ñ—ó"""
        if position.side == 'LONG':
            return (current_price - position.entry_price) * position.quantity
        else:  # SHORT
            return (position.entry_price - current_price) * position.quantity

    def _calculate_backtest_metrics(self,
                                   strategy_name: str,
                                   symbol: str,
                                   trades: List[Dict],
                                   equity_curve: List[float],
                                   drawdown_curve: List[float],
                                   start_date: datetime,
                                   end_date: datetime) -> BacktestResult:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–µ—Ç—Ä–∏–∫ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥—É"""

        # –ë–∞–∑–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
        total_trades = len(trades)
        winning_trades = len([t for t in trades if t['pnl'] > 0])
        losing_trades = total_trades - winning_trades

        if total_trades == 0:
            return None

        # –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
        total_pnl = sum(t['pnl'] for t in trades)
        total_return = total_pnl / self.initial_capital

        win_rate = winning_trades / total_trades

        winning_pnls = [t['pnl'] for t in trades if t['pnl'] > 0]
        losing_pnls = [t['pnl'] for t in trades if t['pnl'] < 0]

        avg_win = np.mean(winning_pnls) if winning_pnls else 0
        avg_loss = abs(np.mean(losing_pnls)) if losing_pnls else 0

        profit_factor = (sum(winning_pnls) / abs(sum(losing_pnls))) if losing_pnls else float('inf')

        # –†–∏–∑–∏–∫–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
        returns = np.diff(equity_curve) / equity_curve[:-1]
        volatility = np.std(returns) * np.sqrt(252)  # Annualized

        sharpe_ratio = np.mean(returns) / np.std(returns) * np.sqrt(252) if np.std(returns) > 0 else 0

        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å–µ—Ä—ñ—è –ø—Ä–æ–≥—Ä–∞—à—ñ–≤
        consecutive_losses = 0
        max_consecutive_losses = 0
        for trade in trades:
            if trade['pnl'] < 0:
                consecutive_losses += 1
                max_consecutive_losses = max(max_consecutive_losses, consecutive_losses)
            else:
                consecutive_losses = 0

        # –°–µ—Ä–µ–¥–Ω—è —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —É–≥–æ–¥–∏
        avg_trade_duration = np.mean([t['duration'] for t in trades])

        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π drawdown
        max_drawdown = max(drawdown_curve)

        return BacktestResult(
            strategy_name=strategy_name,
            symbol=symbol,
            start_date=start_date,
            end_date=end_date,
            total_return=total_return,
            total_trades=total_trades,
            winning_trades=winning_trades,
            losing_trades=losing_trades,
            win_rate=win_rate,
            avg_win=avg_win,
            avg_loss=avg_loss,
            profit_factor=profit_factor,
            max_drawdown=max_drawdown,
            sharpe_ratio=sharpe_ratio,
            volatility=volatility,
            max_consecutive_losses=max_consecutive_losses,
            avg_trade_duration=avg_trade_duration,
            trades=trades,
            equity_curve=equity_curve,
            drawdown_curve=drawdown_curve
        )

    def plot_results(self, result: BacktestResult, save_path: Optional[str] = None):
        """–í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥—É"""
        fig, axes = plt.subplots(2, 2, figsize=(15, 10))
        fig.suptitle(f'Backtest Results: {result.strategy_name} - {result.symbol}')

        # Equity curve
        axes[0, 0].plot(result.equity_curve)
        axes[0, 0].set_title('Equity Curve')
        axes[0, 0].set_xlabel('Trades')
        axes[0, 0].set_ylabel('Capital')
        axes[0, 0].grid(True)

        # Drawdown curve
        axes[0, 1].plot(result.drawdown_curve, color='red')
        axes[0, 1].set_title('Drawdown Curve')
        axes[0, 1].set_xlabel('Trades')
        axes[0, 1].set_ylabel('Drawdown %')
        axes[0, 1].grid(True)

        # P&L distribution
        pnls = [t['pnl'] for t in result.trades]
        axes[1, 0].hist(pnls, bins=50, alpha=0.7)
        axes[1, 0].set_title('P&L Distribution')
        axes[1, 0].set_xlabel('P&L')
        axes[1, 0].set_ylabel('Frequency')
        axes[1, 0].axvline(x=0, color='red', linestyle='--')
        axes[1, 0].grid(True)

        # Trade duration vs P&L
        durations = [t['duration'] for t in result.trades]
        axes[1, 1].scatter(durations, pnls, alpha=0.6)
        axes[1, 1].set_title('Trade Duration vs P&L')
        axes[1, 1].set_xlabel('Duration (hours)')
        axes[1, 1].set_ylabel('P&L')
        axes[1, 1].grid(True)

        plt.tight_layout()

        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
            logger.info(f"üíæ –ì—Ä–∞—Ñ—ñ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {save_path}")
        else:
            plt.show()

    def print_summary(self, results: Dict[str, BacktestResult]):
        """–í–∏–≤—ñ–¥ –∑–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"""
        print("\n" + "="*80)
        print("üìä –ó–í–ï–î–ï–ù–ù–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í –ë–ï–ö–¢–ï–°–¢–ò–ù–ì–£")
        print("="*80)

        for symbol, result in results.items():
            print(f"\nü™ô –°–∏–º–≤–æ–ª: {symbol}")
            print(f"üìà –°—Ç—Ä–∞—Ç–µ–≥—ñ—è: {result.strategy_name}")
            print(f"üìÖ –ü–µ—Ä—ñ–æ–¥: {result.start_date.date()} - {result.end_date.date()}")

            print(f"\nüí∞ –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
            print(f"  –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: {result.total_return:.2%}")
            print(f"  –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É–≥–æ–¥: {result.total_trades}")
            print(f"  –ü—Ä–∏–±—É—Ç–∫–æ–≤–∏—Ö —É–≥–æ–¥: {result.winning_trades}")
            print(f"  –í—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥: {result.win_rate:.1%}")
            print(f"  Profit Factor: {result.profit_factor:.2f}")

            print(f"\n‚ö†Ô∏è –†–∏–∑–∏–∫–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏:")
            print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π drawdown: {result.max_drawdown:.1%}")
            print(f"  Sharpe Ratio: {result.sharpe_ratio:.2f}")
            print(f"  –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å: {result.volatility:.1%}")
            print(f"  –ú–∞–∫—Å. —Å–µ—Ä—ñ—è –ø—Ä–æ–≥—Ä–∞—à—ñ–≤: {result.max_consecutive_losses}")

            print(f"\n‚è±Ô∏è –ß–∞—Å–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏:")
            print(f"  –°–µ—Ä–µ–¥–Ω—è —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —É–≥–æ–¥–∏: {result.avg_trade_duration:.1f} –≥–æ–¥–∏–Ω")
            print(f"  –°–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä–∏–±—É—Ç–æ–∫: ${result.avg_win:.2f}")
            print(f"  –°–µ—Ä–µ–¥–Ω—ñ–π –∑–±–∏—Ç–æ–∫: ${result.avg_loss:.2f}")

        print("\n" + "="*80)


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
def run_parallel_backtest(strategies: List[TradingStrategy],
                         market_data: Dict[str, pd.DataFrame],
                         predictions: Dict[str, Dict],
                         start_date: Optional[datetime] = None,
                         end_date: Optional[datetime] = None,
                         max_workers: int = 4) -> Dict[str, Dict[str, BacktestResult]]:
    """
    –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥—É –¥–ª—è –∫—ñ–ª—å–∫–æ—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π
    """
    backtester = Backtester()
    all_results = {}

    with ProcessPoolExecutor(max_workers=max_workers) as executor:
        futures = {}

        for strategy in strategies:
            future = executor.submit(
                backtester.run_backtest,
                strategy, market_data, predictions, start_date, end_date
            )
            futures[future] = strategy.name

        for future in as_completed(futures):
            strategy_name = futures[future]
            try:
                results = future.result()
                all_results[strategy_name] = results
                logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó {strategy_name}")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó {strategy_name}: {e}")

    return all_results