"""
–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Binance Testnet –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π
"""
import os
import asyncio
import logging
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime, timedelta
from decimal import Decimal, ROUND_DOWN
import time

try:
    from binance.client import Client
    from binance.exceptions import BinanceAPIException, BinanceRequestException
    try:
        from binance.websockets import BinanceSocketManager
        WEBSOCKET_AVAILABLE = True
    except ImportError:
        BinanceSocketManager = None
        WEBSOCKET_AVAILABLE = False
    BINANCE_AVAILABLE = True
except ImportError as e:
    BINANCE_AVAILABLE = False
    Client = None
    BinanceAPIException = Exception
    BinanceRequestException = Exception
    BinanceSocketManager = None
    WEBSOCKET_AVAILABLE = False
    logging.warning(f"python-binance –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–±–æ –ø–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install python-binance")

import pandas as pd

from strategies.base import TradingStrategy, TradeSignal, TradeAction, Position, RiskManager

logger = logging.getLogger(__name__)


class BinanceTestnetTrader:
    """
    –¢—Ä–µ–π–¥–µ—Ä –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π –Ω–∞ Binance Testnet

    –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:
    - –¢–µ—Å—Ç–æ–≤—ñ –∫–æ—à—Ç–∏ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∏–∑–∏–∫—É)
    - –†–µ–∞–ª—å–Ω–∏–π —á–∞—Å —Ç–∞ –¥–∞–Ω—ñ
    - –°–∏–º—É–ª—è—Ü—ñ—è –∫–æ–º—ñ—Å—ñ–π —Ç–∞ slippage
    """

    def __init__(self, api_key: Optional[str] = None, api_secret: Optional[str] = None,
                 test_mode: bool = True):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç—Ä–µ–π–¥–µ—Ä–∞

        Args:
            api_key: Binance API –∫–ª—é—á
            api_secret: Binance API —Å–µ–∫—Ä–µ—Ç
            test_mode: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ testnet
        """
        self.test_mode = test_mode

        # API –∫–ª—é—á—ñ (–∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∞–±–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤)
        self.api_key = api_key or os.getenv('BINANCE_TEST_API_KEY')
        self.api_secret = api_secret or os.getenv('BINANCE_TEST_API_SECRET')

        if not self.api_key or not self.api_secret:
            raise ValueError("–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ BINANCE_TEST_API_KEY —Ç–∞ BINANCE_TEST_API_SECRET")

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞
        self.client = Client(self.api_key, self.api_secret, testnet=test_mode)

        # –°—Ç–∞–Ω —Ä–∞—Ö—É–Ω–∫—É
        self.balance = {}  # –ë–∞–ª–∞–Ω—Å –ø–æ –∞–∫—Ç–∏–≤–∞—Ö
        self.positions = {}  # –í—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó
        self.order_history = []  # –Ü—Å—Ç–æ—Ä—ñ—è –æ—Ä–¥–µ—Ä—ñ–≤

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        self.commission_rate = 0.001  # 0.1% –∫–æ–º—ñ—Å—ñ—è
        self.slippage = 0.0005  # 0.05% slippage
        self.min_order_size = 10  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –æ—Ä–¥–µ—Ä–∞ –≤ USDT

        # WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è real-time –¥–∞–Ω–∏—Ö
        self.socket_manager = None
        self.streams = {}

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
        self._initialize_account()

        logger.info(f"‚úÖ Binance {'Testnet' if test_mode else 'Live'} —Ç—Ä–µ–π–¥–µ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π")

    def _initialize_account(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–∞—Ö—É–Ω–∫—É"""
        try:
            account_info = self.client.get_account()

            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
            for balance in account_info['balances']:
                asset = balance['asset']
                free = float(balance['free'])
                locked = float(balance['locked'])

                if free + locked > 0:
                    self.balance[asset] = {
                        'free': free,
                        'locked': locked,
                        'total': free + locked
                    }

            logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å —Ä–∞—Ö—É–Ω–∫—É: {self.balance}")

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ä–∞—Ö—É–Ω–∫—É: {e}")
            raise

    def get_symbol_info(self, symbol: str) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ—Ä–≥–æ–≤–∏–π —Å–∏–º–≤–æ–ª"""
        try:
            info = self.client.get_symbol_info(symbol)
            return {
                'symbol': info['symbol'],
                'base_asset': info['baseAsset'],
                'quote_asset': info['quoteAsset'],
                'min_qty': float(info['filters'][1]['minQty']),
                'max_qty': float(info['filters'][1]['maxQty']),
                'step_size': float(info['filters'][1]['stepSize']),
                'min_price': float(info['filters'][0]['minPrice']),
                'max_price': float(info['filters'][0]['maxPrice']),
                'tick_size': float(info['filters'][0]['tickSize'])
            }
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ {symbol}: {e}")
            return {}

    def get_current_price(self, symbol: str) -> Optional[float]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏"""
        try:
            ticker = self.client.get_symbol_ticker(symbol=symbol)
            return float(ticker['price'])
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ {symbol}: {e}")
            return None

    def get_recent_trades(self, symbol: str, limit: int = 100) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —É–≥–æ–¥"""
        try:
            trades = self.client.get_recent_trades(symbol=symbol, limit=limit)
            return [{
                'price': float(trade['price']),
                'qty': float(trade['qty']),
                'time': datetime.fromtimestamp(trade['time'] / 1000),
                'is_buyer_maker': trade['isBuyerMaker']
            } for trade in trades]
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É–≥–æ–¥ {symbol}: {e}")
            return []

    def place_market_order(self, symbol: str, side: str, quantity: float,
                          test: bool = True) -> Optional[Dict]:
        """
        –†–æ–∑–º—ñ—â–µ–Ω–Ω—è –º–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä–∞

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∏–π —Å–∏–º–≤–æ–ª
            side: 'BUY' –∞–±–æ 'SELL'
            quantity: –ö—ñ–ª—å–∫—ñ—Å—Ç—å
            test: –¢–µ—Å—Ç–æ–≤–∏–π –æ—Ä–¥–µ—Ä (–±–µ–∑ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è)
        """
        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å–∏–º–≤–æ–ª
            symbol_info = self.get_symbol_info(symbol)
            if not symbol_info:
                return None

            # –û–∫—Ä—É–≥–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–æ step_size
            step_size = symbol_info['step_size']
            quantity = self._round_to_step(quantity, step_size)

            # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —è–∫ —Ä—è–¥–æ–∫ –±–µ–∑ –∑–∞–π–≤–∏—Ö –Ω—É–ª—ñ–≤
            quantity_str = f"{quantity:.8f}".rstrip('0').rstrip('.')
            logger.info(f"–§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è –æ—Ä–¥–µ—Ä–∞: '{quantity_str}'")

            # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
            if quantity < symbol_info['min_qty']:
                logger.warning(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å {quantity} –º–µ–Ω—à–µ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó {symbol_info['min_qty']}")
                return None

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É
            if not self._check_balance(symbol, side, quantity):
                return None

            # –†–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞
            if test:
                # –¢–µ—Å—Ç–æ–≤–∏–π –æ—Ä–¥–µ—Ä
                order = self.client.create_test_order(
                    symbol=symbol,
                    side=side,
                    type='MARKET',
                    quantity=quantity_str
                )
                order_id = f"test_{int(time.time())}"
            else:
                # –†–µ–∞–ª—å–Ω–∏–π –æ—Ä–¥–µ—Ä
                order = self.client.create_order(
                    symbol=symbol,
                    side=side,
                    type='MARKET',
                    quantity=quantity_str
                )
                order_id = order['orderId']

            # –°–∏–º—É–ª—è—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
            executed_price = self._simulate_execution(symbol, side, quantity)

            order_result = {
                'order_id': order_id,
                'symbol': symbol,
                'side': side,
                'quantity': quantity,
                'executed_price': executed_price,
                'commission': executed_price * quantity * self.commission_rate,
                'timestamp': datetime.now(),
                'status': 'FILLED'
            }

            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
            self._update_balance(order_result)

            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ —ñ—Å—Ç–æ—Ä—ñ—ó
            self.order_history.append(order_result)

            logger.info(f"‚úÖ –û—Ä–¥–µ—Ä –≤–∏–∫–æ–Ω–∞–Ω–æ: {side} {quantity} {symbol} at {executed_price}")
            return order_result

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞ {symbol}: {e}")
            return None

    def _simulate_execution(self, symbol: str, side: str, quantity: float) -> float:
        """–°–∏–º—É–ª—è—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞ –∑ slippage"""
        current_price = self.get_current_price(symbol)
        if not current_price:
            return 0

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è slippage
        if side == 'BUY':
            executed_price = current_price * (1 + self.slippage)
        else:  # SELL
            executed_price = current_price * (1 - self.slippage)

        return executed_price

    def _check_balance(self, symbol: str, side: str, quantity: float) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–Ω–æ—Å—Ç—ñ –±–∞–ª–∞–Ω—Å—É"""
        symbol_info = self.get_symbol_info(symbol)
        base_asset = symbol_info['base_asset']
        quote_asset = symbol_info['quote_asset']

        if side == 'BUY':
            # –ü–æ—Ç—Ä—ñ–±–µ–Ω quote asset (USDT)
            required = quantity * self.get_current_price(symbol) * (1 + self.commission_rate)
            available = self.balance.get(quote_asset, {}).get('free', 0)
            return available >= required
        else:  # SELL
            # –ü–æ—Ç—Ä—ñ–±–µ–Ω base asset (BTC)
            available = self.balance.get(base_asset, {}).get('free', 0)
            return available >= quantity

    def _update_balance(self, order_result: Dict):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –ø—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞"""
        symbol_info = self.get_symbol_info(order_result['symbol'])
        base_asset = symbol_info['base_asset']
        quote_asset = symbol_info['quote_asset']

        quantity = order_result['quantity']
        executed_price = order_result['executed_price']
        commission = order_result['commission']

        if order_result['side'] == 'BUY':
            # –ö—É–ø—ñ–≤–ª—è: —Å–ø–∏—Å—É—î–º–æ quote, –¥–æ–¥–∞—î–º–æ base
            quote_cost = executed_price * quantity + commission

            self.balance[quote_asset]['free'] -= quote_cost
            self.balance[base_asset] = self.balance.get(base_asset, {'free': 0, 'locked': 0})
            self.balance[base_asset]['free'] += quantity

        else:  # SELL
            # –ü—Ä–æ–¥–∞–∂: —Å–ø–∏—Å—É—î–º–æ base, –¥–æ–¥–∞—î–º–æ quote
            quote_received = executed_price * quantity - commission

            self.balance[base_asset]['free'] -= quantity
            self.balance[quote_asset]['free'] += quote_received

    def _round_to_step(self, value: float, step: float) -> float:
        """–û–∫—Ä—É–≥–ª–µ–Ω–Ω—è –¥–æ step size"""
        return float(Decimal(str(value)).quantize(Decimal(str(step)), rounding=ROUND_DOWN))

    def start_websocket_stream(self, symbols: List[str], callback):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å—Ç—Ä—ñ–º—É –¥–ª—è real-time –¥–∞–Ω–∏—Ö"""
        if not BINANCE_AVAILABLE:
            logger.error("python-binance –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return

        if not WEBSOCKET_AVAILABLE:
            logger.warning("WebSocket –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π - —Ä–æ–±–æ—Ç–∞ –±–µ–∑ real-time —Å—Ç—Ä—ñ–º—ñ–≤")
            return

        try:
            self.socket_manager = BinanceSocketManager(self.client)

            # –°—Ç—Ä—ñ–º –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É
            for symbol in symbols:
                stream_name = f"{symbol.lower()}@ticker"
                self.streams[symbol] = self.socket_manager.start_symbol_ticker_socket(
                    symbol, callback
                )

            # –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Å—Ç—Ä—ñ–º—ñ–≤
            self.socket_manager.start()

            logger.info(f"üì° WebSocket —Å—Ç—Ä—ñ–º–∏ –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è: {symbols}")

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É WebSocket: {e}")

    def stop_websocket_stream(self):
        """–ó—É–ø–∏–Ω–∫–∞ WebSocket —Å—Ç—Ä—ñ–º—ñ–≤"""
        if self.socket_manager:
            self.socket_manager.stop()
            logger.info("üì° WebSocket —Å—Ç—Ä—ñ–º–∏ –∑—É–ø–∏–Ω–µ–Ω–æ")

    def get_account_balance(self) -> Dict[str, Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É —Ä–∞—Ö—É–Ω–∫—É"""
        return self.balance.copy()

    def get_positions_value(self) -> Dict[str, float]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∞—Ä—Ç–æ—Å—Ç—ñ –ø–æ–∑–∏—Ü—ñ–π"""
        positions_value = {}

        for symbol, position in self.positions.items():
            current_price = self.get_current_price(symbol)
            if current_price:
                positions_value[symbol] = position.quantity * current_price

        return positions_value

    def get_pnl_summary(self) -> Dict[str, Any]:
        """–ó–≤–µ–¥–µ–Ω–Ω—è –ø—Ä–∏–±—É—Ç–∫—ñ–≤ —Ç–∞ –∑–±–∏—Ç–∫—ñ–≤"""
        total_pnl = 0
        total_commission = 0
        total_trades = len(self.order_history)

        for order in self.order_history:
            if order['side'] == 'SELL':
                # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ P&L –¥–ª—è –∑–∞–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
                # –°–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è - –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–∫—Ä–∞—â–∏—Ç–∏
                pass

        return {
            'total_trades': total_trades,
            'total_pnl': total_pnl,
            'total_commission': total_commission,
            'net_pnl': total_pnl - total_commission,
            'win_rate': 0.0  # –ü–æ—Ç—Ä—ñ–±–Ω–æ —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏
        }


class LiveStrategyTester:
    """
    –¢–µ—Å—Ç–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π –≤ —Ä–µ–∂–∏–º—ñ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É –Ω–∞ Binance Testnet
    """

    def __init__(self, trader: BinanceTestnetTrader, strategies: List[TradingStrategy],
                 risk_manager: Optional[RiskManager] = None):
        self.trader = trader
        self.strategies = strategies
        self.risk_manager = risk_manager or RiskManager()

        # –°—Ç–∞–Ω —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        self.is_running = False
        self.market_data = {}  # –ö–µ—à —Ä–∏–Ω–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
        self.last_update = {}

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_signals = 0
        self.executed_signals = 0

    async def start_live_testing(self, symbols: List[str], update_interval: int = 60):
        """
        –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π –≤ —Ä–µ–∂–∏–º—ñ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É

        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            update_interval: –Ü–Ω—Ç–µ—Ä–≤–∞–ª –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.is_running = True
        logger.info(f"üöÄ –ü–æ—á–∞—Ç–æ–∫ live —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π –¥–ª—è: {symbols}")

        try:
            while self.is_running:
                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
                await self._update_market_data(symbols)

                # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è–º–∏
                all_signals = await self._generate_strategy_signals(symbols)

                # –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—ñ–≤
                await self._execute_signals(all_signals)

                # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                await asyncio.sleep(update_interval)

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ live —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ: {e}")
        finally:
            self.trader.stop_websocket_stream()

    async def _update_market_data(self, symbols: List[str]):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö"""
        for symbol in symbols:
            try:
                # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–≤—ñ–∂–∏—Ö –¥–∞–Ω–∏—Ö
                current_price = self.trader.get_current_price(symbol)
                recent_trades = self.trader.get_recent_trades(symbol, limit=50)

                if current_price:
                    self.market_data[symbol] = {
                        'price': current_price,
                        'trades': recent_trades,
                        'timestamp': datetime.now()
                    }

            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö {symbol}: {e}")

    async def _generate_strategy_signals(self, symbols: List[str]) -> Dict[str, List[TradeSignal]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤ –≤—ñ–¥ –≤—Å—ñ—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π"""
        all_signals = {}

        for strategy in self.strategies:
            strategy_symbols = [s for s in symbols if s in strategy.symbols]

            if not strategy_symbols:
                continue

            try:
                # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
                market_snapshot = {}
                predictions = {}

                for symbol in strategy_symbols:
                    if symbol in self.market_data:
                        # –°–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è - –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø–æ–≤–Ω—ñ OHLCV –¥–∞–Ω—ñ
                        market_snapshot[symbol] = pd.DataFrame()  # TODO: –î–æ–¥–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
                        predictions[symbol] = {
                            'change_percent': 0.01,  # –°–ø—Ä–æ—â–µ–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑
                            'confidence': 0.7
                        }

                # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤
                signals = strategy.analyze_market(market_snapshot, predictions)
                all_signals[strategy.name] = list(signals.values())

                self.total_signals += len(signals)

            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–∏–≥–Ω–∞–ª—ñ–≤ {strategy.name}: {e}")

        return all_signals

    async def _execute_signals(self, all_signals: Dict[str, List[TradeSignal]]):
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤"""
        for strategy_name, signals in all_signals.items():
            for signal in signals:
                try:
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–∏–∑–∏–∫—É
                    can_trade, reason = self.risk_manager.can_open_position(
                        capital=10000,  # –°–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è
                        position_size=signal.quantity * signal.entry_price if signal.quantity else 100,
                        current_positions=len(self.trader.positions)
                    )

                    if not can_trade:
                        logger.info(f"‚ö†Ô∏è –°–∏–≥–Ω–∞–ª {strategy_name} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ: {reason}")
                        continue

                    # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞
                    if signal.action == TradeAction.BUY:
                        order = self.trader.place_market_order(
                            signal.symbol, 'BUY', signal.quantity, test=True
                        )
                    elif signal.action == TradeAction.SELL:
                        order = self.trader.place_market_order(
                            signal.symbol, 'SELL', signal.quantity, test=True
                        )

                    if order:
                        self.executed_signals += 1
                        logger.info(f"‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ —Å–∏–≥–Ω–∞–ª {strategy_name}: {signal.action.value} {signal.symbol}")

                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É {strategy_name}: {e}")

    def stop_testing(self):
        """–ó—É–ø–∏–Ω–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        self.is_running = False
        logger.info("üõë Live —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ")

    def get_testing_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        return {
            'total_signals': self.total_signals,
            'executed_signals': self.executed_signals,
            'execution_rate': self.executed_signals / max(self.total_signals, 1),
            'account_balance': self.trader.get_account_balance(),
            'pnl_summary': self.trader.get_pnl_summary(),
            'active_positions': len(self.trader.positions)
        }


# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
async def example_live_testing():
    """–ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø—É—Å–∫—É live —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç—Ä–µ–π–¥–µ—Ä–∞
    trader = BinanceTestnetTrader(
        api_key="your_test_api_key",
        api_secret="your_test_api_secret",
        test_mode=True
    )

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π
    from strategies.scalping import ScalpingStrategy
    from strategies.day_trading import DayTradingStrategy

    strategies = [
        ScalpingStrategy(['BTCUSDT']),
        DayTradingStrategy(['BTCUSDT', 'ETHUSDT'])
    ]

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ—Å—Ç–µ—Ä–∞
    tester = LiveStrategyTester(trader, strategies)

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    try:
        await tester.start_live_testing(['BTCUSDT', 'ETHUSDT'], update_interval=30)
    except KeyboardInterrupt:
        tester.stop_testing()

    # –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    stats = tester.get_testing_stats()
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:", stats)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–∫–ª–∞–¥—É
    asyncio.run(example_live_testing())