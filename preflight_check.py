#!/usr/bin/env python3
"""
üîç –ü–†–ï-FLIGHT CHECK - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –¥–æ –∑–∞–ø—É—Å–∫—É
"""
import os
import sys
from pathlib import Path
from dotenv import load_dotenv

print("\n" + "="*80)
print("üîç –ü–†–ï-FLIGHT CHECK - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–∏—Å—Ç–µ–º–∏")
print("="*80 + "\n")

# 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .env
print("1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .env —Ñ–∞–π–ª—É...")
load_dotenv()

api_key = os.getenv('FUTURES_API_KEY')
api_secret = os.getenv('FUTURES_API_SECRET')
telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
telegram_chat = os.getenv('TELEGRAM_CHAT_ID')

if api_key and api_secret:
    print(f"   ‚úÖ FUTURES_API_KEY: {api_key[:10]}...")
    print(f"   ‚úÖ FUTURES_API_SECRET: {api_secret[:10]}...")
else:
    print("   ‚ùå API –∫–ª—é—á—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ!")
    sys.exit(1)

if telegram_token and telegram_chat:
    print(f"   ‚úÖ TELEGRAM_BOT_TOKEN: {telegram_token[:10]}...")
    print(f"   ‚úÖ TELEGRAM_CHAT_ID: {telegram_chat}")
else:
    print("   ‚ö†Ô∏è Telegram –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)")

# 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π
print("\n2Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ML –º–æ–¥–µ–ª–µ–π...")
models_dir = Path('models')
required_symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'XRPUSDT', 'DOTUSDT']
missing_models = []

for symbol in required_symbols:
    model_dir = models_dir / f'simple_trend_{symbol}'
    model_file = model_dir / f'model_{symbol}_4h.pkl'
    
    if model_file.exists():
        print(f"   ‚úÖ {symbol} - –≥–æ—Ç–æ–≤–∞")
    else:
        print(f"   ‚ùå {symbol} - –í–Ü–î–°–£–¢–ù–Ø")
        missing_models.append(symbol)

if missing_models:
    print(f"\n   ‚ö†Ô∏è –£–í–ê–ì–ê: –í—ñ–¥—Å—É—Ç–Ω—ñ –º–æ–¥–µ–ª—ñ –¥–ª—è {len(missing_models)} —Å–∏–º–≤–æ–ª—ñ–≤")
    print(f"   –ó–∞–ø—É—Å—Ç—ñ—Ç—å: python master_control.py train --symbols {' '.join(missing_models)}")
    sys.exit(1)

# 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
print("\n3Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Python –ø–∞–∫–µ—Ç—ñ–≤...")
required_packages = [
    'binance',
    'pandas',
    'numpy',
    'joblib',
    'sklearn',
    'telegram',
    'dotenv',
    'tabulate',
    'sqlalchemy',
]

missing_packages = []
for package in required_packages:
    try:
        __import__(package if package != 'sklearn' else 'sklearn')
        print(f"   ‚úÖ {package}")
    except ImportError:
        print(f"   ‚ùå {package}")
        missing_packages.append(package)

if missing_packages:
    print(f"\n   ‚ö†Ô∏è –£–í–ê–ì–ê: –í—ñ–¥—Å—É—Ç–Ω—ñ –ø–∞–∫–µ—Ç–∏: {', '.join(missing_packages)}")
    print(f"   –ó–∞–ø—É—Å—Ç—ñ—Ç—å: pip install {' '.join(missing_packages)}")
    sys.exit(1)

# 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Rust —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤
print("\n4Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Rust —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤...")
try:
    from training.rust_features import RustFeatureEngineer
    engineer = RustFeatureEngineer()
    print("   ‚úÖ Rust —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ")
except Exception as e:
    print(f"   ‚ö†Ô∏è Rust —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
    print("   (–ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –∞–ª–µ –º–æ–∂–µ —É–ø–æ–≤—ñ–ª—å–Ω–∏—Ç–∏ —Ä–æ–±–æ—Ç—É)")

# 5. –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance
print("\n5Ô∏è‚É£ –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance Testnet...")
try:
    from binance.client import Client
    client = Client(api_key, api_secret, testnet=True)
    account = client.futures_account()
    balance = float(account['totalWalletBalance'])
    print(f"   ‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ")
    print(f"   üí∞ –ë–∞–ª–∞–Ω—Å: ${balance:.2f} USDT")
except Exception as e:
    print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
    sys.exit(1)

# 6. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
print("\n6Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ç–æ—á–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π...")
try:
    positions = client.futures_position_information()
    open_positions = [p for p in positions if abs(float(p['positionAmt'])) > 0.0001]
    
    if open_positions:
        print(f"   ‚ö†Ô∏è –í–∂–µ —î {len(open_positions)} –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π:")
        total_pnl = 0
        for pos in open_positions:
            symbol = pos['symbol']
            amt = float(pos['positionAmt'])
            pnl = float(pos['unRealizedProfit'])
            side = 'LONG' if amt > 0 else 'SHORT'
            print(f"      ‚Ä¢ {symbol} {side}: ${pnl:+.2f}")
            total_pnl += pnl
        print(f"   üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π PnL: ${total_pnl:+.2f}")
    else:
        print("   ‚úÖ –ù–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π")
except Exception as e:
    print(f"   ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–∑–∏—Ü—ñ–π: {e}")

# 7. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—ñ–≤
print("\n7Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ª–æ–≥—ñ–≤...")
logs_dir = Path('logs')
if not logs_dir.exists():
    logs_dir.mkdir()
    print("   ‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è logs —Å—Ç–≤–æ—Ä–µ–Ω–∞")
else:
    log_files = list(logs_dir.glob('*.log'))
    print(f"   ‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è logs —ñ—Å–Ω—É—î ({len(log_files)} —Ñ–∞–π–ª—ñ–≤)")

# –ü—ñ–¥—Å—É–º–æ–∫
print("\n" + "="*80)
print("‚úÖ –í–°–Ü –ü–ï–†–ï–í–Ü–†–ö–ò –ü–†–û–ô–î–ï–ù–û –£–°–ü–Ü–®–ù–û!")
print("="*80)
print("\nüöÄ –ì–æ—Ç–æ–≤–æ –¥–æ –∑–∞–ø—É—Å–∫—É –Ω—ñ—á–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ:")
print("   python night_trading.py")
print("\nüí° –î–æ–¥–∞—Ç–∫–æ–≤–æ:")
print("   ‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∑–∏—Ü—ñ—ó: python check_orders.py")
print("   ‚Ä¢ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: python master_control.py monitor")
print("   ‚Ä¢ –ó—É–ø–∏–Ω–∏—Ç–∏: Ctrl+C")
print("\n‚ö†Ô∏è –£–í–ê–ì–ê: –ë–æ—Ç –±—É–¥–µ —Ç–æ—Ä–≥—É–≤–∞—Ç–∏ –Ω–∞ Testnet –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –æ—Ä–¥–µ—Ä–∞–º–∏!")
print("   –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤–∏ –≥–æ—Ç–æ–≤—ñ –¥–æ —Ü—å–æ–≥–æ.\n")
