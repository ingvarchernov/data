#!/usr/bin/env python3
"""
üéØ MASTER CONTROL - –Ñ–¥–∏–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥—É –¥–ª—è –≤—Å—ñ—î—ó —Ç–æ—Ä–≥–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
–û–±'—î–¥–Ω—É—î: —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è, —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è, –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥, live trading
"""
import asyncio
import argparse
import logging
import sys
from pathlib import Path
from typing import List
import os

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –î–æ–¥–∞—î–º–æ –¥–æ PATH
sys.path.insert(0, str(Path(__file__).parent))

from training.batch_train_rf import train_all_symbols
from training.simple_trend_classifier import SimpleTrendClassifier

# Default configuration
DEFAULT_SYMBOLS = [
    'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 
    'ADAUSDT', 'XRPUSDT', 'DOGEUSDT', 'DOTUSDT',
    'MATICUSDT', 'AVAXUSDT'
]

class MasterControl:
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä —Ç–æ—Ä–≥–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏"""
    
    def __init__(self):
        self.models_dir = Path("models")
        self.models_dir.mkdir(exist_ok=True)
    
    async def train_models(self, symbols: List[str] = None, days: int = 730, force: bool = False):
        """–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ML –º–æ–¥–µ–ª–µ–π"""
        logger.info("\n" + "="*80)
        logger.info("ü§ñ –¢–†–ï–ù–£–í–ê–ù–ù–Ø ML –ú–û–î–ï–õ–ï–ô")
        logger.info("="*80)
        
        symbols = symbols or DEFAULT_SYMBOLS
        logger.info(f"üìä –°–∏–º–≤–æ–ª—ñ–≤: {len(symbols)}")
        logger.info(f"üìÖ –Ü—Å—Ç–æ—Ä—ñ—è: {days} –¥–Ω—ñ–≤ (~{days//365} —Ä–æ–∫—ñ–≤)")
        logger.info(f"üîÑ Force retrain: {force}\n")
        
        results = []
        for i, symbol in enumerate(symbols, 1):
            logger.info(f"\n[{i}/{len(symbols)}] üéØ {symbol}")
            logger.info("-" * 80)
            
            try:
                model_dir = self.models_dir / f"simple_trend_{symbol}"
                model_file = model_dir / f"model_{symbol}_4h.pkl"
                
                if model_file.exists() and not force:
                    logger.info(f"‚è≠Ô∏è  –ú–æ–¥–µ–ª—å —ñ—Å–Ω—É—î, –ø—Ä–æ–ø—É—Å–∫–∞—é (--force –¥–ª—è –ø–µ—Ä–µ—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è)")
                    results.append({'symbol': symbol, 'status': 'skipped'})
                    continue
                
                classifier = SimpleTrendClassifier(symbol=symbol, interval='4h')
                await classifier.prepare_data(days=days)
                metrics = await classifier.train()
                classifier.save_model()
                
                acc = metrics.get('test_accuracy', 0)
                logger.info(f"‚úÖ {symbol}: {acc:.2%} accuracy")
                
                results.append({
                    'symbol': symbol,
                    'status': 'success',
                    'accuracy': acc
                })
                
            except Exception as e:
                logger.error(f"‚ùå {symbol}: {e}")
                results.append({
                    'symbol': symbol,
                    'status': 'error',
                    'error': str(e)
                })
        
        # Summary
        self._print_training_summary(results)
        return results
    
    def _print_training_summary(self, results: List[dict]):
        """–ü—ñ–¥—Å—É–º–æ–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"""
        logger.info("\n" + "="*80)
        logger.info("üìä –ü–Ü–î–°–£–ú–û–ö –¢–†–ï–ù–£–í–ê–ù–ù–Ø")
        logger.info("="*80 + "\n")
        
        success = [r for r in results if r['status'] == 'success']
        skipped = [r for r in results if r['status'] == 'skipped']
        errors = [r for r in results if r['status'] == 'error']
        
        if success:
            logger.info(f"‚úÖ –£–°–ü–Ü–®–ù–û –ù–ê–¢–†–ï–ù–û–í–ê–ù–û: {len(success)}")
            sorted_success = sorted(success, key=lambda x: x.get('accuracy', 0), reverse=True)
            for r in sorted_success:
                logger.info(f"   {r['symbol']:12} - {r['accuracy']:.2%}")
        
        if skipped:
            logger.info(f"\n‚è≠Ô∏è  –ü–†–û–ü–£–©–ï–ù–û: {len(skipped)}")
            for r in skipped:
                logger.info(f"   {r['symbol']}")
        
        if errors:
            logger.info(f"\n‚ùå –ü–û–ú–ò–õ–ö–ò: {len(errors)}")
            for r in errors:
                logger.info(f"   {r['symbol']:12} - {r.get('error', 'Unknown')}")
        
        logger.info(f"\n{'='*80}")
        logger.info(f"–í—Å—å–æ–≥–æ: {len(results)} | –£—Å–ø—ñ—Ö: {len(success)} | –ü—Ä–æ–ø—É—â–µ–Ω–æ: {len(skipped)} | –ü–æ–º–∏–ª–∫–∏: {len(errors)}")
        logger.info(f"{'='*80}\n")
    
    def check_models(self, symbols: List[str] = None):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –º–æ–¥–µ–ª–µ–π"""
        logger.info("\n" + "="*80)
        logger.info("üîç –ü–ï–†–ï–í–Ü–†–ö–ê –ú–û–î–ï–õ–ï–ô")
        logger.info("="*80 + "\n")
        
        symbols = symbols or DEFAULT_SYMBOLS
        existing = []
        missing = []
        
        for symbol in symbols:
            model_dir = self.models_dir / f"simple_trend_{symbol}"
            model_file = model_dir / f"model_{symbol}_4h.pkl"
            
            if model_file.exists():
                size_mb = model_file.stat().st_size / (1024 * 1024)
                logger.info(f"‚úÖ {symbol:12} - {size_mb:.2f} MB")
                existing.append(symbol)
            else:
                logger.info(f"‚ùå {symbol:12} - –≤—ñ–¥—Å—É—Ç–Ω—è")
                missing.append(symbol)
        
        logger.info(f"\n{'='*80}")
        logger.info(f"–Ü—Å–Ω—É—é—Ç—å: {len(existing)}/{len(symbols)} –º–æ–¥–µ–ª–µ–π")
        if missing:
            logger.info(f"–í—ñ–¥—Å—É—Ç–Ω—ñ: {', '.join(missing)}")
        logger.info(f"{'='*80}\n")
        
        return {'existing': existing, 'missing': missing}
    
    async def monitor_positions(self):
        """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Ç–æ—á–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π"""
        logger.info("\n" + "="*80)
        logger.info("üìä –ú–û–ù–Ü–¢–û–†–ò–ù–ì –ü–û–ó–ò–¶–Ü–ô")
        logger.info("="*80 + "\n")
        
        try:
            from dotenv import load_dotenv
            from binance.client import Client
            
            load_dotenv()
            client = Client(
                os.getenv('FUTURES_API_KEY'),
                os.getenv('FUTURES_API_SECRET'),
                testnet=True
            )
            
            positions = client.futures_position_information()
            
            total_pnl = 0
            count = 0
            
            for pos in positions:
                amt = float(pos['positionAmt'])
                if abs(amt) > 0.0001:
                    symbol = pos['symbol']
                    entry = float(pos['entryPrice'])
                    mark = float(pos['markPrice'])
                    pnl = float(pos['unRealizedProfit'])
                    side = 'üìà LONG' if amt > 0 else 'üìâ SHORT'
                    pnl_emoji = 'üí∞' if pnl > 0 else 'üìâ'
                    
                    logger.info(f"{side} {symbol}")
                    logger.info(f"   Entry: ${entry:,.4f} | Mark: ${mark:,.4f}")
                    logger.info(f"   Size: {abs(amt):.4f} | {pnl_emoji} PnL: ${pnl:+.2f}\n")
                    
                    total_pnl += pnl
                    count += 1
            
            logger.info("="*80)
            if count > 0:
                emoji = 'üí∞' if total_pnl > 0 else 'üìâ'
                logger.info(f"–ü–æ–∑–∏—Ü—ñ–π: {count} | {emoji} –ó–∞–≥–∞–ª—å–Ω–∏–π PnL: ${total_pnl:+.2f}")
            else:
                logger.info("‚úÖ –ù–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π")
            logger.info("="*80 + "\n")
            
            return {'count': count, 'total_pnl': total_pnl}
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
            return None
    
    async def run_bot(self, symbols: List[str] = None, testnet: bool = True, enable_trading: bool = False):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        logger.info("\n" + "="*80)
        logger.info("ü§ñ –ó–ê–ü–£–°–ö –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê")
        logger.info("="*80)
        
        symbols = symbols or DEFAULT_SYMBOLS[:6]  # –û–±–º–µ–∂—É—î–º–æ –¥–æ 6
        
        logger.info(f"üìä –°–∏–º–≤–æ–ª–∏: {', '.join(symbols)}")
        logger.info(f"üß™ Testnet: {testnet}")
        logger.info(f"‚ö° Live Trading: {enable_trading}")
        logger.info("="*80 + "\n")
        
        try:
            from simple_trading_bot import SimpleTradingBot
            
            bot = SimpleTradingBot(
                symbols=symbols,
                testnet=testnet,
                enable_trading=enable_trading
            )
            
            await bot.run()
            
        except KeyboardInterrupt:
            logger.info("\n‚ö†Ô∏è  –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –±–æ—Ç–∞: {e}")
            raise

async def main():
    parser = argparse.ArgumentParser(
        description='üéØ MASTER CONTROL - –¢–æ—Ä–≥–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:

  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π
  python master_control.py check
  
  # –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 10 –≤–∞–ª—é—Ç)
  python master_control.py train
  
  # –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –≤–∞–ª—é—Ç
  python master_control.py train --symbols BTCUSDT ETHUSDT
  
  # –ü–µ—Ä–µ—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –º–æ–¥–µ–ª–µ–π
  python master_control.py train --force
  
  # –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü—ñ–π
  python master_control.py monitor
  
  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (demo mode)
  python master_control.py bot --symbols BTCUSDT ETHUSDT
  
  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∑ live trading
  python master_control.py bot --symbols BTCUSDT ETHUSDT --live
  
  # –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª: train ‚Üí check ‚Üí monitor ‚Üí bot
  python master_control.py all
        """
    )
    
    parser.add_argument(
        'command',
        choices=['train', 'check', 'monitor', 'bot', 'all'],
        help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è'
    )
    
    parser.add_argument(
        '--symbols',
        nargs='+',
        default=None,
        help='–°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: —Ç–æ–ø-10)'
    )
    
    parser.add_argument(
        '--days',
        type=int,
        default=730,
        help='–î–Ω—ñ–≤ —ñ—Å—Ç–æ—Ä—ñ—ó –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è (default: 730 = 2 —Ä–æ–∫–∏)'
    )
    
    parser.add_argument(
        '--force',
        action='store_true',
        help='–ü–µ—Ä–µ—Ç—Ä–µ–Ω—É–≤–∞—Ç–∏ –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –º–æ–¥–µ–ª—å —ñ—Å–Ω—É—î'
    )
    
    parser.add_argument(
        '--testnet',
        action='store_true',
        default=True,
        help='–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Binance Testnet (default: True)'
    )
    
    parser.add_argument(
        '--live',
        action='store_true',
        help='–£–≤—ñ–º–∫–Ω—É—Ç–∏ live trading (–û–ë–ï–†–ï–ñ–ù–û!)'
    )
    
    args = parser.parse_args()
    
    control = MasterControl()
    
    try:
        if args.command == 'train':
            await control.train_models(args.symbols, args.days, args.force)
        
        elif args.command == 'check':
            control.check_models(args.symbols)
        
        elif args.command == 'monitor':
            await control.monitor_positions()
        
        elif args.command == 'bot':
            await control.run_bot(args.symbols, args.testnet, args.live)
        
        elif args.command == 'all':
            logger.info("üéØ –ü–û–í–ù–ò–ô –¶–ò–ö–õ: TRAIN ‚Üí CHECK ‚Üí MONITOR ‚Üí BOT\n")
            
            # 1. Train
            await control.train_models(args.symbols, args.days, args.force)
            
            # 2. Check
            result = control.check_models(args.symbols)
            
            # 3. Monitor
            await control.monitor_positions()
            
            # 4. Bot (—è–∫—â–æ —î –º–æ–¥–µ–ª—ñ)
            if result['existing']:
                logger.info(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ {len(result['existing'])} –º–æ–¥–µ–ª–µ–π, –∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...\n")
                await control.run_bot(result['existing'][:6], args.testnet, args.live)
            else:
                logger.warning("‚ö†Ô∏è  –ù–µ–º–∞—î –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞")
    
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è  –ü—Ä–æ–≥—Ä–∞–º—É –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}", exc_info=True)
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
