#!/usr/bin/env python3
"""
–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –¥–ª—è –º—É–ª—å—Ç–∏—Å—Ç—Ä–∞—Ç–µ–≥—ñ–π–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏:
- 4h —Ç–∞–π–º—Ñ—Ä–µ–π–º: —Ç—Ä–µ–Ω–¥–æ–≤—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
- 1h —Ç–∞–π–º—Ñ—Ä–µ–π–º: —Å–≤—ñ–Ω–≥-—Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó

–î–æ–¥–∞—î–º–æ –±—ñ–ª—å—à–µ —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –±—ñ–ª—å—à–µ —Ç–æ—Ä–≥–æ–≤–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π
"""
import asyncio
import logging
from pathlib import Path
from datetime import datetime
import sys
import os

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from training.simple_trend_classifier import SimpleTrendClassifier

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–û–ü-20 –ª—ñ–∫–≤—ñ–¥–Ω–∏—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
ALL_SYMBOLS = [
    # –í–∂–µ —î 4h –º–æ–¥–µ–ª—ñ
    'BTCUSDT',
    'ETHUSDT',
    'BNBUSDT',
    'SOLUSDT',
    'ADAUSDT',
    'DOGEUSDT',
    'XRPUSDT',
    
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ª—ñ–∫–≤—ñ–¥–Ω—ñ –ø–∞—Ä–∏
    'AVAXUSDT',
    'LINKUSDT',
    'MATICUSDT',
    'DOTUSDT',
    'UNIUSDT',
    'LTCUSDT',
    'ATOMUSDT',
    'ETCUSDT',
    'XLMUSDT',
    'ALGOUSDT',
    'VETUSDT',
    'FILUSDT',
    'TRXUSDT',
]

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
TIMEFRAMES = {
    '4h': {
        'days': 730,  # 2 —Ä–æ–∫–∏
        'description': '–¢—Ä–µ–Ω–¥–æ–≤—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó'
    },
    '1h': {
        'days': 365,  # 1 —Ä—ñ–∫ (–±—ñ–ª—å—à–µ –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–æ—Ç—à–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤)
        'description': '–°–≤—ñ–Ω–≥-—Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó'
    }
}


async def train_symbol(symbol: str, timeframe: str, days: int):
    """–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –æ–¥–Ω—ñ—î—ó –º–æ–¥–µ–ª—ñ"""
    try:
        logger.info(f"\n{'='*80}")
        logger.info(f"üìä {symbol} [{timeframe}]")
        logger.info(f"{'='*80}")
        
        trainer = SimpleTrendClassifier(
            symbol=symbol,
            timeframe=timeframe
        )
        
        result = await trainer.train(days=days)
        
        return {
            'symbol': symbol,
            'timeframe': timeframe,
            'success': True,
            'test_accuracy': result['test_accuracy'],
            'training_time': result['duration'],
            'model_path': result['model_path']
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è {symbol} [{timeframe}]: {e}")
        return {
            'symbol': symbol,
            'timeframe': timeframe,
            'success': False,
            'error': str(e)
        }


async def train_multi_strategy_models(
    symbols: list = None,
    timeframes: list = None,
    skip_existing: bool = True
):
    """
    –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –¥–ª—è –º—É–ª—å—Ç–∏—Å—Ç—Ä–∞—Ç–µ–≥—ñ–π–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
    
    Args:
        symbols: —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤ (—è–∫—â–æ None - –≤—Å—ñ)
        timeframes: —Å–ø–∏—Å–æ–∫ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤ (—è–∫—â–æ None - –≤—Å—ñ)
        skip_existing: –ø—Ä–æ–ø—É—Å–∫–∞—Ç–∏ –≤–∂–µ –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω—ñ –º–æ–¥–µ–ª—ñ
    """
    
    if symbols is None:
        symbols = ALL_SYMBOLS
    
    if timeframes is None:
        timeframes = list(TIMEFRAMES.keys())
    
    logger.info("\n" + "="*80)
    logger.info("üöÄ MULTI-STRATEGY TRAINING")
    logger.info("="*80)
    logger.info(f"–°–∏–º–≤–æ–ª–∏: {len(symbols)}")
    logger.info(f"–¢–∞–π–º—Ñ—Ä–µ–π–º–∏: {timeframes}")
    logger.info(f"–í—Å—å–æ–≥–æ –º–æ–¥–µ–ª–µ–π: {len(symbols) * len(timeframes)}")
    logger.info("="*80 + "\n")
    
    results = []
    start_time = datetime.now()
    
    for timeframe in timeframes:
        tf_config = TIMEFRAMES[timeframe]
        logger.info(f"\n{'#'*80}")
        logger.info(f"üìà {timeframe.upper()} –¢–ê–ô–ú–§–†–ï–ô–ú - {tf_config['description']}")
        logger.info(f"{'#'*80}\n")
        
        for symbol in symbols:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º–æ–¥–µ–ª—å –≤–∂–µ —ñ—Å–Ω—É—î
            if skip_existing and timeframe == '4h':
                model_dir = Path(f'models/simple_trend_{symbol}')
                if model_dir.exists():
                    logger.info(f"‚è≠Ô∏è {symbol} [{timeframe}]: –º–æ–¥–µ–ª—å –≤–∂–µ —ñ—Å–Ω—É—î, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
                    continue
            
            result = await train_symbol(
                symbol=symbol,
                timeframe=timeframe,
                days=tf_config['days']
            )
            results.append(result)
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    total_time = (datetime.now() - start_time).total_seconds()
    
    logger.info("\n" + "="*80)
    logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–†–ï–ù–£–í–ê–ù–ù–Ø")
    logger.info("="*80)
    
    # –ì—Ä—É–ø—É—î–º–æ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö
    for timeframe in timeframes:
        tf_results = [r for r in results if r['timeframe'] == timeframe]
        successful = [r for r in tf_results if r.get('success')]
        failed = [r for r in tf_results if not r.get('success')]
        
        logger.info(f"\n{timeframe.upper()} –¢–ê–ô–ú–§–†–ï–ô–ú:")
        logger.info(f"  –£—Å–ø—ñ—à–Ω–æ: {len(successful)}/{len(tf_results)}")
        
        if successful:
            # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ accuracy
            successful.sort(key=lambda x: x.get('test_accuracy', 0), reverse=True)
            
            for r in successful:
                acc = r.get('test_accuracy', 0)
                time_taken = r.get('training_time', 0)
                symbol = r['symbol']
                
                # –ö–æ–ª—å–æ—Ä–æ–≤–µ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è
                if acc >= 0.70:
                    mark = "‚úÖ"
                elif acc >= 0.60:
                    mark = "‚ö†Ô∏è"
                else:
                    mark = "‚ùå"
                
                logger.info(f"  {mark} {symbol:12s} {acc:6.2%} ({time_taken:5.1f}s)")
        
        if failed:
            logger.info(f"\n  ‚ùå –ü–æ–º–∏–ª–∫–∏: {len(failed)}")
            for r in failed:
                logger.info(f"     {r['symbol']}: {r.get('error', 'Unknown')[:50]}")
    
    # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    all_successful = [r for r in results if r.get('success')]
    above_70 = [r for r in all_successful if r.get('test_accuracy', 0) >= 0.70]
    above_60 = [r for r in all_successful if 0.60 <= r.get('test_accuracy', 0) < 0.70]
    below_60 = [r for r in all_successful if r.get('test_accuracy', 0) < 0.60]
    
    logger.info("\n" + "="*80)
    logger.info("üéØ –ü–Ü–î–°–£–ú–û–ö:")
    logger.info(f"  –í—Å—å–æ–≥–æ –º–æ–¥–µ–ª–µ–π: {len(results)}")
    logger.info(f"  ‚úÖ Accuracy ‚â•70%: {len(above_70)} (–≥–æ—Ç–æ–≤—ñ –¥–æ —Ç–æ—Ä–≥—ñ–≤–ª—ñ)")
    logger.info(f"  ‚ö†Ô∏è Accuracy 60-70%: {len(above_60)} (–æ–±–µ—Ä–µ–∂–Ω–æ)")
    logger.info(f"  ‚ùå Accuracy <60%: {len(below_60)} (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è)")
    logger.info(f"  ‚è±Ô∏è –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: {total_time:.1f}s")
    logger.info("="*80 + "\n")
    
    return results


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º—É–ª—å—Ç–∏—Å—Ç—Ä–∞—Ç–µ–≥—ñ–π–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π')
    parser.add_argument('--symbols', nargs='+', help='–°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤ (default: –≤—Å—ñ)')
    parser.add_argument('--timeframes', nargs='+', choices=['4h', '1h'], help='–¢–∞–π–º—Ñ—Ä–µ–π–º–∏')
    parser.add_argument('--no-skip', action='store_true', help='–ü–µ—Ä–µ—Ç—Ä–µ–Ω—É–≤–∞—Ç–∏ —ñ—Å–Ω—É—é—á—ñ –º–æ–¥–µ–ª—ñ')
    
    args = parser.parse_args()
    
    results = await train_multi_strategy_models(
        symbols=args.symbols,
        timeframes=args.timeframes,
        skip_existing=not args.no_skip
    )
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    good_models = [r for r in results if r.get('success') and r.get('test_accuracy', 0) >= 0.70]
    
    if good_models:
        logger.info("üöÄ –ì–û–¢–û–í–Ü –î–û –¢–û–†–ì–Ü–í–õ–Ü:")
        
        # –ì—Ä—É–ø—É—î–º–æ –∑–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏
        for tf in ['4h', '1h']:
            tf_good = [r for r in good_models if r['timeframe'] == tf]
            if tf_good:
                symbols = [r['symbol'] for r in tf_good]
                logger.info(f"\n{tf.upper()}: {', '.join(symbols)}")


if __name__ == "__main__":
    asyncio.run(main())
