#!/usr/bin/env python3
"""
–ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ —Ç–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω—É
"""
import os
import sys
import logging
import logging.handlers
from typing import Optional, Dict, Any, Callable
from datetime import datetime
import traceback
import json
import asyncio
from functools import wraps
import time


class TradingLogger:
    """
    –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
    """

    def __init__(self, name: str = "trading_system", log_level: str = "INFO",
                 log_dir: str = "logs", max_bytes: int = 10*1024*1024,
                 backup_count: int = 5):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–≥–µ—Ä–∞

        Args:
            name: –Ü–º'—è –ª–æ–≥–µ—Ä–∞
            log_level: –†—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è
            log_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –¥–ª—è –ª–æ–≥—ñ–≤
            max_bytes: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
            backup_count: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π
        """
        self.name = name
        self.log_dir = log_dir
        self.max_bytes = max_bytes
        self.backup_count = backup_count

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
        os.makedirs(log_dir, exist_ok=True)

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥–µ—Ä–∞
        self.logger = logging.getLogger(name)
        self.logger.setLevel(getattr(logging, log_level.upper()))

        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
        self.logger.handlers.clear()

        # –§–æ—Ä–º–∞—Ç–µ—Ä
        self.formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s'
        )

        # –ö–æ–Ω—Å–æ–ª—å–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä
        self._setup_console_handler()

        # –§–∞–π–ª–æ–≤–∏–π —Ö–µ–Ω–¥–ª–µ—Ä
        self._setup_file_handler()

        # JSON —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏—Ö –ª–æ–≥—ñ–≤
        self._setup_json_handler()

        # –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –ª–æ–≥–∏ –±–∞—Ç—å–∫–∞–º
        self.logger.propagate = False

        self.logger.info(f"üöÄ Trading logger —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π: {name}")

    def _setup_console_handler(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤–∏–≤–æ–¥—É"""
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(self.formatter)
        self.logger.addHandler(console_handler)

    def _setup_file_handler(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –≤–∏–≤–æ–¥—É"""
        log_file = os.path.join(self.log_dir, f"{self.name}.log")

        file_handler = logging.handlers.RotatingFileHandler(
            log_file,
            maxBytes=self.max_bytes,
            backupCount=self.backup_count,
            encoding='utf-8'
        )
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(self.formatter)
        self.logger.addHandler(file_handler)

    def _setup_json_handler(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è JSON –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É"""
        json_file = os.path.join(self.log_dir, f"{self.name}_structured.log")

        json_handler = logging.handlers.RotatingFileHandler(
            json_file,
            maxBytes=self.max_bytes,
            backupCount=self.backup_count,
            encoding='utf-8'
        )
        json_handler.setLevel(logging.INFO)

        # JSON —Ñ–æ—Ä–º–∞—Ç–µ—Ä
        json_formatter = JSONFormatter()
        json_handler.setFormatter(json_formatter)
        self.logger.addHandler(json_handler)

    def get_logger(self) -> logging.Logger:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–≥–µ—Ä–∞"""
        return self.logger

    def log_trade(self, trade_data: Dict[str, Any]):
        """–õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó"""
        self.logger.info(f"TRADE: {json.dumps(trade_data)}")

    def log_error(self, error: Exception, context: Optional[Dict[str, Any]] = None):
        """–õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        error_data = {
            "error_type": type(error).__name__,
            "error_message": str(error),
            "traceback": traceback.format_exc(),
            "context": context or {}
        }
        self.logger.error(f"ERROR: {json.dumps(error_data)}")

    def log_performance(self, operation: str, duration: float, metadata: Optional[Dict[str, Any]] = None):
        """–õ–æ–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
        perf_data = {
            "operation": operation,
            "duration_ms": duration * 1000,
            "timestamp": datetime.now().isoformat(),
            "metadata": metadata or {}
        }
        self.logger.info(f"PERFORMANCE: {json.dumps(perf_data)}")


class JSONFormatter(logging.Formatter):
    """JSON —Ñ–æ—Ä–º–∞—Ç–µ—Ä –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏—Ö –ª–æ–≥—ñ–≤"""

    def format(self, record):
        log_entry = {
            "timestamp": datetime.fromtimestamp(record.created).isoformat(),
            "level": record.levelname,
            "logger": record.name,
            "function": record.funcName,
            "line": record.lineno,
            "message": record.getMessage()
        }

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è exception info —è–∫—â–æ —î
        if record.exc_info:
            log_entry["exception"] = self.formatException(record.exc_info)

        return json.dumps(log_entry)


class ErrorHandler:
    """
    –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
    """

    def __init__(self, logger: Optional[TradingLogger] = None):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–º–∏–ª–æ–∫

        Args:
            logger: –õ–æ–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å—É –ø–æ–º–∏–ª–æ–∫
        """
        self.logger = logger or TradingLogger("error_handler")
        self.error_counts = {}
        self.max_retries = 3
        self.retry_delays = [1, 2, 5]  # —Å–µ–∫—É–Ω–¥–∏

    def handle_error(self, error: Exception, context: Optional[Dict[str, Any]] = None,
                    retry_func: Optional[Callable] = None) -> bool:
        """
        –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏

        Args:
            error: –ü–æ–º–∏–ª–∫–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏
            retry_func: –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä—É

        Returns:
            True —è–∫—â–æ –ø–æ–º–∏–ª–∫—É –æ–±—Ä–æ–±–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ
        """
        error_type = type(error).__name__

        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–º–∏–ª–æ–∫
        self.error_counts[error_type] = self.error_counts.get(error_type, 0) + 1

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
        self.logger.log_error(error, context)

        # –ü–æ–≤—Ç–æ—Ä —Å–ø—Ä–æ–±–∏ —è–∫—â–æ —î —Ñ—É–Ω–∫—Ü—ñ—è
        if retry_func:
            return self._retry_operation(retry_func, error_type)

        return False

    def _retry_operation(self, func: Callable, error_type: str) -> bool:
        """–ü–æ–≤—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–∞–ª—å–Ω–æ—é –∑–∞—Ç—Ä–∏–º–∫–æ—é"""
        for attempt in range(self.max_retries):
            try:
                delay = self.retry_delays[min(attempt, len(self.retry_delays) - 1)]
                time.sleep(delay)

                self.logger.logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä —Å–ø—Ä–æ–±–∏ {attempt + 1}/{self.max_retries} –¥–ª—è {error_type}")

                result = func()
                self.logger.logger.info(f"‚úÖ –ü–æ–≤—Ç–æ—Ä —É—Å–ø—ñ—à–Ω–∏–π –¥–ª—è {error_type}")
                return True

            except Exception as e:
                self.logger.log_error(e, {"attempt": attempt + 1, "error_type": error_type})

        self.logger.logger.error(f"‚ùå –í—Å—ñ –ø–æ–≤—Ç–æ—Ä–∏ –Ω–µ–≤–¥–∞–ª—ñ –¥–ª—è {error_type}")
        return False

    def get_error_stats(self) -> Dict[str, int]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–º–∏–ª–æ–∫"""
        return self.error_counts.copy()

    def reset_error_counts(self):
        """–°–∫–∏–¥–∞–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤ –ø–æ–º–∏–ª–æ–∫"""
        self.error_counts.clear()


class TradingException(Exception):
    """–ë–∞–∑–æ–≤–∏–π –∫–ª–∞—Å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫"""

    def __init__(self, message: str, error_code: Optional[str] = None,
                 context: Optional[Dict[str, Any]] = None):
        super().__init__(message)
        self.error_code = error_code
        self.context = context or {}


class APIError(TradingException):
    """–ü–æ–º–∏–ª–∫–∞ API"""
    pass


class DatabaseError(TradingException):
    """–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    pass


class ValidationError(TradingException):
    """–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó"""
    pass


class InsufficientFundsError(TradingException):
    """–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤"""
    pass


def error_handler(logger: Optional[TradingLogger] = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫

    Args:
        logger: –õ–æ–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å—É –ø–æ–º–∏–ª–æ–∫
    """
    def decorator(func):
        @wraps(func)
        async def async_wrapper(*args, **kwargs):
            error_handler_instance = ErrorHandler(logger)
            try:
                return await func(*args, **kwargs)
            except Exception as e:
                context = {
                    "function": func.__name__,
                    "args": str(args),
                    "kwargs": str(kwargs)
                }
                error_handler_instance.handle_error(e, context)
                raise

        @wraps(func)
        def sync_wrapper(*args, **kwargs):
            error_handler_instance = ErrorHandler(logger)
            try:
                return func(*args, **kwargs)
            except Exception as e:
                context = {
                    "function": func.__name__,
                    "args": str(args),
                    "kwargs": str(kwargs)
                }
                error_handler_instance.handle_error(e, context)
                raise

        if asyncio.iscoroutinefunction(func):
            return async_wrapper
        else:
            return sync_wrapper

    return decorator


def performance_monitor(logger: Optional[TradingLogger] = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ

    Args:
        logger: –õ–æ–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å—É –º–µ—Ç—Ä–∏–∫
    """
    def decorator(func):
        @wraps(func)
        async def async_wrapper(*args, **kwargs):
            logger_instance = logger or TradingLogger("performance")
            start_time = time.time()

            try:
                result = await func(*args, **kwargs)
                duration = time.time() - start_time

                metadata = {
                    "function": func.__name__,
                    "async": True
                }
                logger_instance.log_performance(func.__name__, duration, metadata)

                return result

            except Exception as e:
                duration = time.time() - start_time
                metadata = {
                    "function": func.__name__,
                    "async": True,
                    "error": str(e)
                }
                logger_instance.log_performance(func.__name__, duration, metadata)
                raise

        @wraps(func)
        def sync_wrapper(*args, **kwargs):
            logger_instance = logger or TradingLogger("performance")
            start_time = time.time()

            try:
                result = func(*args, **kwargs)
                duration = time.time() - start_time

                metadata = {
                    "function": func.__name__,
                    "async": False
                }
                logger_instance.log_performance(func.__name__, duration, metadata)

                return result

            except Exception as e:
                duration = time.time() - start_time
                metadata = {
                    "function": func.__name__,
                    "async": False,
                    "error": str(e)
                }
                logger_instance.log_performance(func.__name__, duration, metadata)
                raise

        if asyncio.iscoroutinefunction(func):
            return async_wrapper
        else:
            return sync_wrapper

    return decorator


# –ì–ª–æ–±–∞–ª—å–Ω—ñ –µ–∫–∑–µ–º–ø–ª—è—Ä–∏
default_logger = TradingLogger()
default_error_handler = ErrorHandler(default_logger)

# –ó—Ä—É—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
def log_trade(trade_data: Dict[str, Any]):
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó"""
    default_logger.log_trade(trade_data)

def log_error(error: Exception, context: Optional[Dict[str, Any]] = None):
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏"""
    default_error_handler.handle_error(error, context)

def get_logger(name: str = "trading_system") -> logging.Logger:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–≥–µ—Ä–∞"""
    return TradingLogger(name).get_logger()


# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
if __name__ == "__main__":
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–≥–µ—Ä–∞
    logger = TradingLogger("example")

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó
    trade = {
        "symbol": "BTCUSDT",
        "side": "BUY",
        "quantity": 0.001,
        "price": 50000,
        "timestamp": datetime.now().isoformat()
    }
    logger.log_trade(trade)

    # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ–≤
    @error_handler()
    @performance_monitor()
    def example_function():
        """–ü—Ä–∏–∫–ª–∞–¥ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫ —Ç–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–æ–º"""
        time.sleep(0.1)
        return "success"

    # –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
    result = example_function()
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–º–∏–ª–æ–∫
    print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–º–∏–ª–æ–∫: {default_error_handler.get_error_stats()}")