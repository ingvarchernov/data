# -*- coding: utf-8 -*-
"""
–û–±'—î–¥–Ω–∞–Ω–∏–π –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—á –¥–∞–Ω–∏—Ö –∑ Binance
–ü—ñ–¥—Ç—Ä–∏–º—É—î: —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ, real-time streaming, testnet —Ç–æ—Ä–≥—ñ–≤–ª—é
"""
import asyncio
import logging
import os
from typing import List, Dict, Optional, Any, Tuple
from datetime import datetime, timedelta
from decimal import Decimal, ROUND_DOWN
import time
from enum import Enum

import pandas as pd
from dotenv import load_dotenv

# –°–ø—Ä–æ–±–∞ —ñ–º–ø–æ—Ä—Ç—É –±—ñ–±–ª—ñ–æ—Ç–µ–∫
try:
    from binance.client import Client
    from binance.exceptions import BinanceAPIException, BinanceRequestException
    BINANCE_AVAILABLE = True
except ImportError:
    BINANCE_AVAILABLE = False
    Client = None
    BinanceAPIException = Exception
    BinanceRequestException = Exception

try:
    import ccxt.async_support as ccxt_async
    CCXT_AVAILABLE = True
except ImportError:
    CCXT_AVAILABLE = False

logger = logging.getLogger(__name__)
load_dotenv()


class DataSource(Enum):
    """–î–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö"""
    PYTHON_BINANCE = "python-binance"
    CCXT = "ccxt"
    AUTO = "auto"


class UnifiedBinanceLoader:
    """
    –û–±'—î–¥–Ω–∞–Ω–∏–π –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—á –¥–∞–Ω–∏—Ö –∑ Binance
    
    –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:
    - –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª –¥–∞–Ω–∏—Ö (python-binance, ccxt)
    - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –ø–µ—Ä—ñ–æ–¥—ñ–≤
    - –ö–µ—à—É–≤–∞–Ω–Ω—è —Ç–∞ retry –ª–æ–≥—ñ–∫–∞
    - –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ testnet
    """

    def __init__(
        self,
        api_key: Optional[str] = None,
        api_secret: Optional[str] = None,
        testnet: bool = True,
        data_source: DataSource = DataSource.AUTO,
        use_public_data: bool = True
    ):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—á–∞
        
        Args:
            api_key: Binance API –∫–ª—é—á
            api_secret: Binance API —Å–µ–∫—Ä–µ—Ç
            testnet: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ testnet
            data_source: –î–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö
            use_public_data: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø—É–±–ª—ñ—á–Ω–µ API (–±–µ–∑ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó)
        """
        self.testnet = testnet
        self.use_public_data = use_public_data
        
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥–∂–µ—Ä–µ–ª–∞ –¥–∞–Ω–∏—Ö
        if data_source == DataSource.AUTO:
            # –î–ª—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ python-binance, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–æ
            if BINANCE_AVAILABLE:
                self.data_source = DataSource.PYTHON_BINANCE
            elif CCXT_AVAILABLE:
                self.data_source = DataSource.CCXT
            else:
                raise ImportError("–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ python-binance –∞–±–æ ccxt")
        else:
            self.data_source = data_source
        
        # API –∫–ª—é—á—ñ
        if use_public_data:
            self.api_key = "public"
            self.api_secret = "public"
        else:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ FUTURES_API_KEY / FUTURES_API_SECRET —è–∫ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω—ñ
            self.api_key = (
                api_key or
                os.getenv('FUTURES_API_KEY') or
                os.getenv('BINANCE_TEST_API_KEY' if testnet else 'API_KEY')
            )
            self.api_secret = (
                api_secret or
                os.getenv('FUTURES_API_SECRET') or
                os.getenv('BINANCE_TEST_API_SECRET' if testnet else 'API_SECRET')
            )
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
        self.binance_client = None
        self.ccxt_client = None
        self._initialize_clients()
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        self.max_retries = 3
        self.retry_delay = 1
        self.rate_limit_delay = 0.1
        self.max_records_per_request = 1000
        
        # –ö–µ—à
        self._cache = {}
        self._cache_ttl = 300  # 5 —Ö–≤–∏–ª–∏–Ω
        
        logger.info(
            f"‚úÖ UnifiedBinanceLoader —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: "
            f"source={self.data_source.value}, testnet={testnet}, "
            f"public={use_public_data}"
        )

    def _initialize_clients(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è API –∫–ª—ñ—î–Ω—Ç—ñ–≤"""
        try:
            if self.data_source == DataSource.PYTHON_BINANCE:
                if not BINANCE_AVAILABLE:
                    raise ImportError("python-binance –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
                if not self.use_public_data:
                    self.binance_client = Client(
                        self.api_key,
                        self.api_secret,
                        testnet=self.testnet
                    )
                else:
                    # –ü—É–±–ª—ñ—á–Ω–∏–π –∫–ª—ñ—î–Ω—Ç
                    self.binance_client = Client("", "", testnet=self.testnet)
                
            elif self.data_source == DataSource.CCXT:
                if not CCXT_AVAILABLE:
                    raise ImportError("ccxt –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
                config = {
                    'enableRateLimit': True,
                    'options': {'defaultType': 'spot'}
                }
                
                # Testnet URL —Ç—ñ–ª—å–∫–∏ –¥–ª—è authenticated –∑–∞–ø–∏—Ç—ñ–≤
                if self.testnet and not self.use_public_data:
                    config['urls'] = {'api': 'https://testnet.binance.vision'}
                
                if not self.use_public_data:
                    config['apiKey'] = self.api_key
                    config['secret'] = self.api_secret
                
                self.ccxt_client = ccxt_async.binance(config)
        
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞: {e}")
            raise

    async def get_historical_data(
        self,
        symbol: str,
        interval: str = '1h',
        days_back: int = 7,
        start_date: Optional[datetime] = None,
        end_date: Optional[datetime] = None
    ) -> pd.DataFrame:
        """
        –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∏–π —Å–∏–º–≤–æ–ª (BTCUSDT)
            interval: –Ü–Ω—Ç–µ—Ä–≤–∞–ª ('1m', '5m', '15m', '1h', '4h', '1d')
            days_back: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –Ω–∞–∑–∞–¥ (—è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ start_date)
            start_date: –ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞
            end_date: –ö—ñ–Ω—Ü–µ–≤–∞ –¥–∞—Ç–∞
        
        Returns:
            DataFrame –∑ OHLCV –¥–∞–Ω–∏–º–∏
        """
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–µ—à—É
        cache_key = f"{symbol}_{interval}_{days_back}_{start_date}_{end_date}"
        if cache_key in self._cache:
            cached_data, cached_time = self._cache[cache_key]
            if (datetime.now() - cached_time).total_seconds() < self._cache_ttl:
                logger.debug(f"üì¶ –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –∫–µ—à—É –¥–ª—è {symbol}")
                return cached_data
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–∞—Ç
        if not start_date:
            start_date = datetime.now() - timedelta(days=days_back)
        if not end_date:
            end_date = datetime.now()
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –æ–±—Ä–∞–Ω–∏–π API
        try:
            if self.data_source == DataSource.CCXT:
                data = await self._fetch_ccxt(symbol, interval, start_date, end_date)
            else:
                data = await self._fetch_binance(symbol, interval, start_date, end_date)
            
            # –ö–µ—à—É–≤–∞–Ω–Ω—è
            if not data.empty:
                self._cache[cache_key] = (data, datetime.now())
            
            logger.info(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è {symbol} ({interval})")
            return data
        
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {symbol}: {e}", exc_info=True)
            return pd.DataFrame()

    async def _fetch_ccxt(
        self,
        symbol: str,
        interval: str,
        start_date: datetime,
        end_date: datetime
    ) -> pd.DataFrame:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ CCXT (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)"""
        if not self.ccxt_client:
            raise RuntimeError("CCXT –∫–ª—ñ—î–Ω—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π")
        
        all_data = []
        interval_ms = self._get_interval_ms(interval)
        since = int(start_date.timestamp() * 1000)
        end_ts = int(end_date.timestamp() * 1000)
        
        retry_count = 0
        
        while since < end_ts and retry_count < self.max_retries:
            try:
                ohlcv = await self.ccxt_client.fetch_ohlcv(
                    symbol,
                    interval,
                    since=since,
                    limit=self.max_records_per_request
                )
                
                if not ohlcv:
                    break
                
                all_data.extend(ohlcv)
                
                # –ù–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞–ø–∏—Ç
                since = ohlcv[-1][0] + interval_ms
                
                # Rate limiting
                await asyncio.sleep(self.rate_limit_delay)
                
                if len(ohlcv) < self.max_records_per_request:
                    break
                
                retry_count = 0  # –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø—Ä–∏ —É—Å–ø—ñ—Ö—É
                
            except Exception as e:
                retry_count += 1
                logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (—Å–ø—Ä–æ–±–∞ {retry_count}): {e}")
                
                if retry_count >= self.max_retries:
                    raise
                
                await asyncio.sleep(self.retry_delay * retry_count)
        
        return self._process_ohlcv_data(all_data)

    async def _fetch_binance(
        self,
        symbol: str,
        interval: str,
        start_date: datetime,
        end_date: datetime
    ) -> pd.DataFrame:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ python-binance"""
        if not self.binance_client:
            raise RuntimeError("Binance –∫–ª—ñ—î–Ω—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π")
        
        # python-binance —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π, —Ç–æ–º—É –≤–∏–∫–ª–∏–∫–∞—î–º–æ –≤ executor
        loop = asyncio.get_event_loop()
        
        klines = await loop.run_in_executor(
            None,
            self.binance_client.get_historical_klines,
            symbol,
            interval,
            int(start_date.timestamp() * 1000),
            int(end_date.timestamp() * 1000)
        )
        
        return self._klines_to_dataframe(klines)

    async def get_multiple_symbols(
        self,
        symbols: List[str],
        interval: str = '1h',
        days_back: int = 7
    ) -> Dict[str, pd.DataFrame]:
        """
        –ü–∞—Ä–∞–ª–µ–ª—å–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –∫—ñ–ª—å–∫–æ—Ö —Å–∏–º–≤–æ–ª—ñ–≤
        
        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤
            interval: –Ü–Ω—Ç–µ—Ä–≤–∞–ª
            days_back: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤
        
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ {symbol: DataFrame}
        """
        tasks = [
            self.get_historical_data(symbol, interval, days_back)
            for symbol in symbols
        ]
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        data = {}
        for symbol, result in zip(symbols, results):
            if isinstance(result, Exception):
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {symbol}: {result}")
            elif isinstance(result, pd.DataFrame) and not result.empty:
                data[symbol] = result
        
        logger.info(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(data)}/{len(symbols)} —Å–∏–º–≤–æ–ª—ñ–≤")
        return data

    async def get_ticker(self, symbol: str) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏ —Å–∏–º–≤–æ–ª—É"""
        if self.data_source == DataSource.CCXT:
            if not self.ccxt_client:
                raise RuntimeError("CCXT –∫–ª—ñ—î–Ω—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π")
            await self.ccxt_client.load_markets()
            ccxt_symbol = symbol
            if symbol in self.ccxt_client.markets_by_id:
                ccxt_symbol = self.ccxt_client.markets_by_id[symbol]['symbol']
            elif '/' not in symbol and symbol.endswith('USDT'):
                ccxt_symbol = f"{symbol[:-4]}/USDT"
            return await self.ccxt_client.fetch_ticker(ccxt_symbol)

        if not self.binance_client:
            raise RuntimeError("Binance –∫–ª—ñ—î–Ω—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π")

        loop = asyncio.get_event_loop()
        ticker = await loop.run_in_executor(
            None,
            lambda: self.binance_client.get_symbol_ticker(symbol=symbol)
        )
        return {
            'symbol': ticker.get('symbol', symbol),
            'last': float(ticker.get('price', 0.0))
        }

    async def save_to_database(
        self,
        db_manager,
        symbol: str,
        interval: str,
        days_back: int = 7
    ) -> int:
        """
        –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î
        
        Args:
            db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –ë–î
            symbol: –°–∏–º–≤–æ–ª
            interval: –Ü–Ω—Ç–µ—Ä–≤–∞–ª
            days_back: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤
        
        Returns:
            –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
        """
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        data = await self.get_historical_data(symbol, interval, days_back)
        
        if data.empty:
            logger.error(f"‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è {symbol}")
            return 0
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID
        symbol_id = await db_manager.get_or_create_symbol_id(symbol)
        interval_id = await db_manager.get_or_create_interval_id(interval)
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è batch insert
        records = []
        for idx, row in data.iterrows():
            records.append({
                'symbol_id': symbol_id,
                'interval_id': interval_id,
                'timestamp': idx if isinstance(idx, datetime) else row.get('timestamp'),
                'open': float(row['open']),
                'high': float(row['high']),
                'low': float(row['low']),
                'close': float(row['close']),
                'volume': float(row['volume']),
                'quote_av': float(row.get('quote_av', row['volume'] * row['close'])),
                'trades': int(row.get('trades', 0)),
                'tb_base_av': float(row.get('tb_base_av', row['volume'] * 0.5)),
                'tb_quote_av': float(row.get('tb_quote_av', row.get('quote_av', 0) * 0.5))
            })
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î
        from sqlalchemy import text
        
        async with db_manager.async_session_factory() as session:
            for record in records:
                await session.execute(
                    text("""
                        INSERT INTO historical_data 
                        (symbol_id, interval_id, timestamp, open, high, low, close, 
                         volume, quote_av, trades, tb_base_av, tb_quote_av)
                        VALUES 
                        (:symbol_id, :interval_id, :timestamp, :open, :high, :low, 
                         :close, :volume, :quote_av, :trades, :tb_base_av, :tb_quote_av)
                        ON CONFLICT (symbol_id, interval_id, timestamp)
                        DO UPDATE SET
                            open = EXCLUDED.open,
                            high = EXCLUDED.high,
                            low = EXCLUDED.low,
                            close = EXCLUDED.close,
                            volume = EXCLUDED.volume,
                            quote_av = EXCLUDED.quote_av,
                            trades = EXCLUDED.trades,
                            tb_base_av = EXCLUDED.tb_base_av,
                            tb_quote_av = EXCLUDED.tb_quote_av
                    """),
                    record
                )
            
            await session.commit()
        
        logger.info(f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è {symbol}")
        return len(records)

    def _get_interval_ms(self, interval: str) -> int:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö"""
        interval_map = {
            '1m': 60 * 1000,
            '3m': 3 * 60 * 1000,
            '5m': 5 * 60 * 1000,
            '15m': 15 * 60 * 1000,
            '30m': 30 * 60 * 1000,
            '1h': 60 * 60 * 1000,
            '2h': 2 * 60 * 60 * 1000,
            '4h': 4 * 60 * 60 * 1000,
            '6h': 6 * 60 * 60 * 1000,
            '8h': 8 * 60 * 60 * 1000,
            '12h': 12 * 60 * 60 * 1000,
            '1d': 24 * 60 * 60 * 1000,
            '3d': 3 * 24 * 60 * 60 * 1000,
            '1w': 7 * 24 * 60 * 60 * 1000,
            '1M': 30 * 24 * 60 * 60 * 1000
        }
        return interval_map.get(interval, 60 * 60 * 1000)

    def _process_ohlcv_data(self, ohlcv: List[List]) -> pd.DataFrame:
        """–û–±—Ä–æ–±–∫–∞ OHLCV –¥–∞–Ω–∏—Ö –≤—ñ–¥ CCXT"""
        if not ohlcv:
            return pd.DataFrame()
        
        df = pd.DataFrame(
            ohlcv,
            columns=['timestamp', 'open', 'high', 'low', 'close', 'volume']
        )
        
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏
        df['quote_av'] = df['volume'] * df['close']
        df['trades'] = 0
        df['tb_base_av'] = df['volume'] * 0.5
        df['tb_quote_av'] = df['quote_av'] * 0.5
        
        return df

    def _klines_to_dataframe(self, klines: List[List]) -> pd.DataFrame:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è klines –≤—ñ–¥ python-binance –≤ DataFrame"""
        if not klines:
            return pd.DataFrame()
        
        df = pd.DataFrame(klines, columns=[
            'timestamp', 'open', 'high', 'low', 'close', 'volume',
            'close_time', 'quote_asset_volume', 'number_of_trades',
            'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'
        ])
        
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        
        # –í–∏–±—ñ—Ä –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
        df = df[['open', 'high', 'low', 'close', 'volume']].astype(float)
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏
        df['quote_av'] = df['volume'] * df['close']
        df['trades'] = 0
        df['tb_base_av'] = df['volume'] * 0.5
        df['tb_quote_av'] = df['quote_av'] * 0.5
        
        return df

    async def close(self):
        """–ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω—å"""
        if self.ccxt_client:
            await self.ccxt_client.close()
        
        logger.info("üîí UnifiedBinanceLoader –∑–∞–∫—Ä–∏—Ç–æ")

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä"""
        if self.ccxt_client:
            try:
                asyncio.get_event_loop().run_until_complete(self.ccxt_client.close())
            except:
                pass


# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
async def get_historical_data(
    symbol: str,
    interval: str,
    days_back: int,
    api_key: Optional[str] = None,
    api_secret: Optional[str] = None,
    use_public: bool = True
) -> pd.DataFrame:
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ data_extraction.py"""
    loader = UnifiedBinanceLoader(
        api_key=api_key,
        api_secret=api_secret,
        testnet=False,
        use_public_data=use_public
    )
    
    try:
        return await loader.get_historical_data(symbol, interval, days_back)
    finally:
        await loader.close()


async def save_ohlcv_to_db(
    db_manager,
    symbol: str,
    interval: str,
    days_back: int = 7
):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ binance_loader.py"""
    loader = UnifiedBinanceLoader(use_public_data=True)
    
    try:
        return await loader.save_to_database(db_manager, symbol, interval, days_back)
    finally:
        await loader.close()


# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
async def example_usage():
    """–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"""
    
    # 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É
    loader = UnifiedBinanceLoader(use_public_data=True)
    
    btc_data = await loader.get_historical_data('BTCUSDT', '1h', days_back=30)
    print(f"üìä BTC –¥–∞–Ω—ñ: {len(btc_data)} –∑–∞–ø–∏—Å—ñ–≤")
    print(btc_data.head())
    
    # 2. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–Ω–æ–∂–∏–Ω–∏ —Å–∏–º–≤–æ–ª—ñ–≤ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
    symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT']
    multi_data = await loader.get_multiple_symbols(symbols, '1h', 7)
    
    for symbol, data in multi_data.items():
        print(f"‚úÖ {symbol}: {len(data)} –∑–∞–ø–∏—Å—ñ–≤")
    
    # 3. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î (—è–∫—â–æ —î db_manager)
    # await loader.save_to_database(db_manager, 'BTCUSDT', '1h', 7)
    
    await loader.close()


if __name__ == "__main__":
    asyncio.run(example_usage())