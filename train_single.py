#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É
"""
import asyncio
import sys
import argparse
from training.simple_trend_classifier import SimpleTrendClassifier

async def main():
    parser = argparse.ArgumentParser(description="–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è Random Forest –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É")
    parser.add_argument('symbol', type=str, help='–°–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, BTCUSDT)')
    parser.add_argument('--timeframe', type=str, default='4h', help='–¢–∞–π–º—Ñ—Ä–µ–π–º (–∑–∞ –∑–∞–º–æ–≤—á. 4h)')
    parser.add_argument('--days', type=int, default=730, help='–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ —ñ—Å—Ç–æ—Ä—ñ—ó (–∑–∞ –∑–∞–º–æ–≤—á. 730)')
    
    args = parser.parse_args()
    
    print(f"üöÄ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è {args.symbol} –Ω–∞ {args.timeframe} —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ...")
    print(f"üìÖ –Ü—Å—Ç–æ—Ä—ñ—è: {args.days} –¥–Ω—ñ–≤")
    print("=" * 60)
    
    try:
        classifier = SimpleTrendClassifier(
            symbol=args.symbol,
            timeframe=args.timeframe
        )
        
        print("üìä –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö...")
        await classifier.prepare_data(days=args.days)
        
        print("ü§ñ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ...")
        metrics = await classifier.train()
        
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò:")
        print("=" * 60)
        print(f"Train accuracy: {metrics['train_accuracy']:.2%}")
        print(f"Test accuracy:  {metrics['test_accuracy']:.2%}")
        print(f"\n–ü—Ä–µ—Ü–∏–∑—ñ—è DOWN: {metrics['precision_down']:.2f}")
        print(f"–ü—Ä–µ—Ü–∏–∑—ñ—è UP:   {metrics['precision_up']:.2f}")
        print(f"\nRecall DOWN: {metrics['recall_down']:.2f}")
        print(f"Recall UP:   {metrics['recall_up']:.2f}")
        
        if metrics['test_accuracy'] >= 0.70:
            print("\nüéØ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è! (accuracy ‚â•70%)")
        else:
            print(f"\n‚ö†Ô∏è  –ü–æ—Ç—Ä—ñ–±–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è (accuracy {metrics['test_accuracy']:.2%} < 70%)")
        
        print("=" * 60)
        
        return 0
        
    except KeyboardInterrupt:
        print("\nüõë –ü–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        return 130
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", file=sys.stderr)
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
