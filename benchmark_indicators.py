#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤: Python vs Rust
"""
import time
import numpy as np
import pandas as pd
from binance_data_loader import BinanceDataLoader
from live_trading import LiveTradingSystem


def create_test_data(length=1000):
    """–°—Ç–≤–æ—Ä—é—î —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ"""
    np.random.seed(42)
    dates = pd.date_range('2023-01-01', periods=length, freq='1H')

    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ —Ü—ñ–Ω–∏
    base_price = 50000
    prices = [base_price]
    for i in range(length - 1):
        change = np.random.normal(0, 0.02)  # 2% –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å
        new_price = prices[-1] * (1 + change)
        prices.append(max(new_price, 0.01))  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞

    # –°—Ç–≤–æ—Ä—é—î–º–æ OHLCV
    highs = [p * (1 + abs(np.random.normal(0, 0.01))) for p in prices]
    lows = [p * (1 - abs(np.random.normal(0, 0.01))) for p in prices]
    volumes = [np.random.uniform(100, 1000) for _ in range(length)]

    df = pd.DataFrame({
        'timestamp': dates,
        'open': prices,
        'high': highs,
        'low': lows,
        'close': prices,
        'volume': volumes
    })

    return df


def benchmark_indicators():
    """–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤"""
    print("üöÄ –¢–ï–°–¢ –®–í–ò–î–ö–û–°–¢–Ü –Ü–ù–î–ò–ö–ê–¢–û–†–Ü–í")
    print("=" * 50)

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    df = create_test_data(5000)  # 5000 —Å–≤—ñ—á–æ–∫
    print(f"üìä –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ: {len(df)} —Å–≤—ñ—á–æ–∫")

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
    system = LiveTradingSystem()

    # –¢–µ—Å—Ç —à–≤–∏–¥–∫–æ—Å—Ç—ñ
    iterations = 100
    print(f"üîÑ –¢–µ—Å—Ç—É—é {iterations} —ñ—Ç–µ—Ä–∞—Ü—ñ–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤...")

    start_time = time.time()
    for i in range(iterations):
        prediction = system._calculate_technical_prediction('BTCUSDT', df)
    end_time = time.time()

    total_time = end_time - start_time
    avg_time = total_time / iterations

    print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
    print(f"   –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: {total_time:.3f} —Å–µ–∫")
    print(f"   –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –Ω–∞ —ñ—Ç–µ—Ä–∞—Ü—ñ—é: {avg_time:.4f} —Å–µ–∫")
    print(f"   –®–≤–∏–¥–∫—ñ—Å—Ç—å: {1/avg_time:.1f} –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤/—Å–µ–∫")

    # –î–µ—Ç–∞–ª—ñ –ø—Ä–æ–≥–Ω–æ–∑—É
    print("\nüìà –û—Å—Ç–∞–Ω–Ω—ñ–π –ø—Ä–æ–≥–Ω–æ–∑:")
    print(f"   –ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏: {prediction['change_percent']:.3f}")
    print(f"   –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {prediction['confidence']:.3f}")
    print(f"   –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏: {len(prediction['indicators'])}")

    return avg_time


if __name__ == "__main__":
    benchmark_indicators()