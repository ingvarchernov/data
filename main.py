# -*- coding: utf-8 -*-
"""
–°–ø—Ä–æ—â–µ–Ω–∏–π –º–æ–¥—É–ª—å —Ç–æ—Ä–≥–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ - –¢–Ü–õ–¨–ö–ò BINANCE (–±–µ–∑ paper trading)
"""
import asyncio
import logging
import sys
import os
import argparse
import signal
import pandas as pd
from datetime import datetime
from typing import Dict, Any, Optional

from dotenv import load_dotenv

from intelligent_sys import UnifiedBinanceLoader, StrategyIntegration, create_strategy_integration
from intelligent_sys.utils import calculate_signal_confidence
from monitoring_system import monitoring_system
from cache_system import get_cache_info
from gpu_config import configure_gpu, get_gpu_info
from telegram_bot import telegram_notifier
from async_architecture import init_async_system, shutdown_async_system, ml_pipeline

try:
    from binance.client import Client
    from binance.exceptions import BinanceAPIException, BinanceRequestException
    BINANCE_AVAILABLE = True
except ImportError:
    BINANCE_AVAILABLE = False
    Client = None
    BinanceAPIException = Exception
    BinanceRequestException = Exception

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('trading_system.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

if not BINANCE_AVAILABLE:
    raise RuntimeError("‚ùå python-binance –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install python-binance")


class SimpleTradingSystem:
    """–°–ø—Ä–æ—â–µ–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ - —Ç—ñ–ª—å–∫–∏ Binance API"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.initialized = False
        self.running = False
        self.shutdown_requested = False
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
        self.data_loader: Optional[UnifiedBinanceLoader] = None
        self.strategy_integration: Optional[StrategyIntegration] = None
        self.binance_client: Optional[Client] = None
        
        # –¢–æ—Ä–≥–æ–≤—ñ –¥–∞–Ω—ñ
        self.symbols = config.get('symbols', [])
        self.portfolio_balance = 0.0
        self.positions: Dict[str, Dict] = {}
        self.ml_models: Dict[str, Any] = {}
        
        self.api_key: Optional[str] = None
        self.api_secret: Optional[str] = None

    async def initialize(self) -> bool:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏"""
        try:
            logger.info("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–æ—Ä–≥–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ (Binance only)...")
            
            load_dotenv()
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è API –∫–ª—é—á—ñ–≤
            self.api_key = os.getenv('FUTURES_API_KEY')
            self.api_secret = os.getenv('FUTURES_API_SECRET')
            
            if not self.api_key or not self.api_secret:
                raise RuntimeError("‚ùå FUTURES_API_KEY —Ç–∞ FUTURES_API_SECRET –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ!")
            
            logger.info(f"üîë API –∫–ª—é—á: {self.api_key[:4]}***{self.api_key[-4:]}")
            
            # GPU
            gpu_available = configure_gpu()
            if gpu_available:
                logger.info("‚úÖ GPU –¥–æ—Å—Ç—É–ø–Ω–∏–π")
            
            # Async –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞
            logger.info("üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è async —Å–∏—Å—Ç–µ–º–∏...")
            await init_async_system()
            logger.info("‚úÖ Async —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞")
            
            # Binance –∫–ª—ñ—î–Ω—Ç
            logger.info("üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance...")
            use_testnet = os.getenv('USE_TESTNET', 'false').lower() in ('true', '1', 'yes')
            self.binance_client = Client(self.api_key, self.api_secret, testnet=use_testnet)
            
            if use_testnet:
                logger.info("‚úÖ Binance TESTNET –∫–ª—ñ—î–Ω—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            else:
                logger.info("‚úÖ Binance PRODUCTION –∫–ª—ñ—î–Ω—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            
            # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –±–∞–ª–∞–Ω—Å—É
            await self._sync_balance()
            
            # Data loader
            use_testnet = os.getenv('USE_TESTNET', 'false').lower() in ('true', '1', 'yes')
            self.data_loader = UnifiedBinanceLoader(
                api_key=self.api_key,
                api_secret=self.api_secret,
                testnet=use_testnet,
                use_public_data=False
            )
            logger.info(f"‚úÖ Data loader –≥–æ—Ç–æ–≤–∏–π (testnet={use_testnet})")
            
            # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
            if not self.config.get('skip_data_sync'):
                await self._sync_market_data()
            
            # –°—Ç—Ä–∞—Ç–µ–≥—ñ—ó
            if self.config.get('enable_strategies'):
                logger.info("üß† –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π...")
                self.strategy_integration = create_strategy_integration(
                    symbols=self.symbols,
                    portfolio_value=self.portfolio_balance,
                    enable_scalping=self.config.get('enable_scalping', False),
                    enable_day_trading=self.config.get('enable_day_trading', True),
                    enable_swing_trading=self.config.get('enable_swing_trading', True)
                )
                if self.strategy_integration and self.strategy_integration.initialized:
                    logger.info("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥—ñ—ó –≥–æ—Ç–æ–≤—ñ")
                else:
                    raise RuntimeError("–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó")
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π
            await self._load_models()
            
            self.initialized = True
            self._print_stats()
            
            # Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await telegram_notifier.send_system_status(
                status="–∑–∞–ø—É—â–µ–Ω–∞",
                details=f"–ë–∞–ª–∞–Ω—Å: ${self.portfolio_balance:.2f}\n–°–∏–º–≤–æ–ª–∏: {', '.join(self.symbols)}"
            )
            
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–≤–Ω—ñ—Å—Ç—é –≥–æ—Ç–æ–≤–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}", exc_info=True)
            return False
    
    async def _sync_balance(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –±–∞–ª–∞–Ω—Å—É –∑ Binance"""
        try:
            logger.info("üí∞ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –±–∞–ª–∞–Ω—Å—É...")
            account = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: self.binance_client.futures_account()
            )
            self.portfolio_balance = float(account['totalWalletBalance'])
            available = float(account.get('availableBalance', self.portfolio_balance))
            logger.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å: ${self.portfolio_balance:.2f} USDT (–¥–æ—Å—Ç—É–ø–Ω–æ: ${available:.2f})")
            
            if self.strategy_integration:
                self.strategy_integration.update_portfolio_value(self.portfolio_balance)
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –±–∞–ª–∞–Ω—Å—É: {e}")
            raise
    
    async def _sync_market_data(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö"""
        from optimized_db import db_manager
        
        logger.info("üì• –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...")
        for symbol in self.symbols:
            try:
                saved = await self.data_loader.save_to_database(
                    db_manager, symbol, '1h', 7
                )
                logger.info(f"‚úÖ {symbol}: {saved} –∑–∞–ø–∏—Å—ñ–≤")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è {symbol}: {e}")
    
    async def _load_models(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ML –º–æ–¥–µ–ª–µ–π"""
        logger.info("ü§ñ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ML –º–æ–¥–µ–ª–µ–π...")
        from optimized_model import OptimizedPricePredictionModel
        
        for symbol in self.symbols:
            model_path = f'models/{symbol}_best_model.h5'
            if os.path.exists(model_path):
                try:
                    model = OptimizedPricePredictionModel(
                        input_shape=(60, 20),
                        model_type='advanced_lstm'
                    )
                    model.load_model(model_path)
                    self.ml_models[symbol] = model
                    logger.info(f"‚úÖ {symbol}: –º–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è {symbol}: {e}")
            else:
                logger.warning(f"‚ö†Ô∏è {symbol}: –º–æ–¥–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
    
    def _print_stats(self):
        """–í–∏–≤–µ–¥–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        logger.info("=" * 60)
        logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–ò")
        logger.info("=" * 60)
        logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å: ${self.portfolio_balance:.2f}")
        logger.info(f"üíπ –°–∏–º–≤–æ–ª–∏: {len(self.symbols)}")
        logger.info(f"ü§ñ –ú–æ–¥–µ–ª—ñ: {len(self.ml_models)}/{len(self.symbols)}")
        if self.strategy_integration:
            perf = self.strategy_integration.get_performance_summary()
            logger.info(f"üéØ –°—Ç—Ä–∞—Ç–µ–≥—ñ—ó: {perf.get('active_strategies', 0)}")
        logger.info("=" * 60)
    
    async def run(self):
        """–ì–æ–ª–æ–≤–Ω–∏–π —Ç–æ—Ä–≥–æ–≤–∏–π —Ü–∏–∫–ª"""
        if not self.initialized:
            logger.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
            return
        
        self.running = True
        logger.info("üéØ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª—É...")
        
        iteration = 0
        
        try:
            while self.running:
                iteration += 1
                logger.info(f"\n{'='*60}")
                logger.info(f"üîÑ –Ü—Ç–µ—Ä–∞—Ü—ñ—è #{iteration} - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                logger.info(f"{'='*60}")
                
                try:
                    # 1. –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –±–∞–ª–∞–Ω—Å—É
                    await self._sync_balance()
                    
                    # 2. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
                    logger.info("üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...")
                    market_data = await self.data_loader.get_multiple_symbols(
                        symbols=self.symbols,
                        interval='1h',
                        days_back=30
                    )
                    logger.info(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–∞–Ω—ñ –¥–ª—è {len(market_data)} —Å–∏–º–≤–æ–ª—ñ–≤")
                    
                    # 3. ML –ø—Ä–æ–≥–Ω–æ–∑–∏
                    logger.info("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤...")
                    predictions = await self._generate_predictions(market_data)
                    
                    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤ —É Telegram (–∫–æ–∂–Ω—ñ 5 —ñ—Ç–µ—Ä–∞—Ü—ñ–π)
                    if iteration % 5 == 1:
                        await self._send_predictions_summary(predictions)
                    
                    # 4. –¢–æ—Ä–≥–æ–≤—ñ —Å–∏–≥–Ω–∞–ª–∏
                    if self.strategy_integration:
                        logger.info("üìà –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤...")
                        signals = await self.strategy_integration.generate_signals(
                            market_data=market_data,
                            predictions=predictions
                        )
                        
                        if signals:
                            logger.info(f"üìä –û—Ç—Ä–∏–º–∞–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª—ñ–≤")
                            await self._execute_signals(signals, market_data)
                        else:
                            logger.info("‚ÑπÔ∏è –ù–µ–º–∞—î —Å–∏–≥–Ω–∞–ª—ñ–≤")
                    
                    # 5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–∑–∏—Ü—ñ–π
                    if self.positions:
                        await self._check_positions(market_data)
                    
                    # 6. –°—Ç–∞—Ç—É—Å
                    if iteration % 5 == 0:
                        self._print_trading_status()
                    
                    # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —è–∫—â–æ --once
                    if self.config.get('run_once'):
                        logger.info("üõë –†–µ–∂–∏–º --once: –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è")
                        break
                    
                    # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è
                    interval = self.config.get('trading_interval', 300)
                    logger.info(f"‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è {interval}—Å...")
                    await asyncio.sleep(interval)
                    
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —ñ—Ç–µ—Ä–∞—Ü—ñ—ó: {e}", exc_info=True)
                    await asyncio.sleep(60)
                    
        except asyncio.CancelledError:
            logger.info("üõë –¶–∏–∫–ª —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
        finally:
            self.running = False
            logger.info("üî¥ –¢–æ—Ä–≥–æ–≤–∏–π —Ü–∏–∫–ª –∑—É–ø–∏–Ω–µ–Ω–æ")
    
    async def _generate_predictions(self, market_data: Dict[str, pd.DataFrame]) -> Dict[str, Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è ML –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤"""
        predictions = {}
        
        for symbol, df in market_data.items():
            if df.empty or len(df) < 60:
                continue
            
            try:
                current_price = df['close'].iloc[-1]
                
                # –Ø–∫—â–æ —î –º–æ–¥–µ–ª—å
                if symbol in self.ml_models:
                    model = self.ml_models[symbol]
                    
                    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
                    from optimized_indicators import OptimizedIndicatorCalculator
                    indicator_calc = OptimizedIndicatorCalculator()
                    indicators_dict = await indicator_calc.calculate_all_indicators_batch(df)
                    
                    # –î–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤
                    df['rsi'] = indicators_dict.get('RSI', pd.Series(index=df.index, dtype=float))
                    df['macd'] = indicators_dict.get('MACD', pd.Series(index=df.index, dtype=float))
                    df['macd_signal'] = indicators_dict.get('MACD_Signal', pd.Series(index=df.index, dtype=float))
                    df['bb_upper'] = indicators_dict.get('BB_Upper', pd.Series(index=df.index, dtype=float))
                    df['bb_lower'] = indicators_dict.get('BB_Lower', pd.Series(index=df.index, dtype=float))
                    df['bb_middle'] = df['close'].rolling(window=20).mean()
                    df['sma_20'] = df['close'].rolling(window=20).mean()
                    df['sma_50'] = df['close'].rolling(window=50).mean()
                    df['ema_12'] = df['close'].ewm(span=12).mean()
                    df['ema_26'] = df['close'].ewm(span=26).mean()
                    df['volume_sma'] = df['volume'].rolling(window=20).mean()
                    df['atr'] = indicators_dict.get('ATR', pd.Series(index=df.index, dtype=float))
                    df['adx'] = pd.Series(index=df.index, dtype=float).fillna(50)
                    df['stoch_k'] = indicators_dict.get('Stoch_K', pd.Series(index=df.index, dtype=float))
                    df['stoch_d'] = indicators_dict.get('Stoch_D', pd.Series(index=df.index, dtype=float))
                    df['cci'] = indicators_dict.get('CCI', pd.Series(index=df.index, dtype=float))
                    df['mfi'] = pd.Series(index=df.index, dtype=float).fillna(50)
                    df['willr'] = indicators_dict.get('Williams_R', pd.Series(index=df.index, dtype=float))
                    df['roc'] = indicators_dict.get('ROC', pd.Series(index=df.index, dtype=float))
                    df['obv'] = (df['volume'] * (~df['close'].diff().le(0) * 2 - 1)).cumsum()
                    
                    feature_columns = [
                        'rsi', 'macd', 'macd_signal', 'bb_upper', 'bb_middle', 'bb_lower',
                        'sma_20', 'sma_50', 'ema_12', 'ema_26', 'volume_sma',
                        'atr', 'adx', 'stoch_k', 'stoch_d', 'cci', 'mfi',
                        'willr', 'roc', 'obv'
                    ]
                    
                    df_clean = df.dropna()
                    
                    if len(df_clean) >= 60:
                        X = df_clean[feature_columns].values[-60:]
                        
                        # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è
                        from sklearn.preprocessing import StandardScaler
                        scaler = StandardScaler()
                        X_scaled = scaler.fit_transform(X)
                        X_seq = X_scaled.reshape(1, 60, len(feature_columns))
                        
                        # –ü—Ä–æ–≥–Ω–æ–∑
                        predicted_scaled = model.predict(X_seq)
                        predicted_price = current_price * (1 + (predicted_scaled[0] * 0.05))
                        predicted_change = (predicted_price - current_price) / current_price
                        
                        confidence = calculate_signal_confidence(predicted_change, df_clean)
                        
                        predictions[symbol] = {
                            'current_price': current_price,
                            'predicted_price': predicted_price,
                            'predicted_change': predicted_change,
                            'change_percent': predicted_change,  # –î–æ–¥–∞—î–º–æ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è–º–∏
                            'confidence': confidence,
                            'timestamp': datetime.now()
                        }
                        
                        logger.info(f"ü§ñ {symbol}: ${current_price:.2f} ‚Üí ${predicted_price:.2f} ({predicted_change:.2%})")
                        continue
                
                # –ë–∞–∑–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑
                price_change = df['close'].pct_change().iloc[-1]
                predicted_change = price_change * 1.1
                predicted_price = current_price * (1 + predicted_change)
                confidence = calculate_signal_confidence(predicted_change, df)
                
                predictions[symbol] = {
                    'current_price': current_price,
                    'predicted_price': predicted_price,
                    'predicted_change': predicted_change,
                    'change_percent': predicted_change,  # –î–æ–¥–∞—î–º–æ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è–º–∏
                    'confidence': confidence,
                    'timestamp': datetime.now()
                }
                
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É {symbol}: {e}")
        
        return predictions
    
    async def _send_predictions_summary(self, predictions: Dict[str, Dict]):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—ñ–¥—Å—É–º–∫—É –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤ —É Telegram"""
        if not predictions:
            return
        
        msg_lines = ["üìä ML –ü–†–û–ì–ù–û–ó–ò:\n"]
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∑–º—ñ–Ω–æ—é —Ü—ñ–Ω–∏
        sorted_preds = sorted(
            predictions.items(),
            key=lambda x: abs(x[1].get('predicted_change', 0)),
            reverse=True
        )
        
        for symbol, pred in sorted_preds[:5]:  # –¢–æ–ø-5
            current = pred.get('current_price', 0)
            predicted = pred.get('predicted_price', 0)
            change_pct = pred.get('predicted_change', 0) * 100
            
            emoji = "üìà" if change_pct > 0 else "üìâ"
            msg_lines.append(
                f"{emoji} {symbol}: ${current:.2f} ‚Üí ${predicted:.2f} ({change_pct:+.2f}%)"
            )
        
        await telegram_notifier.send_message("\n".join(msg_lines))
    
    async def _execute_signals(self, signals: Dict[str, Any], market_data: Dict[str, pd.DataFrame]):
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤"""
        from strategies.base import TradeAction
        
        for symbol, signal in signals.items():
            try:
                # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
                is_valid, reason = self.strategy_integration.validate_signal(signal)
                if not is_valid:
                    logger.warning(f"‚ö†Ô∏è {symbol}: —Å–∏–≥–Ω–∞–ª –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ - {reason}")
                    continue
                
                # –†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó
                quantity = self.strategy_integration.calculate_position_size(signal)
                if quantity <= 0:
                    logger.warning(f"‚ö†Ô∏è {symbol}: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó")
                    continue
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó
                if signal.action == TradeAction.BUY and symbol in self.positions:
                    logger.info(f"‚ÑπÔ∏è {symbol}: –ø–æ–∑–∏—Ü—ñ—è –≤–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–∞")
                    continue
                if signal.action == TradeAction.SELL and symbol not in self.positions:
                    logger.info(f"‚ÑπÔ∏è {symbol}: –Ω–µ–º–∞—î –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è")
                    continue
                
                logger.info(f"üìà {symbol}: {signal.action.value} qty={quantity:.6f} price={signal.entry_price:.2f}")
                
                # Telegram
                await telegram_notifier.send_trade_signal(
                    symbol=symbol,
                    action=signal.action.value,
                    quantity=quantity,
                    price=signal.entry_price,
                    confidence=signal.confidence
                )
                
                # –í–∏–∫–æ–Ω–∞–Ω–Ω—è
                if signal.action == TradeAction.BUY:
                    await self._execute_buy(symbol, signal, quantity)
                elif signal.action == TradeAction.SELL:
                    await self._execute_sell(symbol, signal, quantity)
                    
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è {symbol}: {e}", exc_info=True)
    
    async def _execute_buy(self, symbol: str, signal: Any, quantity: float):
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è BUY –æ—Ä–¥–µ—Ä–∞"""
        try:
            # –û–∫—Ä—É–≥–ª–µ–Ω–Ω—è
            quantity = self._round_quantity(symbol, quantity)
            
            # –†–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞
            order = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: self.binance_client.futures_create_order(
                    symbol=symbol,
                    side='BUY',
                    type='MARKET',
                    quantity=quantity
                )
            )
            
            order_id = order['orderId']
            logger.info(f"ÔøΩ –û—Ä–¥–µ—Ä {symbol} —Å—Ç–≤–æ—Ä–µ–Ω–æ (ID: {order_id})")
            
            # –ß–µ–∫–∞—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞ (–¥–æ 5 —Å–µ–∫—É–Ω–¥)
            for attempt in range(10):
                await asyncio.sleep(0.5)
                order_status = await asyncio.get_event_loop().run_in_executor(
                    None,
                    lambda: self.binance_client.futures_get_order(symbol=symbol, orderId=order_id)
                )
                
                if order_status['status'] == 'FILLED':
                    executed_price = float(order_status.get('avgPrice', 0))
                    executed_qty = float(order_status.get('executedQty', 0))
                    
                    if executed_price > 0 and executed_qty > 0:
                        logger.info(f"‚úÖ BUY {symbol}: {executed_qty:.6f} @ ${executed_price:.2f}")
                        break
                    else:
                        logger.warning(f"‚ö†Ô∏è –û—Ä–¥–µ—Ä –≤–∏–∫–æ–Ω–∞–Ω–∏–π, –∞–ª–µ –¥–∞–Ω—ñ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ: price={executed_price}, qty={executed_qty}")
                        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É
                        executed_price = signal.entry_price
                        executed_qty = quantity
                        break
            else:
                # –¢–∞–π–º–∞—É—Ç - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–∞–Ω—ñ –∑ –æ—Ä–¥–µ—Ä–∞
                logger.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è {symbol}, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é origQty")
                executed_price = signal.entry_price
                executed_qty = quantity
            
            logger.info(f"‚úÖ BUY {symbol}: {executed_qty:.6f} @ ${executed_price:.2f}")
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó
            self.positions[symbol] = {
                'side': 'BUY',
                'entry_price': executed_price,
                'quantity': executed_qty,
                'entry_time': datetime.now(),
                'stop_loss': signal.stop_loss,
                'take_profit': signal.take_profit,
                'order_id': order_id
            }
            
            # Stop Loss
            if signal.stop_loss:
                try:
                    sl_price = await self._round_price(symbol, signal.stop_loss)
                    sl_order = await asyncio.get_event_loop().run_in_executor(
                        None,
                        lambda: self.binance_client.futures_create_order(
                            symbol=symbol,
                            side='SELL',
                            type='STOP_MARKET',
                            quantity=executed_qty,
                            stopPrice=str(sl_price)
                        )
                    )
                    self.positions[symbol]['sl_order_id'] = sl_order['orderId']
                    logger.info(f"üõë SL {symbol}: ${sl_price:.2f}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è SL –ø–æ–º–∏–ª–∫–∞: {e}")
            
            # Take Profit
            if signal.take_profit:
                try:
                    tp_price = await self._round_price(symbol, signal.take_profit)
                    tp_order = await asyncio.get_event_loop().run_in_executor(
                        None,
                        lambda: self.binance_client.futures_create_order(
                            symbol=symbol,
                            side='SELL',
                            type='TAKE_PROFIT_MARKET',
                            quantity=executed_qty,
                            stopPrice=str(tp_price)
                        )
                    )
                    self.positions[symbol]['tp_order_id'] = tp_order['orderId']
                    logger.info(f"üéØ TP {symbol}: ${tp_price:.2f}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è TP –ø–æ–º–∏–ª–∫–∞: {e}")
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î
            from optimized_db import db_manager, save_position
            position_data = {
                'symbol': symbol,
                'side': 'LONG',
                'entry_price': executed_price,
                'quantity': executed_qty,
                'stop_loss': signal.stop_loss,
                'take_profit': signal.take_profit,
                'strategy': signal.strategy_name or 'unknown',
                'status': 'open',
                'metadata': {
                    'order_id': order_id,
                    'confidence': signal.confidence
                }
            }
            position_id = await save_position(db_manager, position_data)
            if position_id:
                self.positions[symbol]['position_id'] = position_id
                logger.info(f"üíæ –ü–æ–∑–∏—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞ (ID: {position_id})")
            
            # Telegram
            cost = executed_price * executed_qty
            await telegram_notifier.send_trade_execution(
                symbol=symbol,
                action="BUY",
                quantity=executed_qty,
                price=executed_price,
                cost=cost,
                balance=self.portfolio_balance,
                is_paper_trading=False
            )
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
            await self._sync_balance()
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ BUY {symbol}: {e}", exc_info=True)
    
    async def _execute_sell(self, symbol: str, signal: Any, quantity: float):
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è SELL –æ—Ä–¥–µ—Ä–∞"""
        if symbol not in self.positions:
            logger.warning(f"‚ö†Ô∏è {symbol}: –Ω–µ–º–∞—î –ø–æ–∑–∏—Ü—ñ—ó")
            return
        
        try:
            position = self.positions[symbol]
            
            # –°–∫–∞—Å—É–≤–∞–Ω–Ω—è SL/TP
            for order_type in ['sl_order_id', 'tp_order_id']:
                if order_id := position.get(order_type):
                    try:
                        await asyncio.get_event_loop().run_in_executor(
                            None,
                            lambda: self.binance_client.futures_cancel_order(symbol=symbol, orderId=order_id)
                        )
                    except:
                        pass
            
            # –û–∫—Ä—É–≥–ª–µ–Ω–Ω—è
            quantity = min(quantity, position['quantity'])
            quantity = self._round_quantity(symbol, quantity)
            
            # –†–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞
            order = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: self.binance_client.futures_create_order(
                    symbol=symbol,
                    side='SELL',
                    type='MARKET',
                    quantity=quantity
                )
            )
            
            executed_price = float(order.get('avgPrice', signal.entry_price))
            executed_qty = float(order.get('executedQty', quantity))
            
            # PnL
            pnl = (executed_price - position['entry_price']) * executed_qty
            revenue = executed_price * executed_qty
            
            logger.info(f"‚úÖ SELL {symbol}: {executed_qty:.6f} @ ${executed_price:.2f} (PnL: ${pnl:.2f})")
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ë–î
            position_id = position.get('position_id')
            if position_id:
                from optimized_db import db_manager
                async with db_manager.async_session_factory() as session:
                    from sqlalchemy import text
                    await session.execute(text('''
                        UPDATE positions 
                        SET status = 'closed', 
                            exit_price = :exit_price,
                            exit_time = NOW(),
                            pnl = :pnl
                        WHERE id = :position_id
                    '''), {
                        'exit_price': executed_price,
                        'pnl': pnl,
                        'position_id': position_id
                    })
                    await session.commit()
                logger.info(f"üíæ –ü–æ–∑–∏—Ü—ñ—è –∑–∞–∫—Ä–∏—Ç–∞ –≤ –ë–î (ID: {position_id})")
            
            # –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –ø–∞–º'—è—Ç—ñ
            del self.positions[symbol]
            
            # –ó–∞–ø–∏—Å –≤ strategy integration
            if self.strategy_integration:
                self.strategy_integration.record_trade(
                    symbol=symbol,
                    pnl=pnl,
                    strategy_name=position.get('strategy_name')
                )
            
            # Telegram
            await telegram_notifier.send_trade_execution(
                symbol=symbol,
                action="SELL",
                quantity=executed_qty,
                price=executed_price,
                cost=revenue,
                balance=self.portfolio_balance,
                is_paper_trading=False
            )
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
            await self._sync_balance()
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ SELL {symbol}: {e}", exc_info=True)
    
    async def _check_positions(self, market_data: Dict[str, pd.DataFrame]):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π"""
        if not self.strategy_integration:
            return
        
        current_prices = {
            symbol: df['close'].iloc[-1]
            for symbol, df in market_data.items()
            if not df.empty
        }
        
        close_decisions = await self.strategy_integration.check_close_positions(
            current_prices=current_prices,
            market_data=market_data
        )
        
        for symbol, should_close in close_decisions.items():
            if should_close and symbol in self.positions:
                try:
                    position = self.positions[symbol]
                    current_price = current_prices.get(symbol)
                    
                    if current_price:
                        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–µ–π–∫–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è
                        from strategies.base import TradeAction, TradingSignal
                        close_signal = TradingSignal(
                            symbol=symbol,
                            action=TradeAction.SELL,
                            entry_price=current_price,
                            quantity=position['quantity'],
                            confidence=0.8,
                            strategy_name=position.get('strategy_name')
                        )
                        
                        await self._execute_sell(symbol, close_signal, position['quantity'])
                        
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è {symbol}: {e}")
    
    def _round_quantity(self, symbol: str, quantity: float) -> float:
        """–û–∫—Ä—É–≥–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–≥—ñ–¥–Ω–æ –∑ LOT_SIZE"""
        try:
            info = self.binance_client.futures_exchange_info()
            symbol_info = next((s for s in info['symbols'] if s['symbol'] == symbol), None)
            if symbol_info:
                # –®—É–∫–∞—î–º–æ LOT_SIZE filter
                lot_size_filter = next((f for f in symbol_info['filters'] if f['filterType'] == 'LOT_SIZE'), None)
                if lot_size_filter:
                    step_size = float(lot_size_filter['stepSize'])
                    precision = len(str(step_size).rstrip('0').split('.')[-1])
                    rounded = round(quantity / step_size) * step_size
                    return round(rounded, precision)
            return quantity
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è {symbol}: {e}")
            return quantity
    
    async def _round_price(self, symbol: str, price: float) -> float:
        """–û–∫—Ä—É–≥–ª–µ–Ω–Ω—è —Ü—ñ–Ω–∏ –∑–≥—ñ–¥–Ω–æ –∑ PRICE_FILTER"""
        try:
            info = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: self.binance_client.futures_exchange_info()
            )
            symbol_info = next((s for s in info['symbols'] if s['symbol'] == symbol), None)
            if symbol_info:
                # –®—É–∫–∞—î–º–æ PRICE_FILTER
                price_filter = next((f for f in symbol_info['filters'] if f['filterType'] == 'PRICE_FILTER'), None)
                if price_filter:
                    tick_size = float(price_filter['tickSize'])
                    precision = len(str(tick_size).rstrip('0').split('.')[-1])
                    rounded = round(price / tick_size) * tick_size
                    return round(rounded, precision)
            return price
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è —Ü—ñ–Ω–∏ {symbol}: {e}")
            return price
    
    def _print_trading_status(self):
        """–í–∏–≤–µ–¥–µ–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É"""
        logger.info("\n" + "=" * 60)
        logger.info("üìä TRADING STATUS")
        logger.info("=" * 60)
        logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å: ${self.portfolio_balance:.2f}")
        logger.info(f"üìà –ü–æ–∑–∏—Ü—ñ—ó: {len(self.positions)}")
        
        if self.positions:
            for symbol, pos in self.positions.items():
                logger.info(f"  ‚Ä¢ {symbol}: {pos['quantity']:.6f} @ ${pos['entry_price']:.2f}")
        
        if self.strategy_integration:
            perf = self.strategy_integration.get_performance_summary()
            logger.info(f"üìä –£–≥–æ–¥: {perf.get('total_trades', 0)}")
            logger.info(f"‚úÖ Win rate: {perf.get('win_rate', 0):.1%}")
            logger.info(f"üíµ PnL: ${perf.get('total_pnl', 0):.2f}")
        
        logger.info("=" * 60 + "\n")
    
    async def shutdown(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏"""
        if self.shutdown_requested:
            return
        self.shutdown_requested = True
        
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...")
        
        self.running = False
        
        # –ó–∞–∫—Ä–∏—Ç—Ç—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        if self.data_loader:
            try:
                await self.data_loader.close()
            except:
                pass
        
        if self.strategy_integration:
            try:
                self.strategy_integration.shutdown()
            except:
                pass
        
        try:
            await shutdown_async_system()
        except:
            pass
        
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def setup_signal_handlers(system: SimpleTradingSystem, loop):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ —Å–∏–≥–Ω–∞–ª—ñ–≤"""
    def handle_shutdown(signum, frame):
        logger.info(f"üì° –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª {signal.Signals(signum).name}")
        loop.call_soon_threadsafe(
            lambda: asyncio.create_task(system.shutdown())
        )
    
    signal.signal(signal.SIGINT, handle_shutdown)
    signal.signal(signal.SIGTERM, handle_shutdown)


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    parser = argparse.ArgumentParser(description="–¢–æ—Ä–≥–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ (Binance only)")
    parser.add_argument('--symbols', nargs='+',
                       default=['BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'SOLUSDT',
                               'AVAXUSDT', 'DOTUSDT', 'LINKUSDT'],
                       help='–°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤')
    parser.add_argument('--interval', type=int, default=300, help='–Ü–Ω—Ç–µ—Ä–≤–∞–ª —Ç–æ—Ä–≥—ñ–≤–ª—ñ (—Å–µ–∫)')
    parser.add_argument('--once', action='store_true', help='–û–¥–Ω–∞ —ñ—Ç–µ—Ä–∞—Ü—ñ—è')
    parser.add_argument('--skip-data-sync', action='store_true', help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –¥–∞–Ω–∏—Ö')
    parser.add_argument('--enable-strategies', action='store_true', default=True, help='–£–≤—ñ–º–∫–Ω—É—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó')
    parser.add_argument('--enable-scalping', action='store_true', help='–°–∫–∞–ª—å–ø—ñ–Ω–≥')
    parser.add_argument('--enable-day-trading', action='store_true', default=True, help='–î–µ–Ω–Ω–∞ —Ç–æ—Ä–≥—ñ–≤–ª—è')
    parser.add_argument('--enable-swing-trading', action='store_true', default=True, help='–°–≤—ñ–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥')
    
    args = parser.parse_args()
    
    config = {
        'symbols': args.symbols,
        'trading_interval': args.interval,
        'run_once': args.once,
        'skip_data_sync': args.skip_data_sync,
        'enable_strategies': args.enable_strategies,
        'enable_scalping': args.enable_scalping,
        'enable_day_trading': args.enable_day_trading,
        'enable_swing_trading': args.enable_swing_trading
    }
    
    system = SimpleTradingSystem(config)
    loop = asyncio.get_running_loop()
    setup_signal_handlers(system, loop)
    
    try:
        if not await system.initialize():
            logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó")
            return 1
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–∏...")
        await system.run()
        
    except KeyboardInterrupt:
        logger.info("üõë Ctrl+C")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}", exc_info=True)
        return 1
    finally:
        await system.shutdown()
    
    return 0


if __name__ == "__main__":
    try:
        import uvloop
        uvloop.install()
        logger.info("‚úÖ uvloop")
    except ImportError:
        pass
    
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
