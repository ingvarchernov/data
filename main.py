#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ TRADING BOT - –ì–æ–ª–æ–≤–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥—É
–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Ç–æ—Ä–≥—ñ–≤–ª—è –∑ ML –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–æ—é
"""
import asyncio
import sys
from datetime import datetime
from pathlib import Path
import logging

from core import TradingBot, get_analytics, TradingSession
from config import TRADING_CONFIG, MTF_CONFIG, WEBSOCKET_CONFIG
from telegram_bot import telegram_notifier

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
log_dir = Path('logs')
log_dir.mkdir(exist_ok=True)
log_file = log_dir / f'trading_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    
    # üîç PREFLIGHT CHECK
    logger.info("\n" + "="*80)
    logger.info("üîç –ó–ê–ü–£–°–ö PREFLIGHT CHECK")
    logger.info("="*80 + "\n")
    
    try:
        from preflight_check import preflight_check
        
        success = await preflight_check()
        
        if not success:
            logger.error("üö´ Preflight check –ø—Ä–æ–≤–∞–ª–µ–Ω–∏–π - –∑–∞–ø—É—Å–∫ —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
            logger.info("\nüí° –í–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ —ñ –∑–∞–ø—É—Å—Ç—ñ—Ç—å –∑–Ω–æ–≤—É")
            await telegram_notifier.send_message(
                "üö´ Bot startup cancelled\n‚ùå Preflight check failed"
            )
            return
        
        logger.info("\n‚úÖ Preflight check –ø—Ä–æ–π–¥–µ–Ω–æ - –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑–∞–ø—É—Å–∫\n")
        await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ preflight check: {e}")
        logger.warning("‚ö†Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω—ñ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
    current_hour = datetime.now().hour
    night_config = TRADING_CONFIG.get('night_mode', {})
    is_night = (
        night_config.get('enabled', False) and 
        night_config['start_hour'] <= current_hour < night_config['end_hour']
    )
    
    if is_night:
        logger.info("üåô –ù–Ü–ß–ù–ò–ô –†–ï–ñ–ò–ú - –∑–º–µ–Ω—à–µ–Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å")
        interval = int(TRADING_CONFIG['check_interval'] * night_config['interval_multiplier'])
        min_conf = TRADING_CONFIG['min_confidence'] + night_config['min_confidence_boost']
    else:
        logger.info("‚òÄÔ∏è –î–ï–ù–ù–ò–ô –†–ï–ñ–ò–ú - –Ω–æ—Ä–º–∞–ª—å–Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å")
        interval = TRADING_CONFIG['check_interval']
        min_conf = TRADING_CONFIG['min_confidence']
    
    logger.info("="*80)
    logger.info("ü§ñ –ó–ê–ü–£–°–ö –¢–û–†–ì–û–í–û–á –°–ò–°–¢–ï–ú–ò")
    logger.info("="*80)
    logger.info(f"üìÖ –°—Ç–∞—Ä—Ç: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info(f"üìù –õ–æ–≥ —Ñ–∞–π–ª: {log_file}")
    logger.info(f"üìä –°–∏–º–≤–æ–ª–∏: {', '.join(TRADING_CONFIG['symbols'])}")
    logger.info(f"üéØ Min confidence: {min_conf:.0%}")
    logger.info(f"üí∞ Position size: ${TRADING_CONFIG['position_size_usd']}")
    logger.info(f"‚ö° Leverage: {TRADING_CONFIG['leverage']}x")
    logger.info(f"‚è±Ô∏è  Check interval: {interval}s ({interval/60:.0f} —Ö–≤)")
    logger.info(f"üîÑ MTF: {', '.join(MTF_CONFIG.keys())} (15m+1h)")
    logger.info(f"üîå WebSocket: {'‚úÖ' if WEBSOCKET_CONFIG.get('enabled', False) else '‚ùå'}")
    logger.info("="*80 + "\n")
    
    # Telegram —Å—Ç–∞—Ä—Ç
    await telegram_notifier.send_message(
        f"ü§ñ –¢–û–†–ì–û–í–ê –°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–©–ï–ù–ê\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"{'üåô –ù–Ü–ß–ù–ò–ô –†–ï–ñ–ò–ú' if is_night else '‚òÄÔ∏è –î–ï–ù–ù–ò–ô –†–ï–ñ–ò–ú'}\n"
        f"\nüìä –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:\n"
        f"‚Ä¢ –°–∏–º–≤–æ–ª—ñ–≤: {len(TRADING_CONFIG['symbols'])}\n"
        f"‚Ä¢ Position: ${TRADING_CONFIG['position_size_usd']} ({TRADING_CONFIG['leverage']}x)\n"
        f"‚Ä¢ Min confidence: {min_conf:.0%}\n"
        f"‚Ä¢ Interval: {interval/60:.0f} —Ö–≤\n"
        f"‚Ä¢ MTF: 15m+1h ‚úÖ\n"
        f"\nüõ°Ô∏è –ó–ê–•–ò–°–¢:\n"
        f"‚Ä¢ Cooldown SL: {TRADING_CONFIG['cooldown_after_sl']/60:.0f} —Ö–≤\n"
        f"‚Ä¢ Cooldown TP: {TRADING_CONFIG['cooldown_after_tp']/60:.0f} —Ö–≤\n"
        f"‚Ä¢ Max –≤—Ç—Ä–∞—Ç/–¥–µ–Ω—å: {TRADING_CONFIG['max_daily_losses_per_symbol']}\n"
    )
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    session = TradingSession()
    
    try:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞
        bot = TradingBot()
        bot.min_confidence = min_conf
        
        # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ Binance API –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
        logger.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ Binance API...")
        from core.trades_synchronizer import sync_trades_on_startup
        await sync_trades_on_startup(bot.client)
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π
        logger.info("üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ML –º–æ–¥–µ–ª–µ–π...")
        bot.load_models()
        
        # –ó–∞–ø—É—Å–∫ WebSocket
        if WEBSOCKET_CONFIG['enabled']:
            logger.info("üîå –ó–∞–ø—É—Å–∫ WebSocket...")
            await bot.websocket.start()
            await asyncio.sleep(2)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è SL/TP –¥–æ —ñ—Å–Ω—É—é—á–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
        logger.info("üõ°Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞—Ö–∏—Å—Ç—É —ñ—Å–Ω—É—é—á–∏—Ö –ø–æ–∑–∏—Ü—ñ–π...")
        await bot.ensure_all_positions_protected()
        
        # üîç –ó–ê–ü–£–°–ö POSITION MONITOR (–∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–æ!)
        logger.info("üîç –ó–∞–ø—É—Å–∫ Position Monitor...")
        from core.position_monitor import start_monitor
        monitor = await start_monitor(
            bot.client, 
            bot.position_manager,
            on_force_close_callback=bot.add_to_blacklist  # –î–æ–¥–∞—î–º–æ –≤ blacklist –ø—ñ—Å–ª—è force close
        )
        logger.info("‚úÖ Position Monitor –∞–∫—Ç–∏–≤–Ω–∏–π (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 45 —Å–µ–∫—É–Ω–¥)")
        
        logger.info("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π, –∑–∞–ø—É—Å–∫–∞—é –≥–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª...\n")
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ—ó –∑–∞–¥–∞—á—ñ –Ω—ñ—á–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–∞–≤—á–∞–Ω–Ω—è
        async def nightly_retraining_task():
            """–§–æ–Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è —ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –¥–æ—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π"""
            from incremental_retrain import IncrementalRetrainer
            
            retrainer = IncrementalRetrainer()
            
            while True:
                try:
                    now = datetime.now()
                    
                    # –ü–ª–∞–Ω–æ–≤–µ –¥–æ—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –æ 04:00 UTC
                    if now.hour == 4 and now.minute < 30:
                        logger.info("üåô –ü–æ—á–∞—Ç–æ–∫ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –¥–æ—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è...")
                        await telegram_notifier.send_message("üåô –ü–æ—á–∞—Ç–æ–∫ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –¥–æ—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π...")
                        
                        results = await retrainer.run_scheduled_retrain()
                        
                        if results:
                            successful = sum(1 for v in results.values() if v)
                            message = (
                                f"‚úÖ –ü–ª–∞–Ω–æ–≤–µ –¥–æ—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n"
                                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                                f"üìä –£—Å–ø—ñ—à–Ω–æ: {successful}/{len(results)}\n"
                                f"‚è∞ {datetime.now().strftime('%H:%M:%S')}"
                            )
                            
                            failed = [s for s, v in results.items() if not v]
                            if failed:
                                message += f"\n\n‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∏: {', '.join(failed)}"
                            
                            await telegram_notifier.send_message(message)
                        else:
                            await telegram_notifier.send_message("‚úÖ –î–æ—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ - –≤—Å—ñ –º–æ–¥–µ–ª—ñ OK")
                        
                        logger.info("‚úÖ –ü–ª–∞–Ω–æ–≤–µ –¥–æ—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                        
                        # –ß–µ–∫–∞—Ç–∏ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –Ω–æ—á—ñ (23 –≥–æ–¥–∏–Ω–∏)
                        await asyncio.sleep(3600 * 23)
                    else:
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –∫–æ–∂–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω
                        await asyncio.sleep(1800)
                        
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –∑–∞–¥–∞—á—ñ –¥–æ—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {e}")
                    await asyncio.sleep(3600)
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ—ó –∑–∞–¥–∞—á—ñ
        retraining_task = asyncio.create_task(nightly_retraining_task())
        
        # –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª
        iteration = 0
        while True:
            iteration += 1
            session.iterations = iteration
            
            # –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞
            await get_analytics(bot, session, iteration)
            
            # –¢–æ—Ä–≥–æ–≤–∞ —ñ—Ç–µ—Ä–∞—Ü—ñ—è
            await bot.run_iteration()
            
            # –ü–∞—É–∑–∞
            await asyncio.sleep(interval)
    
    except KeyboardInterrupt:
        logger.info("\nüõë –¢–æ—Ä–≥—ñ–≤–ª—è –∑—É–ø–∏–Ω–µ–Ω–∞ (Ctrl+C)")
        
        # –§—ñ–Ω–∞–ª—å–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞
        await get_analytics(bot, session, iteration)
        
        await telegram_notifier.send_message(
            f"üõë –¢–û–†–ì–Ü–í–õ–Ø –ó–£–ü–ò–ù–ï–ù–ê\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"‚è±Ô∏è –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {session.duration()}\n"
            f"üìä –Ü—Ç–µ—Ä–∞—Ü—ñ–π: {session.iterations}\n"
            f"üë§ –ó—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º"
        )
    
    except Exception as e:
        logger.error(f"\n‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: {e}", exc_info=True)
        await telegram_notifier.send_message(
            f"‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"üî• {str(e)[:200]}\n"
            f"‚è±Ô∏è –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {session.duration()}\n"
        )
        raise
    
    finally:
        # –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ñ–æ–Ω–æ–≤–æ—ó –∑–∞–¥–∞—á—ñ
        try:
            if 'retraining_task' in locals():
                retraining_task.cancel()
                logger.info("üõë –§–æ–Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞ –ø–µ—Ä–µ–Ω–∞–≤—á–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –∑–∞–¥–∞—á—ñ: {e}")
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –Ω–∞–≤—á–∞–Ω–Ω—è
        try:
            # –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –±—ñ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ
            pass
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è: {e}")
        
        # –ó—É–ø–∏–Ω–∫–∞ WebSocket
        if WEBSOCKET_CONFIG['enabled'] and bot.websocket.is_running:
            logger.info("üîå –ó—É–ø–∏–Ω–∫–∞ WebSocket...")
            await bot.websocket.stop()
        
        logger.info(f"\n{'='*80}")
        logger.info(f"üìÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info(f"‚è±Ô∏è –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {session.duration()}")
        logger.info(f"üìä –Ü—Ç–µ—Ä–∞—Ü—ñ–π: {session.iterations}")
        logger.info(f"üìù –õ–æ–≥: {log_file}")
        logger.info(f"{'='*80}\n")


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ë–ë!")
    except Exception as e:
        import traceback
        print(f"\n‚ùå –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        traceback.print_exc()
        sys.exit(1)
