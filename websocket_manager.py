#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
WebSocket Manager –¥–ª—è Binance Futures
–†–µ–∞–ª—ñ–∑—É—î user data stream –¥–ª—è –º–∏—Ç—Ç—î–≤–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å –æ—Ä–¥–µ—Ä—ñ–≤ —Ç–∞ –ø–æ–∑–∏—Ü—ñ–π
"""
import asyncio
import json
import logging
from typing import Callable, Dict, Optional
import websockets
from binance.client import Client

logger = logging.getLogger(__name__)


class BinanceFuturesWebSocket:
    """WebSocket –∫–ª—ñ—î–Ω—Ç –¥–ª—è Binance Futures User Data Stream"""
    
    def __init__(self, client: Client, testnet: bool = True):
        self.client = client
        self.testnet = testnet
        self.listen_key = None
        self.ws = None
        self.is_running = False
        
        # –ö–æ–ª–±–µ–∫–∏ –¥–ª—è –ø–æ–¥—ñ–π
        self.on_order_update: Optional[Callable] = None
        self.on_account_update: Optional[Callable] = None
        self.on_position_update: Optional[Callable] = None
        
        # WebSocket URL
        if testnet:
            self.ws_base = "wss://stream.binancefuture.com/ws"
        else:
            self.ws_base = "wss://fstream.binance.com/ws"
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ WebSocket –∑'—î–¥–Ω–∞–Ω–Ω—è"""
        if self.is_running:
            logger.warning("WebSocket –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return
        
        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è listen key
            await self._create_listen_key()
            
            # –ó–∞–ø—É—Å–∫ WebSocket
            self.is_running = True
            asyncio.create_task(self._ws_loop())
            asyncio.create_task(self._keepalive_loop())
            
            logger.info("‚úÖ WebSocket user data stream –∑–∞–ø—É—â–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É WebSocket: {e}")
            self.is_running = False
    
    async def stop(self):
        """–ó—É–ø–∏–Ω–∫–∞ WebSocket"""
        self.is_running = False
        
        if self.ws:
            await self.ws.close()
        
        if self.listen_key:
            try:
                await asyncio.get_event_loop().run_in_executor(
                    None,
                    lambda: self.client.futures_close_listen_key(listenKey=self.listen_key)
                )
            except:
                pass
        
        logger.info("üëã WebSocket –∑—É–ø–∏–Ω–µ–Ω–æ")
    
    async def _create_listen_key(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è listen key –¥–ª—è user data stream"""
        try:
            response = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: self.client.futures_stream_get_listen_key()
            )
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            if isinstance(response, dict) and 'listenKey' in response:
                self.listen_key = response['listenKey']
            elif isinstance(response, str):
                # –Ü–Ω–æ–¥—ñ API –ø–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫—É
                self.listen_key = response
            else:
                raise ValueError(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç listen key: {type(response)}")
            
            logger.info(f"üîë Listen key –æ—Ç—Ä–∏–º–∞–Ω–æ: {self.listen_key[:10]}...")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è listen key: {e}", exc_info=True)
            raise
    
    async def _keepalive_loop(self):
        """–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ listen key –∞–∫—Ç–∏–≤–Ω–∏–º (–∫–æ–∂–Ω—ñ 30 —Ö–≤)"""
        while self.is_running:
            await asyncio.sleep(30 * 60)  # 30 —Ö–≤–∏–ª–∏–Ω
            
            if not self.listen_key:
                continue
            
            try:
                await asyncio.get_event_loop().run_in_executor(
                    None,
                    lambda: self.client.futures_stream_keepalive(listenKey=self.listen_key)
                )
                logger.debug("‚úÖ Listen key keepalive")
                
            except Exception as e:
                logger.error(f"‚ùå Keepalive –ø–æ–º–∏–ª–∫–∞: {e}")
                # –°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç–∏ listen key
                await self._create_listen_key()
    
    async def _ws_loop(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª WebSocket"""
        while self.is_running:
            try:
                url = f"{self.ws_base}/{self.listen_key}"
                
                async with websockets.connect(url) as ws:
                    self.ws = ws
                    logger.info("üîó WebSocket –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
                    
                    async for message in ws:
                        if not self.is_running:
                            break
                        
                        await self._handle_message(message)
                        
            except websockets.exceptions.ConnectionClosed:
                logger.warning("‚ö†Ô∏è WebSocket –∑'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—è...")
                await asyncio.sleep(5)
                
            except Exception as e:
                logger.error(f"‚ùå WebSocket –ø–æ–º–∏–ª–∫–∞: {e}")
                await asyncio.sleep(5)
    
    async def _handle_message(self, message: str):
        """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ WebSocket"""
        try:
            data = json.loads(message)
            event_type = data.get('e')
            
            if event_type == 'ORDER_TRADE_UPDATE':
                await self._handle_order_update(data)
                
            elif event_type == 'ACCOUNT_UPDATE':
                await self._handle_account_update(data)
                
            else:
                logger.debug(f"–ù–µ–≤—ñ–¥–æ–º–∏–π event: {event_type}")
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
    
    async def _handle_order_update(self, data: Dict):
        """
        –û–±—Ä–æ–±–∫–∞ ORDER_TRADE_UPDATE –ø–æ–¥—ñ—ó
        
        –ü—Ä–∏–∫–ª–∞–¥ –¥–∞–Ω–∏—Ö:
        {
            "e": "ORDER_TRADE_UPDATE",
            "o": {
                "s": "BTCUSDT",           # Symbol
                "c": "client_order_id",   # Client order ID
                "S": "BUY",               # Side
                "o": "MARKET",            # Order type
                "f": "GTC",               # Time in force
                "q": "0.001",             # Original quantity
                "p": "0",                 # Price
                "ap": "50000",            # Average price
                "sp": "0",                # Stop price
                "x": "TRADE",             # Execution type
                "X": "FILLED",            # Order status
                "i": 12345678,            # Order ID
                "l": "0.001",             # Last filled quantity
                "z": "0.001",             # Cumulative filled quantity
                "L": "50000",             # Last filled price
                "n": "0",                 # Commission
                "N": "USDT",              # Commission asset
                "T": 1234567890123,       # Transaction time
                "wt": "CONTRACT_PRICE"    # Working type
            }
        }
        """
        try:
            order = data['o']
            
            event_info = {
                'symbol': order['s'],
                'order_id': order['i'],
                'client_order_id': order.get('c'),
                'side': order['S'],
                'order_type': order['o'],
                'status': order['X'],
                'execution_type': order['x'],
                'quantity': float(order['q']),
                'filled_quantity': float(order['z']),
                'price': float(order['p']) if order['p'] != '0' else None,
                'avg_price': float(order['ap']) if order.get('ap') and order['ap'] != '0' else None,
                'last_filled_price': float(order['L']) if order.get('L') and order['L'] != '0' else None,
                'stop_price': float(order['sp']) if order.get('sp') and order['sp'] != '0' else None,
                'time': order['T']
            }
            
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤–∞–∂–ª–∏–≤–∏—Ö –ø–æ–¥—ñ–π
            if event_info['execution_type'] == 'TRADE':
                logger.info(
                    f"üîî ORDER FILLED: {event_info['symbol']} "
                    f"{event_info['side']} {event_info['filled_quantity']} @ "
                    f"${event_info['avg_price']:.2f}"
                )
            elif event_info['status'] in ['CANCELED', 'EXPIRED', 'REJECTED']:
                logger.warning(
                    f"‚ö†Ô∏è ORDER {event_info['status']}: {event_info['symbol']} "
                    f"{event_info['side']} {event_info['order_id']}"
                )
            
            # –í–∏–∫–ª–∏–∫ –∫–æ–ª–±–µ–∫–∞ —è–∫—â–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            if self.on_order_update:
                await self.on_order_update(event_info)
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ order update: {e}")
    
    async def _handle_account_update(self, data: Dict):
        """
        –û–±—Ä–æ–±–∫–∞ ACCOUNT_UPDATE –ø–æ–¥—ñ—ó
        
        –í–∫–ª—é—á–∞—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É —Ç–∞ –ø–æ–∑–∏—Ü—ñ–π
        """
        try:
            update_data = data.get('a', {})
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—ñ–≤
            balances = update_data.get('B', [])
            for balance in balances:
                asset = balance['a']
                free = float(balance['wb'])  # Wallet balance
                if asset == 'USDT':
                    logger.info(f"üí∞ Balance update: ${free:.2f} USDT")
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π
            positions = update_data.get('P', [])
            for pos in positions:
                symbol = pos['s']
                amount = float(pos['pa'])  # Position amount
                entry_price = float(pos['ep'])
                unrealized_pnl = float(pos['up'])
                
                if amount != 0:
                    side = 'LONG' if amount > 0 else 'SHORT'
                    logger.info(
                        f"üìä Position update: {symbol} {side} "
                        f"{abs(amount)} @ ${entry_price:.2f} "
                        f"(PnL: ${unrealized_pnl:.2f})"
                    )
            
            # –í–∏–∫–ª–∏–∫ –∫–æ–ª–±–µ–∫–∞
            if self.on_account_update:
                await self.on_account_update(update_data)
            
            if self.on_position_update and positions:
                await self.on_position_update(positions)
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ account update: {e}")


# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
async def example_usage():
    """–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è WebSocket manager"""
    from binance.client import Client
    import os
    from dotenv import load_dotenv
    
    load_dotenv()
    
    client = Client(
        os.getenv('FUTURES_API_KEY'),
        os.getenv('FUTURES_API_SECRET'),
        testnet=True
    )
    
    ws = BinanceFuturesWebSocket(client, testnet=True)
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–ª–±–µ–∫—ñ–≤
    async def on_order(order_info):
        print(f"Order callback: {order_info}")
    
    async def on_account(account_data):
        print(f"Account callback: {account_data}")
    
    ws.on_order_update = on_order
    ws.on_account_update = on_account
    
    # –ó–∞–ø—É—Å–∫
    await ws.start()
    
    # –ß–µ–∫–∞—Ç–∏ 60 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(60)
    
    # –ó—É–ø–∏–Ω–∫–∞
    await ws.stop()


if __name__ == '__main__':
    asyncio.run(example_usage())
