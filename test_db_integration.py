#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –ë–î
"""
import asyncio
import sys
import os
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from optimized.database.connection import DatabaseConnection, save_position, save_trade
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def test_db_integration():
    """–¢–µ—Å—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ —á–∏—Ç–∞–Ω–Ω—è –∑ –ë–î"""
    
    logger.info("üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ –ë–î...")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è DB
    db = DatabaseConnection()
    
    # –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    if not await db.test_connection():
        logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—å –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—å –¥–æ –ë–î")
        return False
    
    logger.info("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î —É—Å–ø—ñ—à–Ω–µ")
    
    # ========================================================
    # –¢–ï–°–¢ 1: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó
    # ========================================================
    logger.info("\nüìù –¢–ï–°–¢ 1: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó...")
    
    test_position = {
        'symbol': 'TESTUSDT',
        'side': 'LONG',
        'entry_price': 50000.0,
        'quantity': 0.001,
        'stop_loss': 49500.0,
        'take_profit': 50500.0,
        'status': 'open',
        'strategy': 'ML_4h_TEST',
        'entry_time': datetime.now(),
        'signal_id': None,
        'metadata': {
            'confidence': 0.85,
            'leverage': 25,
            'test': True
        }
    }
    
    position_id = await save_position(db, test_position)
    
    if position_id:
        logger.info(f"‚úÖ –ü–æ–∑–∏—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –∑ ID: {position_id}")
    else:
        logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—å –∑–±–µ—Ä–µ–≥—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é")
        return False
    
    # ========================================================
    # –¢–ï–°–¢ 2: –ß–∏—Ç–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó
    # ========================================================
    logger.info("\nüìñ –¢–ï–°–¢ 2: –ß–∏—Ç–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó...")
    
    from sqlalchemy import text
    
    async with db.async_session_factory() as session:
        result = await session.execute(
            text("SELECT * FROM positions WHERE id = :id"),
            {'id': position_id}
        )
        row = result.fetchone()
        
        if row:
            logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü—ñ—é:")
            logger.info(f"   Symbol: {row.symbol}")
            logger.info(f"   Side: {row.side}")
            logger.info(f"   Entry: ${row.entry_price}")
            logger.info(f"   Quantity: {row.quantity}")
            logger.info(f"   Status: {row.status}")
            logger.info(f"   Created: {row.created_at}")
        else:
            logger.error("‚ùå –ü–æ–∑–∏—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False
    
    # ========================================================
    # –¢–ï–°–¢ 3: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó
    # ========================================================
    logger.info("\nüîÑ –¢–ï–°–¢ 3: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó...")
    
    async with db.async_session_factory() as session:
        await session.execute(
            text("UPDATE positions SET status = :status WHERE id = :id"),
            {'status': 'closed', 'id': position_id}
        )
        await session.commit()
        logger.info("‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 'closed'")
    
    # ========================================================
    # –¢–ï–°–¢ 4: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è trade
    # ========================================================
    logger.info("\nüí∞ –¢–ï–°–¢ 4: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è trade...")
    
    test_trade = {
        'symbol': 'TESTUSDT',
        'side': 'LONG',
        'entry_price': 50000.0,
        'exit_price': 50500.0,
        'quantity': 0.001,
        'entry_time': datetime.now(),
        'exit_time': datetime.now(),
        'pnl': 0.50,
        'pnl_percentage': 1.0,
        'strategy': 'ML_4h_TEST',
        'exit_reason': 'take_profit',
        'position_id': position_id,
        'signal_id': None,
        'fees': 0.01,
        'metadata': {
            'test': True
        }
    }
    
    trade_id = await save_trade(db, test_trade)
    
    if trade_id:
        logger.info(f"‚úÖ Trade –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑ ID: {trade_id}")
    else:
        logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—å –∑–±–µ—Ä–µ–≥—Ç–∏ trade")
        return False
    
    # ========================================================
    # –¢–ï–°–¢ 5: –û—á–∏—â–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
    # ========================================================
    logger.info("\nüóëÔ∏è  –¢–ï–°–¢ 5: –û—á–∏—â–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...")
    
    async with db.async_session_factory() as session:
        # –í–∏–¥–∞–ª—è—î–º–æ trade
        result = await session.execute(
            text("DELETE FROM trades WHERE id = :id"),
            {'id': trade_id}
        )
        
        # –í–∏–¥–∞–ª—è—î–º–æ position
        result = await session.execute(
            text("DELETE FROM positions WHERE id = :id"),
            {'id': position_id}
        )
        
        await session.commit()
        logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω–æ")
    
    # –ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è
    await db.close()
    
    logger.info("\n‚úÖ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–î–ï–ù–û –£–°–ü–Ü–®–ù–û!")
    return True


if __name__ == '__main__':
    success = asyncio.run(test_db_integration())
    
    if success:
        print("\n" + "="*50)
        print("‚úÖ –ë–î —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ!")
        print("="*50)
    else:
        print("\n" + "="*50)
        print("‚ùå –í–∏—è–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ë–î —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é")
        print("="*50)
        sys.exit(1)
