"""
–°–∫–∞–ª—å–ø—ñ–Ω–≥–æ–≤–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è - –∫–æ—Ä–æ—Ç–∫–æ—Å—Ç—Ä–æ–∫–æ–≤—ñ —É–≥–æ–¥–∏ –Ω–∞ –º–∞–ª–∏—Ö —Ä—É—Ö–∞—Ö —Ü—ñ–Ω–∏
"""
import numpy as np
import pandas as pd
from typing import Dict, List, Optional
from datetime import datetime, timedelta

from strategies.base import TradingStrategy, TradeSignal, TradeAction, Position


class ScalpingStrategy(TradingStrategy):
    """
    –°–∫–∞–ª—å–ø—ñ–Ω–≥–æ–≤–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ—Å—Ç—Ä–æ–∫–æ–≤–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ

    –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:
    - –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ–π: 5-60 —Ö–≤–∏–ª–∏–Ω
    - –¶—ñ–ª—ñ: 0.5-2% –ø—Ä–∏–±—É—Ç–æ–∫ –Ω–∞ —É–≥–æ–¥—É
    - Stop-loss: 0.3-1%
    - –í–∏—Å–æ–∫–∞ —á–∞—Å—Ç–æ—Ç–∞ —É–≥–æ–¥
    """

    def __init__(self, symbols: List[str], config: Optional[Dict] = None):
        super().__init__("scalping", symbols, config)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–∫–∞–ª—å–ø—ñ–Ω–≥—É
        self.min_confidence = 0.08  # –ü—ñ–¥–≤–∏—â–µ–Ω–æ –¥–ª—è –º–µ–¥–≤–µ–∂–æ–≥–æ —Ä–∏–Ω–∫—É –∑ –≤–∏—Å–æ–∫–æ—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—é
        self.target_profit_pct = 0.03
        self.stop_loss_pct = 0.015
        self.max_hold_time = self.config.get('max_hold_time', 45)  # 45 —Ö–≤–∏–ª–∏–Ω
        self.min_volume_threshold = self.config.get('min_volume_threshold', 100000)  # –ó–º–µ–Ω—à–µ–Ω–æ –¥–æ $100K

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_trades = 0
        self.winning_trades = 0
        self.total_pnl = 0.0

    def analyze_market(self, market_data: Dict[str, pd.DataFrame],
                      predictions: Dict[str, Dict]) -> Dict[str, TradeSignal]:
        """
        –ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É –¥–ª—è —Å–∫–∞–ª—å–ø—ñ–Ω–≥—É
        """
        signals = {}

        # –ê–Ω–∞–ª—ñ–∑ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Ä–∏–Ω–∫–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–¥—É (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ BTC —è–∫ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä)
        market_trend = self._analyze_market_trend(market_data)
        print(f"üåç Scalp Market Trend: {market_trend}")

        for symbol in self.symbols:
            if symbol not in market_data or symbol not in predictions:
                continue

            df = market_data[symbol]
            pred = predictions[symbol]

            signal = self._analyze_symbol(symbol, df, pred, market_trend)
            if signal:
                signals[symbol] = signal

        return signals

    def _analyze_symbol(self, symbol: str, df: pd.DataFrame,
                       prediction: Dict, market_trend: str) -> Optional[TradeSignal]:
        """
        –ê–Ω–∞–ª—ñ–∑ –æ–∫—Ä–µ–º–æ–≥–æ —Å–∏–º–≤–æ–ª—É
        """
        if len(df) < 10:  # –ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 10 —Å–≤—ñ—á–æ–∫
            return None

        current_price = df['close'].iloc[-1]
        predicted_change = prediction.get('change_percent', 0)
        confidence = prediction.get('confidence', 0)

        # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
        print(f"üîç Scalp {symbol}: price={current_price:.4f}, pred_change={predicted_change:.6f}, conf={confidence:.3f}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ
        if confidence < self.min_confidence:
            print(f"‚ùå Scalp {symbol}: conf {confidence:.3f} < min_conf {self.min_confidence}")
            return None

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –æ–±—Å—è–≥—É
        avg_volume = df['volume'].tail(5).mean() * current_price
        print(f"üí∞ Scalp {symbol}: avg_volume={avg_volume:.0f}, min_threshold={self.min_volume_threshold}")
        if avg_volume < self.min_volume_threshold:
            print(f"‚ùå Scalp {symbol}: volume too low")
            return None

        # –ê–Ω–∞–ª—ñ–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ (–Ω–µ –Ω–∞–¥—Ç–æ –≤–∏—Å–æ–∫–∞ –¥–ª—è —Å–∫–∞–ª—å–ø—ñ–Ω–≥—É)
        volatility = df['close'].pct_change().std() * 100
        print(f"üìä Scalp {symbol}: volatility={volatility:.2f}%")
        if volatility > 5:  # –ó–∞–Ω–∞–¥—Ç–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ –¥–ª—è —Å–∫–∞–ª—å–ø—ñ–Ω–≥—É
            print(f"‚ùå Scalp {symbol}: volatility too high")
            return None

        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–ø—Ä—è–º—É –∑ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–º —Å—Ç–æ–ø-–ª–æ—Å–æ–º –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
        if predicted_change > 0.001:  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∏–π —Ä—É—Ö 0.1%
            action = TradeAction.BUY
            # –î–∏–Ω–∞–º—ñ—á–Ω–∏–π —Å—Ç–æ–ø-–ª–æ—Å: 1.5x –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å, –∞–ª–µ –Ω–µ –º–µ–Ω—à–µ 0.5% —ñ –Ω–µ –±—ñ–ª—å—à–µ 2%
            dynamic_sl_pct = min(max(volatility * 1.5 / 100, 0.005), 0.02)
            stop_loss = current_price * (1 - dynamic_sl_pct)
            take_profit = current_price * (1 + self.target_profit_pct)
        elif predicted_change < -0.001:  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∏–π —Ä—É—Ö -0.1%
            action = TradeAction.SELL
            # –î–∏–Ω–∞–º—ñ—á–Ω–∏–π —Å—Ç–æ–ø-–ª–æ—Å: 1.5x –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å, –∞–ª–µ –Ω–µ –º–µ–Ω—à–µ 0.5% —ñ –Ω–µ –±—ñ–ª—å—à–µ 2%
            dynamic_sl_pct = min(max(volatility * 1.5 / 100, 0.005), 0.02)
            stop_loss = current_price * (1 + dynamic_sl_pct)
            take_profit = current_price * (1 - self.target_profit_pct)
        else:
            print(f"‚ùå Scalp {symbol}: pred_change {predicted_change:.6f} not > 0.001 or < -0.001")
            return None

        print(f"‚úÖ Scalp {symbol}: –ì–µ–Ω–µ—Ä—É—î–º–æ —Å–∏–≥–Ω–∞–ª!")

        # –§—ñ–ª—å—Ç—Ä –º–µ–¥–≤–µ–∂–æ–≥–æ —Ä–∏–Ω–∫—É - –Ω–µ –≥–µ–Ω–µ—Ä—É—î–º–æ BUY —Å–∏–≥–Ω–∞–ª–∏ –≤ —Å–∏–ª—å–Ω–æ–º—É —Å–ø–∞–¥—ñ
        if market_trend == 'BEARISH' and action == TradeAction.BUY:
            print(f"üö´ Scalp {symbol}: BUY —Å–∏–≥–Ω–∞–ª –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –º–µ–¥–≤–µ–∂–∏–π —Ä–∏–Ω–æ–∫")
            return None

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó - —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —Å—É–º–∞ $1000
        invest_amount = 1000.0  # –§—ñ–∫—Å–æ–≤–∞–Ω–∞ —Å—É–º–∞ –¥–ª—è –∫–æ–∂–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ
        quantity = invest_amount / current_price

        return TradeSignal(
            action=action,
            symbol=symbol,
            confidence=confidence,
            entry_price=current_price,
            stop_loss=stop_loss,
            take_profit=take_profit,
            quantity=quantity,
            metadata={
                'strategy_type': 'scalping',
                'predicted_change': predicted_change,
                'volatility': volatility,
                'avg_volume': avg_volume
            }
        )

    def should_enter_position(self, symbol: str, signal: TradeSignal,
                            current_positions: Dict[str, Position]) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–º–æ–≤ –≤—Ö–æ–¥—É –¥–ª—è —Å–∫–∞–ª—å–ø—ñ–Ω–≥—É
        """
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–∑–∏—Ü—ñ–π
        if len(current_positions) >= self.max_positions:
            return False

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –Ω–µ–º–∞—î –≤–∂–µ –ø–æ–∑–∏—Ü—ñ—ó –≤ —Ü—å–æ–º—É —Å–∏–º–≤–æ–ª—ñ
        if symbol in current_positions:
            return False

        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–ª—è —Å–∫–∞–ª—å–ø—ñ–Ω–≥—É
        if signal.confidence < self.min_confidence:
            return False

        return True

    def should_exit_position(self, symbol: str, position: Position,
                           current_price: float, market_data: pd.DataFrame) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–º–æ–≤ –≤–∏—Ö–æ–¥—É –¥–ª—è —Å–∫–∞–ª—å–ø—ñ–Ω–≥—É
        """
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É —É—Ç—Ä–∏–º–∞–Ω–Ω—è
        hold_time = (datetime.now() - position.entry_time).total_seconds() / 60  # –≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö
        if hold_time > self.max_hold_time:
            self.logger.info(f"‚è∞ –í–∏—Ö—ñ–¥ —á–µ—Ä–µ–∑ —á–∞—Å —É—Ç—Ä–∏–º–∞–Ω–Ω—è: {hold_time:.1f} —Ö–≤")
            return True

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ stop-loss
        if position.stop_loss:
            if position.side == 'LONG' and current_price <= position.stop_loss:
                self.logger.info(f"üõë Stop-loss –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ: {current_price} <= {position.stop_loss}")
                return True
            elif position.side == 'SHORT' and current_price >= position.stop_loss:
                self.logger.info(f"üõë Stop-loss –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ: {current_price} >= {position.stop_loss}")
                return True

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ take-profit
        if position.take_profit:
            if position.side == 'LONG' and current_price >= position.take_profit:
                self.logger.info(f"üéØ Take-profit –¥–æ—Å—è–≥–Ω—É—Ç–æ: {current_price} >= {position.take_profit}")
                return True
            elif position.side == 'SHORT' and current_price <= position.take_profit:
                self.logger.info(f"üéØ Take-profit –¥–æ—Å—è–≥–Ω—É—Ç–æ: {current_price} <= {position.take_profit}")
                return True

        # –î–∏–Ω–∞–º—ñ—á–Ω–∏–π –≤–∏—Ö—ñ–¥ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ç—Ä–µ–Ω–¥—É (—è–∫—â–æ —î –Ω–æ–≤—ñ –¥–∞–Ω—ñ)
        if market_data is not None and len(market_data) > 5:
            recent_trend = market_data['close'].tail(3).pct_change().mean()
            if position.side == 'LONG' and recent_trend < -0.002:  # –¢—Ä–µ–Ω–¥ –∑–º—ñ–Ω–∏–≤—Å—è –≤–Ω–∏–∑
                self.logger.info(f"üìâ –í–∏—Ö—ñ–¥ —á–µ—Ä–µ–∑ –∑–º—ñ–Ω—É —Ç—Ä–µ–Ω–¥—É: {recent_trend:.4f}")
                return True
            elif position.side == 'SHORT' and recent_trend > 0.002:  # –¢—Ä–µ–Ω–¥ –∑–º—ñ–Ω–∏–≤—Å—è –≤–≥–æ—Ä—É
                self.logger.info(f"üìà –í–∏—Ö—ñ–¥ —á–µ—Ä–µ–∑ –∑–º—ñ–Ω—É —Ç—Ä–µ–Ω–¥—É: {recent_trend:.4f}")
                return True

        return False

    def update_trade_stats(self, pnl: float):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≥–æ–¥"""
        self.total_trades += 1
        self.total_pnl += pnl

        if pnl > 0:
            self.winning_trades += 1

    def get_strategy_stats(self) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞–ª—å–ø—ñ–Ω–≥–æ–≤–æ—ó —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó"""
        stats = super().get_strategy_stats()
        stats.update({
            'total_trades': self.total_trades,
            'winning_trades': self.winning_trades,
            'win_rate': self.winning_trades / max(self.total_trades, 1),
            'total_pnl': self.total_pnl,
            'avg_trade_pnl': self.total_pnl / max(self.total_trades, 1),
            'target_profit_pct': self.target_profit_pct,
            'stop_loss_pct': self.stop_loss_pct,
            'max_hold_time': self.max_hold_time
        })
        return stats

    def _analyze_market_trend(self, market_data: Dict[str, pd.DataFrame]) -> str:
        """
        –ê–Ω–∞–ª—ñ–∑ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥—É —Ä–∏–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ BTC
        """
        if 'BTCUSDT' not in market_data:
            return 'NEUTRAL'

        btc_df = market_data['BTCUSDT']
        if len(btc_df) < 20:
            return 'NEUTRAL'

        # –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—É –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 20 –ø–µ—Ä—ñ–æ–¥—ñ–≤
        current_price = btc_df['close'].iloc[-1]
        price_20_periods_ago = btc_df['close'].iloc[-20]

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∑–º—ñ–Ω–∏
        total_change_pct = (current_price - price_20_periods_ago) / price_20_periods_ago * 100

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
        volatility = btc_df['close'].pct_change().std() * 100

        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç—Ä–µ–Ω–¥—É
        if total_change_pct < -5:  # –°–ø–∞–¥ –±—ñ–ª—å—à–µ 5%
            return 'BEARISH'
        elif total_change_pct > 5:  # –ó—Ä–æ—Å—Ç–∞–Ω–Ω—è –±—ñ–ª—å—à–µ 5%
            return 'BULLISH'
        else:
            return 'NEUTRAL'
    
    async def should_close_position(
        self,
        position: Position,
        current_price: float,
        market_data: pd.DataFrame
    ) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–∫—Ä–∏–≤–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è —Å–∫–∞–ª—å–ø—ñ–Ω–≥—É
        
        –°–∫–∞–ª—å–ø—ñ–Ω–≥ –º–∞—î –¥—É–∂–µ –∂–æ—Ä—Å—Ç–∫—ñ –ø—Ä–∞–≤–∏–ª–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è:
        - –®–≤–∏–¥–∫–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—ñ —Ü—ñ–ª—ñ –∞–±–æ —Å—Ç–æ–ø-–ª–æ—Å—Å
        - –û–±–º–µ–∂–µ–Ω–∏–π —á–∞—Å —Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó
        """
        # Stop-loss —ñ take-profit (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç!)
        if position.stop_loss and current_price <= position.stop_loss:
            return True
        if position.take_profit and current_price >= position.take_profit:
            return True
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å —Ç—Ä–∏–º–∞–Ω–Ω—è (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Å–∫–∞–ª—å–ø—ñ–Ω–≥—É)
        hold_time = (datetime.now() - position.entry_time).total_seconds() / 60
        if hold_time > self.max_hold_time:
            return True
        
        # –®–≤–∏–¥–∫–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–∏ –º–∞–ª–µ–Ω—å–∫–æ–º—É –ø—Ä–∏–±—É—Ç–∫—É (—è–∫—â–æ —á–∞—Å —Å–ø–ª–∏–≤–∞—î)
        if hold_time > self.max_hold_time * 0.7:  # 70% —á–∞—Å—É –º–∏–Ω—É–ª–æ
            current_pnl_pct = (current_price - position.entry_price) / position.entry_price
            if position.side == 'BUY' and current_pnl_pct > 0.003:  # 0.3% –ø—Ä–∏–±—É—Ç–æ–∫
                return True
            elif position.side == 'SELL' and current_pnl_pct < -0.003:
                return True
        
        return False