"""
–°–≤—ñ–Ω–≥-—Å—Ç—Ä–∞—Ç–µ–≥—ñ—è –Ω–∞ 1h —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ
–î–ª—è —Å–µ—Ä–µ–¥–Ω—å–æ—Å—Ç—Ä–æ–∫–æ–≤–∏—Ö —É–≥–æ–¥
"""
import logging
from pathlib import Path
from typing import Dict, Optional, List
import pandas as pd
import joblib
from datetime import datetime

from .base_strategy import BaseStrategy, Signal
from training.rust_features import RustFeatureEngineer

logger = logging.getLogger(__name__)


class SwingStrategy1h(BaseStrategy):
    """1h —Å–≤—ñ–Ω–≥-—Å—Ç—Ä–∞—Ç–µ–≥—ñ—è –∑ Random Forest"""
    
    def __init__(
        self,
        symbols: List[str],
        testnet: bool = True,
        min_confidence: float = 0.65,
        risk_per_trade: float = 0.005  # –ú–µ–Ω—à–∏–π —Ä–∏–∑–∏–∫ –¥–ª—è –∫–æ—Ä–æ—Ç—à–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º—ñ–≤
    ):
        super().__init__(
            name="SwingStrategy1h",
            timeframe="1h",
            symbols=symbols,
            min_confidence=min_confidence,
            risk_per_trade=risk_per_trade,
            stop_loss_pct=0.015,  # 1.5% SL
            take_profit_pct=0.03  # 3% TP
        )
        self.testnet = testnet
        self.feature_engineer = RustFeatureEngineer()
        
    async def load_models(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –¥–ª—è 1h —Ç–∞–π–º—Ñ—Ä–µ–π–º—É"""
        models_dir = Path('models')
        loaded = 0
        
        for symbol in self.symbols:
            try:
                # –®—É–∫–∞—î–º–æ –º–æ–¥–µ–ª—ñ –∑ 1h –≤ –Ω–∞–∑–≤—ñ
                model_dir = models_dir / f'swing_1h_{symbol}'
                
                if not model_dir.exists():
                    logger.warning(f"‚ö†Ô∏è 1h –º–æ–¥–µ–ª—å –¥–ª—è {symbol} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ (—Ç—Ä–µ–±–∞ –Ω–∞—Ç—Ä–µ–Ω—É–≤–∞—Ç–∏)")
                    continue
                
                pkl_files = list(model_dir.glob(f'model_{symbol}_1h.pkl'))
                if not pkl_files:
                    logger.warning(f"‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ 1h –º–æ–¥–µ–ª—ñ –¥–ª—è {symbol}")
                    continue
                
                model_path = str(pkl_files[0])
                scaler_path = str(model_dir / f'scaler_{symbol}_1h.pkl')
                features_path = str(model_dir / f'features_{symbol}_1h.pkl')
                
                # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                self.models[symbol] = joblib.load(model_path)
                self.scalers[symbol] = joblib.load(scaler_path)
                self.feature_names_dict[symbol] = joblib.load(features_path)
                
                loaded += 1
                logger.info(f"‚úÖ {symbol} [1h]: –º–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ({len(self.feature_names_dict[symbol])} features)")
                
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è 1h –º–æ–¥–µ–ª—ñ {symbol}: {e}")
                continue
        
        if loaded == 0:
            logger.warning("‚ö†Ô∏è –ñ–æ–¥–Ω–æ—ó 1h –º–æ–¥–µ–ª—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ - —Ç—Ä–µ–±–∞ –Ω–∞—Ç—Ä–µ–Ω—É–≤–∞—Ç–∏!")
        else:
            logger.info(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ 1h –º–æ–¥–µ–ª–µ–π: {loaded}/{len(self.symbols)}")
        
    async def generate_signal(self, symbol: str, df: pd.DataFrame) -> Optional[Signal]:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–≤—ñ–Ω–≥-—Å–∏–≥–Ω–∞–ª—É"""
        try:
            if symbol not in self.models:
                return None
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ features
            df_features = self.feature_engineer.calculate_all(df)
            
            if df_features.empty or len(df_features) == 0:
                return None
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ features
            expected_features = self.feature_names_dict[symbol]
            missing = set(expected_features) - set(df_features.columns)
            
            if missing:
                logger.error(f"‚ùå {symbol} [1h]: –≤—ñ–¥—Å—É—Ç–Ω—ñ features: {missing}")
                return None
            
            # Prediction
            X = df_features[expected_features].iloc[-1:].values
            X_scaled = self.scalers[symbol].transform(X)
            
            prediction = self.models[symbol].predict(X_scaled)[0]
            probas = self.models[symbol].predict_proba(X_scaled)[0]
            
            proba_down = probas[0]
            proba_up = probas[1]
            confidence = max(proba_down, proba_up)
            
            current_price = df['close'].iloc[-1]
            direction = 'UP' if prediction == 1 else 'DOWN'
            
            # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è action
            if confidence >= self.min_confidence:
                action = 'BUY' if direction == 'UP' else 'SELL'
            else:
                action = 'HOLD'
            
            signal = Signal(
                symbol=symbol,
                strategy=self.name,
                action=action,
                confidence=confidence,
                price=current_price,
                timestamp=datetime.now(),
                metadata={
                    'direction': direction,
                    'proba_up': proba_up,
                    'proba_down': proba_down,
                    'timeframe': self.timeframe
                }
            )
            
            logger.info(f"üîÑ {symbol} [1h]: {direction} (confidence: {confidence:.2%}, price: ${current_price:.2f})")
            
            return signal
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ 1h –ø—Ä–æ–≥–Ω–æ–∑—É {symbol}: {e}", exc_info=True)
            return None
    
    async def should_close(self, symbol: str, position: Dict, current_price: float) -> tuple[bool, str]:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ SL/TP –¥–ª—è 1h —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó"""
        try:
            entry_price = position['entry_price']
            pnl_pct = ((current_price - entry_price) / entry_price) * 100
            
            # –ë—ñ–ª—å—à —Ç—É–≥–∏–π SL/TP –¥–ª—è 1h
            if pnl_pct <= -self.stop_loss_pct * 100:
                return True, "SL"
            
            if pnl_pct >= self.take_profit_pct * 100:
                return True, "TP"
            
            return False, ""
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è {symbol} [1h]: {e}")
            return False, ""
