"""
–ë–∞–∑–æ–≤—ñ –∫–ª–∞—Å–∏ —Ç–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π
"""
import abc
import logging
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime
from dataclasses import dataclass, field
from enum import Enum
import pandas as pd
import numpy as np

logger = logging.getLogger(__name__)


class TradeAction(Enum):
    """–î—ñ—ó –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ"""
    BUY = "BUY"
    SELL = "SELL"
    HOLD = "HOLD"
    CLOSE = "CLOSE"


class OrderType(Enum):
    """–¢–∏–ø–∏ –æ—Ä–¥–µ—Ä—ñ–≤"""
    MARKET = "MARKET"
    LIMIT = "LIMIT"
    STOP_LOSS = "STOP_LOSS"
    TAKE_PROFIT = "TAKE_PROFIT"


@dataclass
class TradeSignal:
    """–¢–æ—Ä–≥–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª"""
    symbol: str
    action: TradeAction
    confidence: float  # 0-1
    entry_price: float
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    quantity: float = 0.0
    order_type: OrderType = OrderType.MARKET
    strategy_name: str = ""
    timestamp: datetime = field(default_factory=datetime.now)
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ —Å–ª–æ–≤–Ω–∏–∫"""
        return {
            'symbol': self.symbol,
            'action': self.action.value,
            'confidence': self.confidence,
            'entry_price': self.entry_price,
            'stop_loss': self.stop_loss,
            'take_profit': self.take_profit,
            'quantity': self.quantity,
            'order_type': self.order_type.value,
            'strategy_name': self.strategy_name,
            'timestamp': self.timestamp.isoformat(),
            'metadata': self.metadata
        }


@dataclass
class Position:
    """–í—ñ–¥–∫—Ä–∏—Ç–∞ –ø–æ–∑–∏—Ü—ñ—è"""
    symbol: str
    side: str  # LONG/SHORT
    entry_price: float
    quantity: float
    entry_time: datetime
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    strategy_name: str = ""
    unrealized_pnl: float = 0.0
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    def update_pnl(self, current_price: float):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ—Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ P&L"""
        if self.side == "LONG":
            self.unrealized_pnl = (current_price - self.entry_price) * self.quantity
        else:  # SHORT
            self.unrealized_pnl = (self.entry_price - current_price) * self.quantity
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ —Å–ª–æ–≤–Ω–∏–∫"""
        return {
            'symbol': self.symbol,
            'side': self.side,
            'entry_price': self.entry_price,
            'quantity': self.quantity,
            'entry_time': self.entry_time.isoformat(),
            'stop_loss': self.stop_loss,
            'take_profit': self.take_profit,
            'strategy_name': self.strategy_name,
            'unrealized_pnl': self.unrealized_pnl,
            'metadata': self.metadata
        }


class TradingStrategy(abc.ABC):
    """–ë–∞–∑–æ–≤–∏–π –∫–ª–∞—Å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π"""

    def __init__(self, name: str, symbols: List[str], config: Optional[Dict] = None):
        self.name = name
        self.symbols = symbols
        self.config = config or {}
        self.positions: Dict[str, Position] = {}
        self.active = True
        self.max_position_size = config.get('max_position_size', 0.1) if config else 0.1  # 10% –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        self.performance = {
            'total_trades': 0,
            'winning_trades': 0,
            'losing_trades': 0,
            'total_pnl': 0.0,
            'win_rate': 0.0
        }
        logger.info(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥—ñ—è {name} —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª—ñ–≤")

    @abc.abstractmethod
    async def analyze_market(
        self, 
        market_data: Dict[str, pd.DataFrame],
        predictions: Dict[str, Dict]
    ) -> Dict[str, TradeSignal]:
        """
        –ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤
        
        Args:
            market_data: –Ü—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ –ø–æ —Å–∏–º–≤–æ–ª–∞—Ö
            predictions: ML –ø—Ä–æ–≥–Ω–æ–∑–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞—Ö
            
        Returns:
            Dict[symbol, TradeSignal]: –°–∏–≥–Ω–∞–ª–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É
        """
        pass

    @abc.abstractmethod
    async def should_close_position(
        self, 
        position: Position, 
        current_price: float,
        market_data: pd.DataFrame
    ) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–∫—Ä–∏–≤–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é
        
        Args:
            position: –í—ñ–¥–∫—Ä–∏—Ç–∞ –ø–æ–∑–∏—Ü—ñ—è
            current_price: –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞
            market_data: –ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —Ä–∏–Ω–∫—É
            
        Returns:
            bool: True —è–∫—â–æ —Ç—Ä–µ–±–∞ –∑–∞–∫—Ä–∏–≤–∞—Ç–∏
        """
        pass

    def update_performance(self, pnl: float):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"""
        self.performance['total_trades'] += 1
        self.performance['total_pnl'] += pnl
        
        if pnl > 0:
            self.performance['winning_trades'] += 1
        else:
            self.performance['losing_trades'] += 1
        
        if self.performance['total_trades'] > 0:
            self.performance['win_rate'] = (
                self.performance['winning_trades'] / self.performance['total_trades']
            )

    def get_performance(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return self.performance.copy()

    def add_position(self, position: Position):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó"""
        self.positions[position.symbol] = position
        logger.info(f"üìä {self.name}: –≤—ñ–¥–∫—Ä–∏—Ç–∞ –ø–æ–∑–∏—Ü—ñ—è {position.symbol} {position.side}")

    def remove_position(self, symbol: str) -> Optional[Position]:
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó"""
        position = self.positions.pop(symbol, None)
        if position:
            logger.info(f"üìä {self.name}: –∑–∞–∫—Ä–∏—Ç–∞ –ø–æ–∑–∏—Ü—ñ—è {symbol}")
        return position

    def has_position(self, symbol: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó"""
        return symbol in self.positions


class RiskManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∏–∑–∏–∫—ñ–≤ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π"""
    
    def __init__(self, config: Optional[Dict] = None):
        self.config = config or {}
        self.max_position_size = self.config.get('max_position_size', 0.1)  # 10% –∫–∞–ø—ñ—Ç–∞–ª—É
        self.max_leverage = self.config.get('max_leverage', 3)
        self.max_daily_loss = self.config.get('max_daily_loss', 0.05)  # 5% –≤—ñ–¥ –∫–∞–ø—ñ—Ç–∞–ª—É
        self.daily_loss = 0.0
        self.daily_trades = 0
        self.max_daily_trades = self.config.get('max_daily_trades', 50)
        
        logger.info(f"‚úÖ RiskManager: max_pos={self.max_position_size:.1%}, leverage={self.max_leverage}")
    
    def validate_trade(
        self, 
        signal: TradeSignal, 
        portfolio_value: float,
        current_positions: int
    ) -> Tuple[bool, str]:
        """
        –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É
        
        Returns:
            (is_valid, reason)
        """
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ daily loss
        if abs(self.daily_loss) >= self.max_daily_loss * portfolio_value:
            return False, f"–î–æ—Å—è–≥–Ω—É—Ç–æ daily loss limit: {self.daily_loss:.2f}"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —É–≥–æ–¥
        if self.daily_trades >= self.max_daily_trades:
            return False, f"–î–æ—Å—è–≥–Ω—É—Ç–æ daily trades limit: {self.daily_trades}"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó
        max_position_value = portfolio_value * self.max_position_size
        signal_value = signal.entry_price * signal.quantity
        if signal_value > max_position_value:
            return False, f"–ü–æ–∑–∏—Ü—ñ—è –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∞: {signal_value:.2f} > {max_position_value:.2f}"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ confidence
        min_confidence = self.config.get('min_confidence', 0.6)
        if signal.confidence < min_confidence:
            return False, f"–ù–∏–∑—å–∫–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {signal.confidence:.2f} < {min_confidence}"
        
        return True, "OK"
    
    def calculate_position_size(
        self,
        signal: TradeSignal,
        portfolio_value: float,
        risk_per_trade: float = 0.02
    ) -> float:
        """
        –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–∏–∑–∏–∫—É
        
        Args:
            signal: –¢–æ—Ä–≥–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª
            portfolio_value: –í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
            risk_per_trade: –†–∏–∑–∏–∫ –Ω–∞ —É–≥–æ–¥—É (2% –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
            
        Returns:
            –†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó –≤ –±–∞–∑–æ–≤—ñ–π –≤–∞–ª—é—Ç—ñ
        """
        if not signal.stop_loss:
            # –ë–µ–∑ stop-loss –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
            return portfolio_value * self.max_position_size / signal.entry_price
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º stop-loss
        risk_amount = portfolio_value * risk_per_trade
        price_risk = abs(signal.entry_price - signal.stop_loss)
        
        if price_risk > 0:
            quantity = risk_amount / price_risk
            max_quantity = (portfolio_value * self.max_position_size) / signal.entry_price
            return min(quantity, max_quantity)
        
        return portfolio_value * self.max_position_size / signal.entry_price
    
    def update_daily_stats(self, pnl: float):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–µ–Ω–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.daily_loss += pnl
        self.daily_trades += 1
    
    def reset_daily_stats(self):
        """–°–∫–∏–¥–∞–Ω–Ω—è –¥–µ–Ω–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.daily_loss = 0.0
        self.daily_trades = 0
        logger.info("üîÑ RiskManager: daily stats reset")
    
    def get_risk_metrics(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ —Ä–∏–∑–∏–∫—É"""
        return {
            'daily_loss': self.daily_loss,
            'daily_trades': self.daily_trades,
            'max_daily_trades': self.max_daily_trades,
            'max_daily_loss': self.max_daily_loss,
            'max_position_size': self.max_position_size,
            'max_leverage': self.max_leverage
        }


# –ï–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—ñ–≤
__all__ = [
    'TradeAction',
    'OrderType',
    'TradeSignal',
    'Position',
    'TradingStrategy',
    'RiskManager'
]