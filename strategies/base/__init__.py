"""
–ë–∞–∑–æ–≤—ñ –∫–ª–∞—Å–∏ —Ç–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π
"""
import abc
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime
from dataclasses import dataclass
from enum import Enum

import numpy as np
import pandas as pd
import logging

logger = logging.getLogger(__name__)


class TradeAction(Enum):
    """–î—ñ—ó –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ"""
    BUY = "BUY"
    SELL = "SELL"
    HOLD = "HOLD"
    CLOSE = "CLOSE"


class OrderType(Enum):
    """–¢–∏–ø–∏ –æ—Ä–¥–µ—Ä—ñ–≤"""
    MARKET = "MARKET"
    LIMIT = "LIMIT"
    STOP_LOSS = "STOP_LOSS"
    TAKE_PROFIT = "TAKE_PROFIT"


@dataclass
class TradeSignal:
    """–°–∏–≥–Ω–∞–ª –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ"""
    action: TradeAction
    symbol: str
    confidence: float
    entry_price: Optional[float] = None
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    quantity: Optional[float] = None
    timestamp: Optional[datetime] = None
    metadata: Optional[Dict[str, Any]] = None

    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = datetime.now()
        if self.metadata is None:
            self.metadata = {}


@dataclass
class Position:
    """–í—ñ–¥–∫—Ä–∏—Ç–∞ –ø–æ–∑–∏—Ü—ñ—è"""
    symbol: str
    side: str  # 'LONG' or 'SHORT'
    entry_price: float
    quantity: float
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    entry_time: Optional[datetime] = None
    metadata: Optional[Dict[str, Any]] = None

    def __post_init__(self):
        if self.entry_time is None:
            self.entry_time = datetime.now()
        if self.metadata is None:
            self.metadata = {}

    @property
    def current_value(self) -> float:
        """–ü–æ—Ç–æ—á–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ—ó"""
        # –¶–µ –±—É–¥–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏—Å—è –≤ —Ç–æ—Ä–≥–æ–≤–æ–º—É –±–æ—Ç—ñ
        return self.entry_price * self.quantity

    @property
    def unrealized_pnl(self) -> float:
        """–ù–µ—Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π P&L"""
        # –¶–µ –±—É–¥–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏—Å—è –≤ —Ç–æ—Ä–≥–æ–≤–æ–º—É –±–æ—Ç—ñ
        return 0.0


class TradingStrategy(abc.ABC):
    """–ë–∞–∑–æ–≤–∏–π –∫–ª–∞—Å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π"""

    def __init__(self, name: str, symbols: List[str], config: Optional[Dict] = None):
        self.name = name
        self.symbols = symbols
        self.config = config or {}
        self.positions: Dict[str, Position] = {}
        self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        self.max_positions = self.config.get('max_positions', 3)
        self.risk_per_trade = self.config.get('risk_per_trade', 0.01)  # 1%
        self.max_drawdown = self.config.get('max_drawdown', 0.05)  # 5%

    @abc.abstractmethod
    def analyze_market(self, market_data: Dict[str, pd.DataFrame],
                      predictions: Dict[str, Dict]) -> Dict[str, TradeSignal]:
        """
        –ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤

        Args:
            market_data: –°–ª–æ–≤–Ω–∏–∫ –∑ OHLCV –¥–∞–Ω–∏–º–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞—Ö
            predictions: –ü—Ä–æ–≥–Ω–æ–∑–∏ –º–æ–¥–µ–ª—ñ –ø–æ —Å–∏–º–≤–æ–ª–∞—Ö

        Returns:
            –°–ª–æ–≤–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        """
        pass

    @abc.abstractmethod
    def should_enter_position(self, symbol: str, signal: TradeSignal,
                            current_positions: Dict[str, Position]) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–º–æ–≤ –≤—Ö–æ–¥—É –≤ –ø–æ–∑–∏—Ü—ñ—é"""
        pass

    @abc.abstractmethod
    def should_exit_position(self, symbol: str, position: Position,
                           current_price: float, market_data: pd.DataFrame) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–º–æ–≤ –≤–∏—Ö–æ–¥—É –∑ –ø–æ–∑–∏—Ü—ñ—ó"""
        pass

    def calculate_position_size(self, capital: float, entry_price: float,
                              stop_loss: float) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–∏–∑–∏–∫—É"""
        risk_amount = capital * self.risk_per_trade
        stop_distance = abs(entry_price - stop_loss)

        if stop_distance == 0:
            return 0

        position_size = risk_amount / stop_distance
        max_position_size = capital * 0.02  # –ú–∞–∫—Å–∏–º—É–º 2% –≤—ñ–¥ –∫–∞–ø—ñ—Ç–∞–ª—É

        return min(position_size, max_position_size)

    def update_positions(self, signals: Dict[str, TradeSignal],
                        current_prices: Dict[str, float]) -> List[TradeSignal]:
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å–∏–≥–Ω–∞–ª—ñ–≤"""
        actions = []

        for symbol, signal in signals.items():
            current_price = current_prices.get(symbol, 0)

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–º–æ–≤ –≤—Ö–æ–¥—É
            if signal.action in [TradeAction.BUY, TradeAction.SELL]:
                if self.should_enter_position(symbol, signal, self.positions):
                    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é
                    position = self._create_position(signal, current_price)
                    self.positions[symbol] = position
                    actions.append(signal)
                    self.logger.info(f"üìà –í—ñ–¥–∫—Ä–∏—Ç–∞ –ø–æ–∑–∏—Ü—ñ—è {symbol}: {signal.action.value} at {current_price}")

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–º–æ–≤ –≤–∏—Ö–æ–¥—É
            elif signal.action == TradeAction.CLOSE and symbol in self.positions:
                position = self.positions[symbol]
                if self.should_exit_position(symbol, position, current_price, None):
                    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é
                    close_signal = TradeSignal(
                        action=TradeAction.CLOSE,
                        symbol=symbol,
                        confidence=1.0,
                        entry_price=current_price,
                        metadata={'position': position}
                    )
                    del self.positions[symbol]
                    actions.append(close_signal)
                    self.logger.info(f"üìâ –ó–∞–∫—Ä–∏—Ç–∞ –ø–æ–∑–∏—Ü—ñ—è {symbol} at {current_price}")

        return actions

    def _create_position(self, signal: TradeSignal, current_price: float) -> Position:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –ø–æ–∑–∏—Ü—ñ—ó"""
        side = 'LONG' if signal.action == TradeAction.BUY else 'SHORT'

        return Position(
            symbol=signal.symbol,
            side=side,
            entry_price=signal.entry_price or current_price,
            quantity=signal.quantity or 0.001,  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            stop_loss=signal.stop_loss,
            take_profit=signal.take_profit,
            metadata={'strategy': self.name, 'signal_confidence': signal.confidence}
        )

    def get_open_positions(self) -> Dict[str, Position]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π"""
        return self.positions.copy()

    def get_strategy_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó"""
        return {
            'name': self.name,
            'open_positions': len(self.positions),
            'max_positions': self.max_positions,
            'risk_per_trade': self.risk_per_trade,
            'symbols': self.symbols
        }


class RiskManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∏–∑–∏–∫—ñ–≤"""

    def __init__(self, config: Optional[Dict] = None):
        self.config = config or {}
        self.max_daily_loss = self.config.get('max_daily_loss', 0.05)  # 5%
        self.max_drawdown = self.config.get('max_drawdown', 0.10)  # 10%
        self.max_positions = self.config.get('max_positions', 5)

        # –°—Ç–∞–Ω
        self.daily_pnl = 0.0
        self.peak_capital = 0.0
        self.current_capital = 0.0

    def can_open_position(self, capital: float, position_size: float,
                         current_positions: int) -> Tuple[bool, str]:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó"""

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–∑–∏—Ü—ñ–π
        if current_positions >= self.max_positions:
            return False, f"–î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ–π ({self.max_positions})"

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó
        if position_size > capital * 0.05:  # –ú–∞–∫—Å–∏–º—É–º 5% –≤—ñ–¥ –∫–∞–ø—ñ—Ç–∞–ª—É
            return False, f"–†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π ({position_size/capital:.1%})"

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–µ–Ω–Ω–æ–≥–æ –∑–±–∏—Ç–∫—É
        if self.daily_pnl < -self.max_daily_loss * capital:
            return False, f"–î–æ—Å—è–≥–Ω—É—Ç–æ –¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç –∑–±–∏—Ç–∫—É ({self.daily_pnl/capital:.1%})"

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ drawdown
        if capital < self.peak_capital * (1 - self.max_drawdown):
            return False, f"–î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π drawdown ({self.max_drawdown:.1%})"

        return True, "OK"

    def update_capital(self, new_capital: float):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–ø—ñ—Ç–∞–ª—É"""
        self.current_capital = new_capital
        self.peak_capital = max(self.peak_capital, new_capital)

    def reset_daily_pnl(self):
        """–°–∫–∏–¥–∞–Ω–Ω—è –¥–µ–Ω–Ω–æ–≥–æ P&L"""
        self.daily_pnl = 0.0