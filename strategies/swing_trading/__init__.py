"""
–°—Ç—Ä–∞—Ç–µ–≥—ñ—è —Å–≤—ñ–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥—É - –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ 1-5 –¥–Ω—ñ–≤
"""
import numpy as np
import pandas as pd
from typing import Dict, List, Optional
from datetime import datetime, timedelta

from strategies.base import TradingStrategy, TradeSignal, TradeAction, Position


class SwingTradingStrategy(TradingStrategy):
    """
    –°—Ç—Ä–∞—Ç–µ–≥—ñ—è —Å–≤—ñ–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥—É –¥–ª—è —Å–µ—Ä–µ–¥–Ω—å–æ—Å—Ç—Ä–æ–∫–æ–≤–∏—Ö –ø–æ–∑–∏—Ü—ñ–π

    –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:
    - –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ–π: 1-5 –¥–Ω—ñ–≤
    - –¶—ñ–ª—ñ: 5-15% –ø—Ä–∏–±—É—Ç–æ–∫ –Ω–∞ —É–≥–æ–¥—É
    - –§–æ–∫—É—Å –Ω–∞ —Ç—Ä–µ–Ω–¥–æ–≤–∏—Ö —Ä—É—Ö–∞—Ö
    - –ú–µ–Ω—à–∞ —á–∞—Å—Ç–æ—Ç–∞ —É–≥–æ–¥, –≤–∏—â–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å
    """

    def __init__(self, symbols: List[str], config: Optional[Dict] = None):
        super().__init__("swing_trading", symbols, config)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–≤—ñ–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥—É
        self.min_confidence = 0.15  # –ü—ñ–¥–≤–∏—â–µ–Ω–æ –¥–ª—è –º–µ–¥–≤–µ–∂–æ–≥–æ —Ä–∏–Ω–∫—É –∑ –≤–∏—Å–æ–∫–æ—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—é
        self.target_profit_pct = self.config.get('target_profit_pct', 0.06)  # –ó–±—ñ–ª—å—à–µ–Ω–æ –¥–æ 6% –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è —Ä–∏–∑–∏–∫/–ø—Ä–∏–±—É—Ç–æ–∫
        self.stop_loss_pct = self.config.get('stop_loss_pct', 0.03)  # 3%
        self.max_hold_time = self.config.get('max_hold_time', 7200)  # 5 –¥–Ω—ñ–≤ –≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö

        # –¢—Ä–µ–Ω–¥–æ–≤—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
        self.trend_period = self.config.get('trend_period', 20)  # –ü–µ—Ä—ñ–æ–¥ –¥–ª—è —Ç—Ä–µ–Ω–¥—É
        self.volume_confirmation = self.config.get('volume_confirmation', True)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_trades = 0
        self.winning_trades = 0
        self.total_pnl = 0.0

    async def analyze_market(self, market_data: Dict[str, pd.DataFrame],
                      predictions: Dict[str, Dict]) -> Dict[str, TradeSignal]:
        """
        –ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É –¥–ª—è —Å–≤—ñ–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥—É
        """
        signals = {}

        # –ê–Ω–∞–ª—ñ–∑ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Ä–∏–Ω–∫–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–¥—É (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ BTC —è–∫ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä)
        market_trend = self._analyze_market_trend(market_data)
        print(f"üåç Swing Market Trend: {market_trend}")

        for symbol in self.symbols:
            if symbol not in market_data or symbol not in predictions:
                continue

            df = market_data[symbol]
            pred = predictions[symbol]

            print(f"üîÑ Swing analyze_market: {symbol}, data_len={len(df)}")
            signal = self._analyze_symbol(symbol, df, pred, market_trend)
            if signal:
                signals[symbol] = signal

        return signals

    def _analyze_symbol(self, symbol: str, df: pd.DataFrame,
                       prediction: Dict, market_trend: str) -> Optional[TradeSignal]:
        """
        –ê–Ω–∞–ª—ñ–∑ –æ–∫—Ä–µ–º–æ–≥–æ —Å–∏–º–≤–æ–ª—É –¥–ª—è —Å–≤—ñ–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥—É
        """
        if len(df) < 10:  # –ó–º–µ–Ω—à–µ–Ω–æ –¥–æ 10 –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            return None

        current_price = df['close'].iloc[-1]
        predicted_change = prediction.get('change_percent', 0)
        confidence = prediction.get('confidence', 0)

        # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
        print(f"üîç Swing {symbol}: price={current_price:.4f}, pred_change={predicted_change:.6f}, conf={confidence:.3f}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥—É
        trend_direction, trend_strength = self._analyze_trend(df)

        # –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π —Å–∏–≥–Ω–∞–ª –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ
        combined_confidence = (confidence + trend_strength) / 2

        print(f"üìà Swing {symbol}: trend_dir={trend_direction}, trend_str={trend_strength:.3f}, combined_conf={combined_confidence:.3f}")

        if combined_confidence < self.min_confidence:
            print(f"‚ùå Swing {symbol}: combined_conf {combined_confidence:.3f} < min_conf {self.min_confidence}")
            return None

        # –°–ø—Ä–æ—Å—Ç–∏–º–æ: —è–∫—â–æ —î –ø—Ä–æ–≥–Ω–æ–∑ –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏, –≥–µ–Ω–µ—Ä—É—î–º–æ —Å–∏–≥–Ω–∞–ª –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç—Ä–µ–Ω–¥—É
        if abs(predicted_change) < 0.01:  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∏–π —Ä—É—Ö 1% (–±—É–ª–æ 0.1%)
            print(f"‚ùå Swing {symbol}: abs(pred_change) {abs(predicted_change):.6f} < 0.01")
            return None

        print(f"‚úÖ Swing {symbol}: –ì–µ–Ω–µ—Ä—É—î–º–æ —Å–∏–≥–Ω–∞–ª!")

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ –¥–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ —Å—Ç–æ–ø-–ª–æ—Å–∞
        volatility = df['close'].pct_change().std() * 100
        print(f"üìä Swing {symbol}: volatility={volatility:.2f}%")

        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–ø—Ä—è–º—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø—Ä–æ–≥–Ω–æ–∑—É –∑ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–º —Å—Ç–æ–ø-–ª–æ—Å–æ–º
        if predicted_change > 0.01:  # –ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ (1%)
            action = TradeAction.BUY
            # –î–∏–Ω–∞–º—ñ—á–Ω–∏–π —Å—Ç–æ–ø-–ª–æ—Å: 2x –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å, –∞–ª–µ –Ω–µ –º–µ–Ω—à–µ 1% —ñ –Ω–µ –±—ñ–ª—å—à–µ 4%
            dynamic_sl_pct = min(max(volatility * 2 / 100, 0.01), 0.04)
            stop_loss = current_price * (1 - dynamic_sl_pct)
            take_profit = current_price * (1 + self.target_profit_pct)
        elif predicted_change < -0.01:  # –ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ (1%)
            action = TradeAction.SELL
            # –î–∏–Ω–∞–º—ñ—á–Ω–∏–π —Å—Ç–æ–ø-–ª–æ—Å: 2x –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å, –∞–ª–µ –Ω–µ –º–µ–Ω—à–µ 1% —ñ –Ω–µ –±—ñ–ª—å—à–µ 4%
            dynamic_sl_pct = min(max(volatility * 2 / 100, 0.01), 0.04)
            stop_loss = current_price * (1 + dynamic_sl_pct)
            take_profit = current_price * (1 - self.target_profit_pct)
        else:
            return None

        # –§—ñ–ª—å—Ç—Ä –º–µ–¥–≤–µ–∂–æ–≥–æ —Ä–∏–Ω–∫—É - –Ω–µ –≥–µ–Ω–µ—Ä—É—î–º–æ BUY —Å–∏–≥–Ω–∞–ª–∏ –≤ —Å–∏–ª—å–Ω–æ–º—É —Å–ø–∞–¥—ñ
        if market_trend == 'BEARISH' and action == TradeAction.BUY:
            print(f"üö´ Swing {symbol}: BUY —Å–∏–≥–Ω–∞–ª –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –º–µ–¥–≤–µ–∂–∏–π —Ä–∏–Ω–æ–∫")
            return None

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–∏–≥–Ω–∞–ª —Å–ø–æ—á–∞—Ç–∫—É –±–µ–∑ quantity
        signal = TradeSignal(
            action=action,
            symbol=symbol,
            confidence=combined_confidence,
            entry_price=current_price,
            stop_loss=stop_loss,
            take_profit=take_profit,
            quantity=0.0,  # –¢–∏–º—á–∞—Å–æ–≤–æ
            metadata={
                'strategy_type': 'swing_trading',
                'predicted_change': predicted_change,
                'trend_direction': trend_direction,
                'trend_strength': trend_strength,
                'hold_period_days': self.max_hold_time / 1440,  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ –¥–Ω—ñ
                'volatility': volatility
            }
        )
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤–∏–π –º–µ—Ç–æ–¥
        signal.quantity = 0.01  # –§—ñ–∫—Å–æ–≤–∞–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è

        return signal

    def _analyze_trend(self, df: pd.DataFrame) -> tuple:
        """
        –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—É –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –∫—ñ–ª—å–∫–æ—Ö —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤
        """
        # 1. Moving Average Trend
        short_ma = df['close'].rolling(10).mean()
        long_ma = df['close'].rolling(self.trend_period).mean()

        current_short = short_ma.iloc[-1]
        current_long = long_ma.iloc[-1]
        prev_short = short_ma.iloc[-2]
        prev_long = long_ma.iloc[-2]

        ma_trend = 0
        if current_short > current_long and prev_short <= prev_long:
            ma_trend = 1  # Golden cross
        elif current_short < current_long and prev_short >= prev_long:
            ma_trend = -1  # Death cross

        # 2. Price vs MA position
        current_price = df['close'].iloc[-1]
        price_trend = 0
        if current_price > current_short > current_long:
            price_trend = 1  # Strong uptrend
        elif current_price < current_short < current_long:
            price_trend = -1  # Strong downtrend

        # 3. Momentum analysis
        momentum = df['close'].pct_change(self.trend_period).iloc[-1]
        momentum_score = 1 if momentum > 0.05 else -1 if momentum < -0.05 else 0

        # 4. Support/Resistance levels
        recent_high = df['high'].tail(self.trend_period).max()
        recent_low = df['low'].tail(self.trend_period).min()
        current_price = df['close'].iloc[-1]

        sr_score = 0
        if current_price > recent_high * 0.98:  # Near resistance
            sr_score = -0.5
        elif current_price < recent_low * 1.02:  # Near support
            sr_score = 0.5

        # –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π —Ç—Ä–µ–Ω–¥
        total_score = ma_trend + price_trend + momentum_score + sr_score
        trend_strength = abs(total_score) / 4  # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ [0, 1]

        if total_score > 1.5:
            return 'UP', min(1.0, trend_strength)
        elif total_score < -1.5:
            return 'DOWN', min(1.0, trend_strength)
        else:
            return 'SIDEWAYS', 0.5

    def _confirm_volume(self, df: pd.DataFrame) -> bool:
        """
        –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É –æ–±—Å—è–≥–æ–º
        """
        if 'volume' not in df.columns:
            return True  # –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –æ–±—Å—è–≥, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É

        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ —Å–µ—Ä–µ–¥–Ω—ñ–º –æ–±—Å—è–≥–æ–º
        avg_volume = df['volume'].rolling(20).mean().iloc[-1]
        current_volume = df['volume'].iloc[-1]

        return current_volume > avg_volume * 1.2  # –û–±—Å—è–≥ –Ω–∞ 20% –≤–∏—â–µ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ

    def should_enter_position(self, symbol: str, signal: TradeSignal,
                            current_positions: Dict[str, Position]) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–º–æ–≤ –≤—Ö–æ–¥—É –¥–ª—è —Å–≤—ñ–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥—É
        """
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–∑–∏—Ü—ñ–π (–º–µ–Ω—à–µ –¥–ª—è —Å–≤—ñ–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥—É)
        if len(current_positions) >= min(self.max_positions, 2):
            return False

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –Ω–µ–º–∞—î –≤–∂–µ –ø–æ–∑–∏—Ü—ñ—ó –≤ —Ü—å–æ–º—É —Å–∏–º–≤–æ–ª—ñ
        if symbol in current_positions:
            return False

        # –í–∏—Å–æ–∫–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å —Å–∏–≥–Ω–∞–ª—É
        if signal.confidence < self.min_confidence:
            return False

        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–ª—è —Å–≤—ñ–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥—É
        trend_direction = signal.metadata.get('trend_direction')
        if trend_direction == 'SIDEWAYS':
            return False  # –ù–µ –≤—Ö–æ–¥–∏—Ç–∏ –≤ –±—ñ—á–Ω–∏–π —Ç—Ä–µ–Ω–¥

        return True

    def should_exit_position(self, symbol: str, position: Position,
                           current_price: float, market_data: pd.DataFrame) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–º–æ–≤ –≤–∏—Ö–æ–¥—É –¥–ª—è —Å–≤—ñ–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥—É
        """
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É —É—Ç—Ä–∏–º–∞–Ω–Ω—è
        hold_time = (datetime.now() - position.entry_time).total_seconds() / 3600  # –≤ –≥–æ–¥–∏–Ω–∞—Ö
        max_hold_hours = self.max_hold_time / 60

        if hold_time > max_hold_hours:
            self.logger.info(f"‚è∞ –í–∏—Ö—ñ–¥ —á–µ—Ä–µ–∑ —á–∞—Å —É—Ç—Ä–∏–º–∞–Ω–Ω—è: {hold_time:.1f} –≥–æ–¥ –∑ {max_hold_hours}")
            return True

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ stop-loss
        if position.stop_loss:
            if position.side == 'LONG' and current_price <= position.stop_loss:
                self.logger.info(f"üõë Stop-loss –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ: {current_price} <= {position.stop_loss}")
                return True
            elif position.side == 'SHORT' and current_price >= position.stop_loss:
                self.logger.info(f"üõë Stop-loss –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ: {current_price} >= {position.stop_loss}")
                return True

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ take-profit
        if position.take_profit:
            if position.side == 'LONG' and current_price >= position.take_profit:
                self.logger.info(f"üéØ Take-profit –¥–æ—Å—è–≥–Ω—É—Ç–æ: {current_price} >= {position.take_profit}")
                return True
            elif position.side == 'SHORT' and current_price <= position.take_profit:
                self.logger.info(f"üéØ Take-profit –¥–æ—Å—è–≥–Ω—É—Ç–æ: {current_price} <= {position.take_profit}")
                return True

        # –¢—Ä–µ–Ω–¥–æ–≤–∏–π –≤–∏—Ö—ñ–¥ (–∑–º—ñ–Ω–∞ —Ç—Ä–µ–Ω–¥—É)
        if market_data is not None and len(market_data) > 20:
            trend_direction, trend_strength = self._analyze_trend(market_data)

            # –Ø–∫—â–æ —Ç—Ä–µ–Ω–¥ –∑–º—ñ–Ω–∏–≤—Å—è –ø—Ä–æ—Ç–∏ –ø–æ–∑–∏—Ü—ñ—ó
            if position.side == 'LONG' and trend_direction == 'DOWN' and trend_strength > 0.7:
                self.logger.info(f"üìâ –í–∏—Ö—ñ–¥ —á–µ—Ä–µ–∑ –∑–º—ñ–Ω—É —Ç—Ä–µ–Ω–¥—É: {trend_direction} (strength: {trend_strength:.2f})")
                return True
            elif position.side == 'SHORT' and trend_direction == 'UP' and trend_strength > 0.7:
                self.logger.info(f"üìà –í–∏—Ö—ñ–¥ —á–µ—Ä–µ–∑ –∑–º—ñ–Ω—É —Ç—Ä–µ–Ω–¥—É: {trend_direction} (strength: {trend_strength:.2f})")
                return True

        # Trailing stop (–¥–∏–Ω–∞–º—ñ—á–Ω–∏–π —Å—Ç–æ–ø-–ª–æ—Å)
        if self._should_trailing_stop(position, current_price):
            self.logger.info(f"üèÉ Trailing stop –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ at {current_price}")
            return True

        return False

    def _should_trailing_stop(self, position: Position, current_price: float) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ trailing stop
        """
        if not position.stop_loss:
            return False

        # –î–ª—è –¥–æ–≤–≥–∏—Ö –ø–æ–∑–∏—Ü—ñ–π: —è–∫—â–æ —Ü—ñ–Ω–∞ –≤–∏—Ä–æ—Å–ª–∞ –Ω–∞ 3%, –ø—ñ–¥—Ç—è–≥—É—î–º–æ —Å—Ç–æ–ø-–ª–æ—Å
        if position.side == 'LONG':
            profit_pct = (current_price - position.entry_price) / position.entry_price
            if profit_pct > 0.03:  # 3% –ø—Ä–∏–±—É—Ç–æ–∫
                new_stop = current_price * 0.97  # 3% –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏
                if new_stop > position.stop_loss:
                    position.stop_loss = new_stop
                    return False  # –ù–µ –≤–∏—Ö–æ–¥–∏–º–æ, —Ç—ñ–ª—å–∫–∏ –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–æ–ø

        # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–æ–∑–∏—Ü—ñ–π: –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ
        elif position.side == 'SHORT':
            profit_pct = (position.entry_price - current_price) / position.entry_price
            if profit_pct > 0.03:  # 3% –ø—Ä–∏–±—É—Ç–æ–∫
                new_stop = current_price * 1.03  # 3% –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏
                if new_stop < position.stop_loss:
                    position.stop_loss = new_stop
                    return False  # –ù–µ –≤–∏—Ö–æ–¥–∏–º–æ, —Ç—ñ–ª—å–∫–∏ –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–æ–ø

        return False

    def update_trade_stats(self, pnl: float):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≥–æ–¥"""
        self.total_trades += 1
        self.total_pnl += pnl

        if pnl > 0:
            self.winning_trades += 1

    def get_strategy_stats(self) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–≤—ñ–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥—É"""
        stats = super().get_strategy_stats()
        stats.update({
            'total_trades': self.total_trades,
            'winning_trades': self.winning_trades,
            'win_rate': self.winning_trades / max(self.total_trades, 1),
            'total_pnl': self.total_pnl,
            'avg_trade_pnl': self.total_pnl / max(self.total_trades, 1),
            'target_profit_pct': self.target_profit_pct,
            'stop_loss_pct': self.stop_loss_pct,
            'max_hold_days': self.max_hold_time / 1440,
            'trend_period': self.trend_period,
            'volume_confirmation': self.volume_confirmation
        })
        return stats

    def _analyze_market_trend(self, market_data: Dict[str, pd.DataFrame]) -> str:
        """
        –ê–Ω–∞–ª—ñ–∑ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥—É —Ä–∏–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ BTC
        """
        if 'BTCUSDT' not in market_data:
            return 'NEUTRAL'

        btc_df = market_data['BTCUSDT']
        if len(btc_df) < 20:
            return 'NEUTRAL'

        # –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—É –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 20 –ø–µ—Ä—ñ–æ–¥—ñ–≤
        current_price = btc_df['close'].iloc[-1]
        price_20_periods_ago = btc_df['close'].iloc[-20]

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∑–º—ñ–Ω–∏
        total_change_pct = (current_price - price_20_periods_ago) / price_20_periods_ago * 100

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
        volatility = btc_df['close'].pct_change().std() * 100

        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç—Ä–µ–Ω–¥—É
        if total_change_pct < -5:  # –°–ø–∞–¥ –±—ñ–ª—å—à–µ 5%
            return 'BEARISH'
        elif total_change_pct > 5:  # –ó—Ä–æ—Å—Ç–∞–Ω–Ω—è –±—ñ–ª—å—à–µ 5%
            return 'BULLISH'
        else:
            return 'NEUTRAL'
    
    async def should_close_position(
        self,
        position: Position,
        current_price: float,
        market_data: pd.DataFrame
    ) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–∫—Ä–∏–≤–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è —Å–≤—ñ–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥—É
        
        –°–≤—ñ–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥ –º–∞—î –±—ñ–ª—å—à —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞:
        - –î–æ–≤—à–∏–π —á–∞—Å —É—Ç—Ä–∏–º–∞–Ω–Ω—è
        - –ë—ñ–ª—å—à—ñ —Ü—ñ–ª—ñ –ø–æ –ø—Ä–∏–±—É—Ç–∫—É
        - –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥–æ–≤–∏—Ö —Ä–æ–∑–≤–æ—Ä–æ—Ç—ñ–≤
        """
        # Stop-loss —ñ take-profit
        if position.stop_loss and current_price <= position.stop_loss:
            return True
        if position.take_profit and current_price >= position.take_profit:
            return True
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å —Ç—Ä–∏–º–∞–Ω–Ω—è (5 –¥–Ω—ñ–≤)
        hold_time = (datetime.now() - position.entry_time).total_seconds() / 60
        if hold_time > self.max_hold_time:
            return True
        
        # –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ —Ä–æ–∑–≤–æ—Ä–æ—Ç—É (—è–∫—â–æ —î –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö)
        if len(market_data) >= 50:
            try:
                # –¢—Ä–µ–Ω–¥ —Ä–æ–∑–≤–µ—Ä–Ω—É–≤—Å—è
                sma_short = market_data['close'].rolling(window=10).mean()
                sma_long = market_data['close'].rolling(window=50).mean()
                
                if position.side == 'BUY':
                    # –ö–æ—Ä–æ—Ç–∫–æ—Å—Ç—Ä–æ–∫–æ–≤–∞ MA –ø–µ—Ä–µ—Ç–Ω—É–ª–∞ –¥–æ–≤–≥–æ—Å—Ç—Ä–æ–∫–æ–≤—É –≤–Ω–∏–∑
                    if sma_short.iloc[-1] < sma_long.iloc[-1] and sma_short.iloc[-2] >= sma_long.iloc[-2]:
                        return True
                elif position.side == 'SELL':
                    # –ö–æ—Ä–æ—Ç–∫–æ—Å—Ç—Ä–æ–∫–æ–≤–∞ MA –ø–µ—Ä–µ—Ç–Ω—É–ª–∞ –¥–æ–≤–≥–æ—Å—Ç—Ä–æ–∫–æ–≤—É –≤–≥–æ—Ä—É
                    if sma_short.iloc[-1] > sma_long.iloc[-1] and sma_short.iloc[-2] <= sma_long.iloc[-2]:
                        return True
            except Exception:
                pass
        
        return False