"""
–°—Ç—Ä–∞—Ç–µ–≥—ñ—è –¥–µ–Ω–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ - –ø–æ–∑–∏—Ü—ñ—ó –ø—Ä–æ—Ç—è–≥–æ–º —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–Ω—è
"""
import numpy as np
import pandas as pd
from typing import Dict, List, Optional
from datetime import datetime, time

from strategies.base import TradingStrategy, TradeSignal, TradeAction, Position


class DayTradingStrategy(TradingStrategy):
    """
    –°—Ç—Ä–∞—Ç–µ–≥—ñ—è –¥–µ–Ω–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ

    –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:
    - –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ–π: 2-8 –≥–æ–¥–∏–Ω
    - –¶—ñ–ª—ñ: 2-5% –ø—Ä–∏–±—É—Ç–æ–∫ –Ω–∞ —É–≥–æ–¥—É
    - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤
    - –§–æ–∫—É—Å –Ω–∞ —ñ–Ω—Ç—Ä–∞–¥–µ–π —Ç—Ä–µ–Ω–¥–∞—Ö
    """

    def __init__(self, symbols: List[str], config: Optional[Dict] = None):
        super().__init__("day_trading", symbols, config)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–µ–Ω–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ
        self.min_confidence = self.config.get('min_confidence', 0.65)
        self.target_profit_pct = self.config.get('target_profit_pct', 0.03)  # 3%
        self.stop_loss_pct = self.config.get('stop_loss_pct', 0.015)  # 1.5%
        self.max_hold_time = self.config.get('max_hold_time', 480)  # 8 –≥–æ–¥–∏–Ω

        # –ß–∞—Å–æ–≤—ñ —Ä–∞–º–∫–∏ –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ
        self.trading_start = time(9, 0)  # 9:00 UTC
        self.trading_end = time(16, 0)   # 16:00 UTC

        # –¢–µ—Ö–Ω—ñ—á–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
        self.rsi_overbought = self.config.get('rsi_overbought', 70)
        self.rsi_oversold = self.config.get('rsi_oversold', 30)
        self.volume_multiplier = self.config.get('volume_multiplier', 1.5)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_trades = 0
        self.winning_trades = 0
        self.total_pnl = 0.0

    def analyze_market(self, market_data: Dict[str, pd.DataFrame],
                      predictions: Dict[str, Dict]) -> Dict[str, TradeSignal]:
        """
        –ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É –¥–ª—è –¥–µ–Ω–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ
        """
        signals = {}

        for symbol in self.symbols:
            if symbol not in market_data or symbol not in predictions:
                continue

            df = market_data[symbol]
            pred = predictions[symbol]

            signal = self._analyze_symbol(symbol, df, pred)
            if signal:
                signals[symbol] = signal

        return signals

    def _analyze_symbol(self, symbol: str, df: pd.DataFrame,
                       prediction: Dict) -> Optional[TradeSignal]:
        """
        –ê–Ω–∞–ª—ñ–∑ –æ–∫—Ä–µ–º–æ–≥–æ —Å–∏–º–≤–æ–ª—É –∑ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–º–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        """
        if len(df) < 50:  # –ü–æ—Ç—Ä—ñ–±–Ω–æ –±—ñ–ª—å—à–µ –¥–∞–Ω–∏—Ö –¥–ª—è —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤
            return None

        current_price = df['close'].iloc[-1]
        predicted_change = prediction.get('change_percent', 0)
        confidence = prediction.get('confidence', 0)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É —Ç–æ—Ä–≥—ñ–≤–ª—ñ
        current_time = datetime.now().time()
        if not (self.trading_start <= current_time <= self.trading_end):
            return None

        # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
        technical_score = self._calculate_technical_score(df)

        # –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π —Å–∏–≥–Ω–∞–ª
        combined_confidence = (confidence + technical_score) / 2

        if combined_confidence < self.min_confidence:
            return None

        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–ø—Ä—è–º—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø—Ä–æ–≥–Ω–æ–∑—É —Ç–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤
        if predicted_change > 0.02 and technical_score > 0.6:  # –°–∏–ª—å–Ω–∏–π —Å–∏–≥–Ω–∞–ª –≤–≥–æ—Ä—É
            action = TradeAction.BUY
            stop_loss = current_price * (1 - self.stop_loss_pct)
            take_profit = current_price * (1 + self.target_profit_pct)
        elif predicted_change < -0.02 and technical_score < 0.4:  # –°–∏–ª—å–Ω–∏–π —Å–∏–≥–Ω–∞–ª –≤–Ω–∏–∑
            action = TradeAction.SELL
            stop_loss = current_price * (1 + self.stop_loss_pct)
            take_profit = current_price * (1 - self.target_profit_pct)
        else:
            return None

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
        volatility = df['close'].pct_change().std()
        adjusted_risk = self.risk_per_trade * (1 + volatility * 2)  # –ó–±—ñ–ª—å—à—É—î–º–æ —Ä–∏–∑–∏–∫ –ø—Ä–∏ –≤–∏—Å–æ–∫—ñ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ

        quantity = self.calculate_position_size(10000, current_price, stop_loss)

        return TradeSignal(
            action=action,
            symbol=symbol,
            confidence=combined_confidence,
            entry_price=current_price,
            stop_loss=stop_loss,
            take_profit=take_profit,
            quantity=quantity,
            metadata={
                'strategy_type': 'day_trading',
                'predicted_change': predicted_change,
                'technical_score': technical_score,
                'volatility': volatility,
                'trading_time': current_time.isoformat()
            }
        )

    def _calculate_technical_score(self, df: pd.DataFrame) -> float:
        """
        –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ —Å–∫–æ—Ä–∏–Ω–≥—É
        """
        score = 0.5  # –ë–∞–∑–æ–≤–∏–π score

        # RSI –∞–Ω–∞–ª—ñ–∑
        if 'RSI' in df.columns:
            current_rsi = df['RSI'].iloc[-1]
            if current_rsi < self.rsi_oversold:
                score += 0.2  # Oversold - —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É
            elif current_rsi > self.rsi_overbought:
                score -= 0.2  # Overbought - —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂

        # –¢—Ä–µ–Ω–¥ –∞–Ω–∞–ª—ñ–∑ (moving averages)
        if 'EMA' in df.columns and len(df) > 20:
            short_ma = df['close'].rolling(10).mean().iloc[-1]
            long_ma = df['close'].rolling(20).mean().iloc[-1]
            current_price = df['close'].iloc[-1]

            if current_price > short_ma > long_ma:
                score += 0.15  # –°–∏–ª—å–Ω–∏–π –≤–∏—Å—Ö—ñ–¥–Ω–∏–π —Ç—Ä–µ–Ω–¥
            elif current_price < short_ma < long_ma:
                score -= 0.15  # –°–∏–ª—å–Ω–∏–π –Ω–∏–∑—Ö—ñ–¥–Ω–∏–π —Ç—Ä–µ–Ω–¥

        # –û–±—Å—è–≥ –∞–Ω–∞–ª—ñ–∑
        if len(df) > 10:
            avg_volume = df['volume'].rolling(10).mean().iloc[-1]
            current_volume = df['volume'].iloc[-1]

            if current_volume > avg_volume * self.volume_multiplier:
                score += 0.1  # –í–∏—Å–æ–∫–∏–π –æ–±—Å—è–≥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î —Å–∏–≥–Ω–∞–ª

        # –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å (Bollinger Bands)
        if 'Upper_Band' in df.columns and 'Lower_Band' in df.columns:
            upper = df['Upper_Band'].iloc[-1]
            lower = df['Lower_Band'].iloc[-1]
            current_price = df['close'].iloc[-1]

            # –Ø–∫—â–æ —Ü—ñ–Ω–∞ –±–ª–∏–∑—å–∫–æ –¥–æ –Ω–∏–∂–Ω—å–æ—ó —Å–º—É–≥–∏ - –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª —Ä–æ—Å—Ç—É
            if current_price < lower * 1.02:
                score += 0.1
            # –Ø–∫—â–æ —Ü—ñ–Ω–∞ –±–ª–∏–∑—å–∫–æ –¥–æ –≤–µ—Ä—Ö–Ω—å–æ—ó —Å–º—É–≥–∏ - –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª –ø–∞–¥—ñ–Ω–Ω—è
            elif current_price > upper * 0.98:
                score -= 0.1

        return max(0, min(1, score))  # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ [0, 1]

    def should_enter_position(self, symbol: str, signal: TradeSignal,
                            current_positions: Dict[str, Position]) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–º–æ–≤ –≤—Ö–æ–¥—É –¥–ª—è –¥–µ–Ω–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ
        """
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–∑–∏—Ü—ñ–π
        if len(current_positions) >= self.max_positions:
            return False

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –Ω–µ–º–∞—î –≤–∂–µ –ø–æ–∑–∏—Ü—ñ—ó –≤ —Ü—å–æ–º—É —Å–∏–º–≤–æ–ª—ñ
        if symbol in current_positions:
            return False

        # –î–µ–Ω–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è
        current_time = datetime.now().time()
        if not (self.trading_start <= current_time <= self.trading_end):
            return False

        # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å —Å–∏–≥–Ω–∞–ª—É
        if signal.confidence < self.min_confidence:
            return False

        return True

    def should_exit_position(self, symbol: str, position: Position,
                           current_price: float, market_data: pd.DataFrame) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–º–æ–≤ –≤–∏—Ö–æ–¥—É –¥–ª—è –¥–µ–Ω–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ
        """
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É —É—Ç—Ä–∏–º–∞–Ω–Ω—è
        hold_time = (datetime.now() - position.entry_time).total_seconds() / 3600  # –≤ –≥–æ–¥–∏–Ω–∞—Ö
        if hold_time > self.max_hold_time / 60:  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ –≥–æ–¥–∏–Ω–∏
            self.logger.info(f"‚è∞ –í–∏—Ö—ñ–¥ —á–µ—Ä–µ–∑ —á–∞—Å —É—Ç—Ä–∏–º–∞–Ω–Ω—è: {hold_time:.1f} –≥–æ–¥")
            return True

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–Ω—Ü—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–Ω—è
        current_time = datetime.now().time()
        if current_time >= time(15, 30):  # –ó–∞ 30 —Ö–≤ –¥–æ –∫—ñ–Ω—Ü—è
            self.logger.info(f"üèÅ –í–∏—Ö—ñ–¥ —á–µ—Ä–µ–∑ –∫—ñ–Ω–µ—Ü—å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–Ω—è: {current_time}")
            return True

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ stop-loss
        if position.stop_loss:
            if position.side == 'LONG' and current_price <= position.stop_loss:
                self.logger.info(f"üõë Stop-loss –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ: {current_price} <= {position.stop_loss}")
                return True
            elif position.side == 'SHORT' and current_price >= position.stop_loss:
                self.logger.info(f"üõë Stop-loss –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ: {current_price} >= {position.stop_loss}")
                return True

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ take-profit
        if position.take_profit:
            if position.side == 'LONG' and current_price >= position.take_profit:
                self.logger.info(f"üéØ Take-profit –¥–æ—Å—è–≥–Ω—É—Ç–æ: {current_price} >= {position.take_profit}")
                return True
            elif position.side == 'SHORT' and current_price <= position.take_profit:
                self.logger.info(f"üéØ Take-profit –¥–æ—Å—è–≥–Ω—É—Ç–æ: {current_price} <= {position.take_profit}")
                return True

        # –¢–µ—Ö–Ω—ñ—á–Ω–∏–π –≤–∏—Ö—ñ–¥ (–∑–º—ñ–Ω–∞ —Ç—Ä–µ–Ω–¥—É)
        if market_data is not None and len(market_data) > 10:
            recent_prices = market_data['close'].tail(5)
            trend = (recent_prices.iloc[-1] - recent_prices.iloc[0]) / recent_prices.iloc[0]

            # –Ø–∫—â–æ —Ç—Ä–µ–Ω–¥ –∑–º—ñ–Ω–∏–≤—Å—è –ø—Ä–æ—Ç–∏ –ø–æ–∑–∏—Ü—ñ—ó
            if position.side == 'LONG' and trend < -0.005:  # -0.5%
                self.logger.info(f"üìâ –í–∏—Ö—ñ–¥ —á–µ—Ä–µ–∑ –∑–º—ñ–Ω—É —Ç—Ä–µ–Ω–¥—É: {trend:.4f}")
                return True
            elif position.side == 'SHORT' and trend > 0.005:  # +0.5%
                self.logger.info(f"üìà –í–∏—Ö—ñ–¥ —á–µ—Ä–µ–∑ –∑–º—ñ–Ω—É —Ç—Ä–µ–Ω–¥—É: {trend:.4f}")
                return True

        return False

    def update_trade_stats(self, pnl: float):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≥–æ–¥"""
        self.total_trades += 1
        self.total_pnl += pnl

        if pnl > 0:
            self.winning_trades += 1

    def get_strategy_stats(self) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–Ω–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ"""
        stats = super().get_strategy_stats()
        stats.update({
            'total_trades': self.total_trades,
            'winning_trades': self.winning_trades,
            'win_rate': self.winning_trades / max(self.total_trades, 1),
            'total_pnl': self.total_pnl,
            'avg_trade_pnl': self.total_pnl / max(self.total_trades, 1),
            'target_profit_pct': self.target_profit_pct,
            'stop_loss_pct': self.stop_loss_pct,
            'max_hold_time': self.max_hold_time,
            'trading_hours': f"{self.trading_start}-{self.trading_end}"
        })
        return stats