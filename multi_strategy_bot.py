#!/usr/bin/env python3
"""
Multi-Strategy Trading Bot
–ó–∞–ø—É—Å–∫–∞—î –∫—ñ–ª—å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π –æ–¥–Ω–æ—á–∞—Å–Ω–æ –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö
"""
import asyncio
import argparse
import logging
import os
from datetime import datetime
from binance.client import Client
from dotenv import load_dotenv

from strategies.trend_strategy_4h import TrendStrategy4h
from strategy_manager import StrategyManager
from telegram_bot import TelegramNotifier

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ .env
load_dotenv()

logging.basicConfig(
    level=logging.INFO,
    format='%(levelname)s:%(name)s:%(message)s'
)
logger = logging.getLogger(__name__)

# Telegram notifier
telegram_notifier = TelegramNotifier()

# –°–∏–º–≤–æ–ª–∏ –∑–∞ accuracy
SYMBOLS_70_PLUS = ['BTCUSDT', 'TRXUSDT', 'LTCUSDT']  # ‚â•70%
SYMBOLS_60_70 = ['XRPUSDT', 'BNBUSDT', 'ALGOUSDT', 'ETHUSDT', 'UNIUSDT', 'XLMUSDT']  # 60-70%


class MultiStrategyBot:
    """–ú—É–ª—å—Ç–∏—Å—Ç—Ä–∞—Ç–µ–≥—ñ–π–Ω–∏–π —Ç–æ—Ä–≥–æ–≤–∏–π –±–æ—Ç"""
    
    def __init__(
        self,
        testnet: bool = True,
        enable_trading: bool = False,
        use_all_symbols: bool = False
    ):
        # Binance client - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–ª—é—á—ñ –∑ .env
        if testnet:
            api_key = os.getenv('FUTURES_API_KEY')
            api_secret = os.getenv('FUTURES_API_SECRET')
            
            if not api_key or not api_secret:
                logger.warning("‚ö†Ô∏è API –∫–ª—é—á—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ .env, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞—Ä—ñ")
                api_key = "9be7e1fae31b26ee6d3be23e1c3e4c8eca0d7a265e37fef5f91259e3a4cf9286"
                api_secret = "ba1b2cfce24e65f6f374e1e78c7ea5e803ec1cab06d89e4b3e7b5ba46e4b20a6"
            
            logger.info("‚úÖ Binance client (TESTNET)")
        else:
            raise NotImplementedError("Real trading –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        
        self.client = Client(api_key, api_secret, testnet=testnet)
        self.testnet = testnet
        self.enable_trading = enable_trading
        
        # Strategy Manager
        self.strategy_manager = StrategyManager(self.client)
        
        # –í–∏–±—ñ—Ä —Å–∏–º–≤–æ–ª—ñ–≤
        if use_all_symbols:
            symbols_4h = SYMBOLS_70_PLUS + SYMBOLS_60_70
            logger.info(f"üìä –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –í–°–Ü —Å–∏–º–≤–æ–ª–∏: {len(symbols_4h)}")
        else:
            symbols_4h = SYMBOLS_70_PLUS
            logger.info(f"üìä –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¢–û–ü —Å–∏–º–≤–æ–ª–∏ (‚â•70%): {len(symbols_4h)}")
        
        # –î–æ–¥–∞—î–º–æ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
        self._setup_strategies(symbols_4h)
        
        if not enable_trading:
            logger.info("‚ÑπÔ∏è Demo —Ä–µ–∂–∏–º (—É–≥–æ–¥–∏ –Ω–µ –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è)")
        else:
            logger.warning("‚ö†Ô∏è –†–ï–ê–õ–¨–ù–Ü –£–ì–û–î–ò –£–í–Ü–ú–ö–ù–ï–ù–Ü!")
    
    def _setup_strategies(self, symbols_4h: list):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π"""
        
        # 4h Trend Strategy
        trend_4h = TrendStrategy4h(
            symbols=symbols_4h,
            testnet=self.testnet,
            min_confidence=0.70,
            risk_per_trade=0.01
        )
        self.strategy_manager.add_strategy(trend_4h)
        
        # TODO: –î–æ–¥–∞—Ç–∏ 1h Swing Strategy –∫–æ–ª–∏ –Ω–∞—Ç—Ä–µ–Ω—É—î–º–æ –º–æ–¥–µ–ª—ñ
        # swing_1h = SwingStrategy1h(...)
        # self.strategy_manager.add_strategy(swing_1h)
    
    async def get_balance(self) -> float:
        """–ë–∞–ª–∞–Ω—Å USDT"""
        try:
            loop = asyncio.get_event_loop()
            account = await loop.run_in_executor(
                None,
                self.client.futures_account
            )
            
            for asset in account['assets']:
                if asset['asset'] == 'USDT':
                    balance = float(asset['walletBalance'])
                    logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å: ${balance:.2f} USDT")
                    return balance
            
            return 0.0
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –±–∞–ª–∞–Ω—Å—É: {e}")
            return 0.0
    
    async def execute_signal(self, signal):
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É"""
        try:
            logger.info(f"\nüéØ –°–ò–ì–ù–ê–õ: {signal.action} {signal.symbol}")
            logger.info(f"   –°—Ç—Ä–∞—Ç–µ–≥—ñ—è: {signal.strategy}")
            logger.info(f"   –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {signal.confidence:.2%}")
            logger.info(f"   –¶—ñ–Ω–∞: ${signal.price:.2f}")
            
            # Telegram notification
            await telegram_notifier.send_message(
                f"üéØ {signal.action} SIGNAL\n"
                f"Symbol: {signal.symbol}\n"
                f"Strategy: {signal.strategy}\n"
                f"Confidence: {signal.confidence:.2%}\n"
                f"Price: ${signal.price:.2f}\n"
                f"{'üî¥ REAL' if self.enable_trading else 'üü° DEMO'}"
            )
            
            if not self.enable_trading:
                logger.info("   ‚ö†Ô∏è DEMO MODE - —É–≥–æ–¥–∞ –ù–ï –≤–∏–∫–æ–Ω–∞–Ω–∞")
                return
            
            # TODO: –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤
            # if signal.action == 'BUY':
            #     await self.open_position(signal)
            # elif signal.action == 'SELL' or signal.action == 'CLOSE':
            #     await self.close_position(signal)
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É: {e}", exc_info=True)
    
    async def run(self):
        """–ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª"""
        logger.info("="*70)
        logger.info("üöÄ MULTI-STRATEGY TRADING BOT")
        logger.info("="*70)
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
        await self.strategy_manager.initialize()
        
        # Telegram —Å—Ç–∞—Ä—Ç
        await telegram_notifier.send_message(
            f"üöÄ Multi-Strategy Bot –∑–∞–ø—É—â–µ–Ω–æ\n"
            f"–°—Ç—Ä–∞—Ç–µ–≥—ñ–π: {len(self.strategy_manager.strategies)}\n"
            f"–†–µ–∂–∏–º: {'üî¥ –†–ï–ê–õ–¨–ù–Ü –£–ì–û–î–ò' if self.enable_trading else 'üü° DEMO'}"
        )
        
        # –ë–∞–ª–∞–Ω—Å
        await self.get_balance()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π
        self.strategy_manager.print_stats()
        
        # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
        min_interval = self.strategy_manager.get_min_interval()
        logger.info(f"\n‚è±Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ {min_interval}s ({min_interval/3600:.1f}h)")
        
        iteration = 0
        
        try:
            while True:
                iteration += 1
                logger.info(f"\n{'='*70}")
                logger.info(f"üîÑ –Ü—Ç–µ—Ä–∞—Ü—ñ—è #{iteration} - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                logger.info(f"{'='*70}")
                
                try:
                    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –≤—ñ–¥ –≤—Å—ñ—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π
                    signals = await self.strategy_manager.get_all_signals()
                    
                    if signals:
                        logger.info(f"\nüìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª—ñ–≤")
                        
                        for signal in signals:
                            await self.execute_signal(signal)
                    else:
                        logger.info("‚è∏Ô∏è –ù–µ–º–∞—î —Å–∏–≥–Ω–∞–ª—ñ–≤ - HOLD")
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    if iteration % 10 == 0:
                        self.strategy_manager.print_stats()
                    
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ—Ç–µ—Ä–∞—Ü—ñ—ó: {e}", exc_info=True)
                    await telegram_notifier.send_message(f"‚ùå ERROR: {str(e)[:100]}")
                
                # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è
                logger.info(f"\n‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è {min_interval}s –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏...")
                await asyncio.sleep(min_interval)
                
        except KeyboardInterrupt:
            logger.info("\nüëã Multi-Strategy Bot –∑—É–ø–∏–Ω–µ–Ω–æ")
            await telegram_notifier.send_message("üëã Multi-Strategy Bot –∑—É–ø–∏–Ω–µ–Ω–æ")
        except Exception as e:
            logger.error(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}", exc_info=True)
            await telegram_notifier.send_message(f"‚ùå CRITICAL ERROR: {str(e)[:100]}")


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    parser = argparse.ArgumentParser(description='Multi-Strategy Trading Bot')
    parser.add_argument('--enable-trading', action='store_true', help='–£–≤—ñ–º–∫–Ω—É—Ç–∏ —Ä–µ–∞–ª—å–Ω—É —Ç–æ—Ä–≥—ñ–≤–ª—é')
    parser.add_argument('--all-symbols', action='store_true', help='–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤—Å—ñ —Å–∏–º–≤–æ–ª–∏ (–≤–∫–ª—é—á–Ω–æ –∑ 60-70%)')
    parser.add_argument('--testnet', action='store_true', default=True, help='–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ testnet (default)')
    
    args = parser.parse_args()
    
    bot = MultiStrategyBot(
        testnet=args.testnet,
        enable_trading=args.enable_trading,
        use_all_symbols=args.all_symbols
    )
    
    await bot.run()


if __name__ == "__main__":
    asyncio.run(main())
